{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Get support for Nokogiri with a Tidelift subscription Nokogiri \u00b6 Nokogiri (\u92f8) makes it easy and painless to work with XML and HTML from Ruby. It provides a sensible, easy-to-understand API for reading , writing, modifying , and querying documents. It is fast and standards-compliant by relying on native parsers like libxml2 (C) and xerces (Java). Guiding Principles \u00b6 Some guiding principles Nokogiri tries to follow: be secure-by-default by treating all documents as untrusted by default be a thin-as-reasonable layer on top of the underlying parsers, and don't attempt to fix behavioral differences between the parsers Features Overview \u00b6 DOM Parser for XML, HTML4, and HTML5 SAX Parser for XML and HTML4 Push Parser for XML and HTML4 Document search via XPath 1.0 Document search via CSS3 selectors, with some jquery-like extensions XSD Schema validation XSLT transformation \"Builder\" DSL for XML and HTML documents Status \u00b6 Support, Getting Help, and Reporting Issues \u00b6 All official documentation is posted at https://nokogiri.org (the source for which is at https://github.com/sparklemotion/nokogiri.org/ , and we welcome contributions). Consider subscribing to Tidelift which provides license assurances and timely security notifications for your open source dependencies, including Nokogiri. Tidelift subscriptions also help the Nokogiri maintainers fund our automated testing which in turn allows us to ship releases, bugfixes, and security updates more often. Reading \u00b6 Your first stops for learning more about Nokogiri should be: API Documentation Tutorials An excellent community-maintained Cheat Sheet Ask For Help \u00b6 There are a few ways to ask exploratory questions: The Ruby Discord chat server is active at https://discord.gg/UyQnKrT The Nokogiri mailing list is active at https://groups.google.com/group/nokogiri-talk Open an issue using the \"Help Request\" template at https://github.com/sparklemotion/nokogiri/issues Please do not mail the maintainers at their personal addresses. Report A Bug \u00b6 The Nokogiri bug tracker is at https://github.com/sparklemotion/nokogiri/issues Please use the \"Bug Report\" or \"Installation Difficulties\" templates. Security and Vulnerability Reporting \u00b6 Please report vulnerabilities at https://hackerone.com/nokogiri Full information and description of our security policy is in SECURITY.md Semantic Versioning Policy \u00b6 Nokogiri follows Semantic Versioning (since 2017 or so). We bump Major.Minor.Patch versions following this guidance: Major : (we've never done this) Significant backwards-incompatible changes to the public API that would require rewriting existing application code. Some examples of backwards-incompatible changes we might someday consider for a Major release are at ROADMAP.md . Minor : Features and bugfixes. Updating packaged libraries for non-security-related reasons. Dropping support for EOLed Ruby versions. Some folks find this objectionable , but SemVer says this is OK if the public API hasn't changed . Backwards-incompatible changes to internal or private methods and constants. These are detailed in the \"Changes\" section of each changelog entry. Patch : Bugfixes. Security updates. Updating packaged libraries for security-related reasons. Installation \u00b6 Requirements: Ruby >= 2.5 JRuby >= 9.2.0.0 Native Gems: Faster, more reliable installation \u00b6 \"Native gems\" contain pre-compiled libraries for a specific machine architecture. On supported platforms, this removes the need for compiling the C extension and the packaged libraries, or for system dependencies to exist. This results in much faster installation and more reliable installation , which as you probably know are the biggest headaches for Nokogiri users. Supported Platforms \u00b6 As of v1.11.0, Nokogiri ships pre-compiled, \"native\" gems for the following platforms: Linux: x86-linux and x86_64-linux (req: glibc >= 2.17 ), including musl platforms like Alpine Darwin/MacOS: x86_64-darwin and arm64-darwin Windows: x86-mingw32 and x64-mingw32 Java: any platform running JRuby 9.2 or higher To determine whether your system supports one of these gems, look at the output of bundle platform or ruby -e 'puts Gem::Platform.local.to_s' . If you're on a supported platform, either gem install or bundle install should install a native gem without any additional action on your part. This installation should only take a few seconds, and your output should look something like: $ gem install nokogiri Fetching nokogiri-1.11.0-x86_64-linux.gem Successfully installed nokogiri-1.11.0-x86_64-linux 1 gem installed Other Installation Options \u00b6 Because Nokogiri is a C extension, it requires that you have a C compiler toolchain, Ruby development header files, and some system dependencies installed. The following may work for you if you have an appropriately-configured system: gem install nokogiri If you have any issues, please visit Installing Nokogiri for more complete instructions and troubleshooting. How To Use Nokogiri \u00b6 Nokogiri is a large library, and so it's challenging to briefly summarize it. We've tried to provide long, real-world examples at Tutorials . Parsing and Querying \u00b6 Here is example usage for parsing and querying a document: #! /usr/bin/env ruby require 'nokogiri' require 'open-uri' # Fetch and parse HTML document doc = Nokogiri :: HTML ( URI . open ( 'https://nokogiri.org/tutorials/installing_nokogiri.html' )) # Search for nodes by css doc . css ( 'nav ul.menu li a' , 'article h2' ) . each do | link | puts link . content end # Search for nodes by xpath doc . xpath ( '//nav//ul//li/a' , '//article//h2' ) . each do | link | puts link . content end # Or mix and match doc . search ( 'nav ul.menu li a' , '//article//h2' ) . each do | link | puts link . content end Encoding \u00b6 Strings are always stored as UTF-8 internally. Methods that return text values will always return UTF-8 encoded strings. Methods that return a string containing markup (like to_xml , to_html and inner_html ) will return a string encoded like the source document. WARNING Some documents declare one encoding, but actually use a different one. In these cases, which encoding should the parser choose? Data is just a stream of bytes. Humans add meaning to that stream. Any particular set of bytes could be valid characters in multiple encodings, so detecting encoding with 100% accuracy is not possible. libxml2 does its best, but it can't be right all the time. If you want Nokogiri to handle the document encoding properly, your best bet is to explicitly set the encoding. Here is an example of explicitly setting the encoding to EUC-JP on the parser: doc = Nokogiri . XML ( '<foo><bar /></foo>' , nil , 'EUC-JP' ) Technical Overview \u00b6 Guiding Principles \u00b6 As noted above, two guiding principles of the software are: be secure-by-default by treating all documents as untrusted by default be a thin-as-reasonable layer on top of the underlying parsers, and don't attempt to fix behavioral differences between the parsers Notably, despite all parsers being standards-compliant, there are behavioral inconsistencies between the parsers used in the CRuby and JRuby implementations, and Nokogiri does not and should not attempt to remove these inconsistencies. Instead, we surface these differences in the test suite when they are important/semantic; or we intentionally write tests to depend only on the important/semantic bits (omitting whitespace from regex matchers on results, for example). CRuby \u00b6 The Ruby (a.k.a., CRuby, MRI, YARV) implementation is a C extension that depends on libxml2 and libxslt (which in turn depend on zlib and possibly libiconv). These dependencies are met by default by Nokogiri's packaged versions of the libxml2 and libxslt source code, but a configuration option --use-system-libraries is provided to allow specification of alternative library locations. See Installing Nokogiri for full documentation. We provide native gems by pre-compiling libxml2 and libxslt (and potentially zlib and libiconv) and packaging them into the gem file. In this case, no compilation is necessary at installation time, which leads to faster and more reliable installation. See LICENSE-DEPENDENCIES.md for more information on which dependencies are provided in which native and source gems. JRuby \u00b6 The Java (a.k.a. JRuby) implementation is a Java extension that depends primarily on Xerces and NekoHTML for parsing, though additional dependencies are on isorelax , nekodtd , jing , serializer , xalan-j , and xml-apis . These dependencies are provided by pre-compiled jar files packaged in the java platform gem. See LICENSE-DEPENDENCIES.md for more information on which dependencies are provided in which native and source gems. Contributing \u00b6 See CONTRIBUTING.md for an intro guide to developing Nokogiri. Code of Conduct \u00b6 We've adopted the Contributor Covenant code of conduct, which you can read in full in CODE_OF_CONDUCT.md . License \u00b6 This project is licensed under the terms of the MIT license. See this license at LICENSE.md . Dependencies \u00b6 Some additional libraries may be distributed with your version of Nokogiri. Please see LICENSE-DEPENDENCIES.md for a discussion of the variations as well as the licenses thereof. Authors \u00b6 Mike Dalessio Aaron Patterson Yoko Harada Akinori MUSHA John Shahid Karol Bucek Sam Ruby Craig Barnes Stephen Checkoway Lars Kanis Sergio Arbeo Timothy Elliott Nobuyoshi Nakada","title":"Home"},{"location":"index.html#nokogiri","text":"Nokogiri (\u92f8) makes it easy and painless to work with XML and HTML from Ruby. It provides a sensible, easy-to-understand API for reading , writing, modifying , and querying documents. It is fast and standards-compliant by relying on native parsers like libxml2 (C) and xerces (Java).","title":"Nokogiri"},{"location":"index.html#guiding-principles","text":"Some guiding principles Nokogiri tries to follow: be secure-by-default by treating all documents as untrusted by default be a thin-as-reasonable layer on top of the underlying parsers, and don't attempt to fix behavioral differences between the parsers","title":"Guiding Principles"},{"location":"index.html#features-overview","text":"DOM Parser for XML, HTML4, and HTML5 SAX Parser for XML and HTML4 Push Parser for XML and HTML4 Document search via XPath 1.0 Document search via CSS3 selectors, with some jquery-like extensions XSD Schema validation XSLT transformation \"Builder\" DSL for XML and HTML documents","title":"Features Overview"},{"location":"index.html#status","text":"","title":"Status"},{"location":"index.html#support-getting-help-and-reporting-issues","text":"All official documentation is posted at https://nokogiri.org (the source for which is at https://github.com/sparklemotion/nokogiri.org/ , and we welcome contributions). Consider subscribing to Tidelift which provides license assurances and timely security notifications for your open source dependencies, including Nokogiri. Tidelift subscriptions also help the Nokogiri maintainers fund our automated testing which in turn allows us to ship releases, bugfixes, and security updates more often.","title":"Support, Getting Help, and Reporting Issues"},{"location":"index.html#reading","text":"Your first stops for learning more about Nokogiri should be: API Documentation Tutorials An excellent community-maintained Cheat Sheet","title":"Reading"},{"location":"index.html#ask-for-help","text":"There are a few ways to ask exploratory questions: The Ruby Discord chat server is active at https://discord.gg/UyQnKrT The Nokogiri mailing list is active at https://groups.google.com/group/nokogiri-talk Open an issue using the \"Help Request\" template at https://github.com/sparklemotion/nokogiri/issues Please do not mail the maintainers at their personal addresses.","title":"Ask For Help"},{"location":"index.html#report-a-bug","text":"The Nokogiri bug tracker is at https://github.com/sparklemotion/nokogiri/issues Please use the \"Bug Report\" or \"Installation Difficulties\" templates.","title":"Report A Bug"},{"location":"index.html#security-and-vulnerability-reporting","text":"Please report vulnerabilities at https://hackerone.com/nokogiri Full information and description of our security policy is in SECURITY.md","title":"Security and Vulnerability Reporting"},{"location":"index.html#semantic-versioning-policy","text":"Nokogiri follows Semantic Versioning (since 2017 or so). We bump Major.Minor.Patch versions following this guidance: Major : (we've never done this) Significant backwards-incompatible changes to the public API that would require rewriting existing application code. Some examples of backwards-incompatible changes we might someday consider for a Major release are at ROADMAP.md . Minor : Features and bugfixes. Updating packaged libraries for non-security-related reasons. Dropping support for EOLed Ruby versions. Some folks find this objectionable , but SemVer says this is OK if the public API hasn't changed . Backwards-incompatible changes to internal or private methods and constants. These are detailed in the \"Changes\" section of each changelog entry. Patch : Bugfixes. Security updates. Updating packaged libraries for security-related reasons.","title":"Semantic Versioning Policy"},{"location":"index.html#installation","text":"Requirements: Ruby >= 2.5 JRuby >= 9.2.0.0","title":"Installation"},{"location":"index.html#native-gems-faster-more-reliable-installation","text":"\"Native gems\" contain pre-compiled libraries for a specific machine architecture. On supported platforms, this removes the need for compiling the C extension and the packaged libraries, or for system dependencies to exist. This results in much faster installation and more reliable installation , which as you probably know are the biggest headaches for Nokogiri users.","title":"Native Gems: Faster, more reliable installation"},{"location":"index.html#supported-platforms","text":"As of v1.11.0, Nokogiri ships pre-compiled, \"native\" gems for the following platforms: Linux: x86-linux and x86_64-linux (req: glibc >= 2.17 ), including musl platforms like Alpine Darwin/MacOS: x86_64-darwin and arm64-darwin Windows: x86-mingw32 and x64-mingw32 Java: any platform running JRuby 9.2 or higher To determine whether your system supports one of these gems, look at the output of bundle platform or ruby -e 'puts Gem::Platform.local.to_s' . If you're on a supported platform, either gem install or bundle install should install a native gem without any additional action on your part. This installation should only take a few seconds, and your output should look something like: $ gem install nokogiri Fetching nokogiri-1.11.0-x86_64-linux.gem Successfully installed nokogiri-1.11.0-x86_64-linux 1 gem installed","title":"Supported Platforms"},{"location":"index.html#other-installation-options","text":"Because Nokogiri is a C extension, it requires that you have a C compiler toolchain, Ruby development header files, and some system dependencies installed. The following may work for you if you have an appropriately-configured system: gem install nokogiri If you have any issues, please visit Installing Nokogiri for more complete instructions and troubleshooting.","title":"Other Installation Options"},{"location":"index.html#how-to-use-nokogiri","text":"Nokogiri is a large library, and so it's challenging to briefly summarize it. We've tried to provide long, real-world examples at Tutorials .","title":"How To Use Nokogiri"},{"location":"index.html#parsing-and-querying","text":"Here is example usage for parsing and querying a document: #! /usr/bin/env ruby require 'nokogiri' require 'open-uri' # Fetch and parse HTML document doc = Nokogiri :: HTML ( URI . open ( 'https://nokogiri.org/tutorials/installing_nokogiri.html' )) # Search for nodes by css doc . css ( 'nav ul.menu li a' , 'article h2' ) . each do | link | puts link . content end # Search for nodes by xpath doc . xpath ( '//nav//ul//li/a' , '//article//h2' ) . each do | link | puts link . content end # Or mix and match doc . search ( 'nav ul.menu li a' , '//article//h2' ) . each do | link | puts link . content end","title":"Parsing and Querying"},{"location":"index.html#encoding","text":"Strings are always stored as UTF-8 internally. Methods that return text values will always return UTF-8 encoded strings. Methods that return a string containing markup (like to_xml , to_html and inner_html ) will return a string encoded like the source document. WARNING Some documents declare one encoding, but actually use a different one. In these cases, which encoding should the parser choose? Data is just a stream of bytes. Humans add meaning to that stream. Any particular set of bytes could be valid characters in multiple encodings, so detecting encoding with 100% accuracy is not possible. libxml2 does its best, but it can't be right all the time. If you want Nokogiri to handle the document encoding properly, your best bet is to explicitly set the encoding. Here is an example of explicitly setting the encoding to EUC-JP on the parser: doc = Nokogiri . XML ( '<foo><bar /></foo>' , nil , 'EUC-JP' )","title":"Encoding"},{"location":"index.html#technical-overview","text":"","title":"Technical Overview"},{"location":"index.html#guiding-principles_1","text":"As noted above, two guiding principles of the software are: be secure-by-default by treating all documents as untrusted by default be a thin-as-reasonable layer on top of the underlying parsers, and don't attempt to fix behavioral differences between the parsers Notably, despite all parsers being standards-compliant, there are behavioral inconsistencies between the parsers used in the CRuby and JRuby implementations, and Nokogiri does not and should not attempt to remove these inconsistencies. Instead, we surface these differences in the test suite when they are important/semantic; or we intentionally write tests to depend only on the important/semantic bits (omitting whitespace from regex matchers on results, for example).","title":"Guiding Principles"},{"location":"index.html#cruby","text":"The Ruby (a.k.a., CRuby, MRI, YARV) implementation is a C extension that depends on libxml2 and libxslt (which in turn depend on zlib and possibly libiconv). These dependencies are met by default by Nokogiri's packaged versions of the libxml2 and libxslt source code, but a configuration option --use-system-libraries is provided to allow specification of alternative library locations. See Installing Nokogiri for full documentation. We provide native gems by pre-compiling libxml2 and libxslt (and potentially zlib and libiconv) and packaging them into the gem file. In this case, no compilation is necessary at installation time, which leads to faster and more reliable installation. See LICENSE-DEPENDENCIES.md for more information on which dependencies are provided in which native and source gems.","title":"CRuby"},{"location":"index.html#jruby","text":"The Java (a.k.a. JRuby) implementation is a Java extension that depends primarily on Xerces and NekoHTML for parsing, though additional dependencies are on isorelax , nekodtd , jing , serializer , xalan-j , and xml-apis . These dependencies are provided by pre-compiled jar files packaged in the java platform gem. See LICENSE-DEPENDENCIES.md for more information on which dependencies are provided in which native and source gems.","title":"JRuby"},{"location":"index.html#contributing","text":"See CONTRIBUTING.md for an intro guide to developing Nokogiri.","title":"Contributing"},{"location":"index.html#code-of-conduct","text":"We've adopted the Contributor Covenant code of conduct, which you can read in full in CODE_OF_CONDUCT.md .","title":"Code of Conduct"},{"location":"index.html#license","text":"This project is licensed under the terms of the MIT license. See this license at LICENSE.md .","title":"License"},{"location":"index.html#dependencies","text":"Some additional libraries may be distributed with your version of Nokogiri. Please see LICENSE-DEPENDENCIES.md for a discussion of the variations as well as the licenses thereof.","title":"Dependencies"},{"location":"index.html#authors","text":"Mike Dalessio Aaron Patterson Yoko Harada Akinori MUSHA John Shahid Karol Bucek Sam Ruby Craig Barnes Stephen Checkoway Lars Kanis Sergio Arbeo Timothy Elliott Nobuyoshi Nakada","title":"Authors"},{"location":"CHANGELOG.html","text":"Nokogiri Changelog \u00b6 Nokogiri follows Semantic Versioning , please see the README.md for details. 1.12.3 / 2021-08-10 \u00b6 Fixed \u00b6 [CRuby] Fix compilation of libgumbo on older systems with versions of GCC that give errors on C99-isms. Affected systems include RHEL6, RHEL7, and SLES12. [ #2302 ] 1.12.2 / 2021-08-04 \u00b6 Fixed \u00b6 [CRuby] Ensure that C extension files in non-native gem installations are loaded using require and rely on $LOAD_PATH instead of using require_relative . This issue only exists when deleting shared libraries that exist outside the extensions directory, something users occasionally do to conserve disk space. [ #2300 ] 1.12.1 / 2021-08-03 \u00b6 Fixed \u00b6 [CRuby] Fix compilation of libgumbo on BSD systems by avoiding GNU-isms. [ #2298 ] 1.12.0 / 2021-08-02 \u00b6 Notable Addition: HTML5 Support (CRuby only) \u00b6 HTML5 support has been added (to CRuby only) by merging Nokogumbo into Nokogiri. The Nokogumbo public API has been preserved, so this functionality is available under the Nokogiri::HTML5 namespace. [ #2204 ] Please note that HTML5 support is not available for JRuby in this version. However, we feel it is important to think about JRuby and we hope to work on this in the future. If you're interested in helping with HTML5 support on JRuby, please reach out to the maintainers by commenting on issue #2227 . Many thanks to Sam Ruby, Steve Checkoway, and Craig Barnes for creating and maintaining Nokogumbo and supporting the Gumbo HTML5 parser. They're now Nokogiri core contributors with all the powers and privileges pertaining thereto. \ud83d\ude4c Notable Change: Nokogiri::HTML4 module and namespace \u00b6 Nokogiri::HTML has been renamed to Nokogiri::HTML4 , and Nokogiri::HTML is aliased to preserve backwards-compatibility. Nokogiri::HTML and Nokogiri::HTML4 parse methods still use libxml2's (or NekoHTML's) HTML4 parser in the v1.12 release series. Take special note that if you rely on the class name of an object in your code, objects will now report a class of Nokogiri::HTML4::Foo where they previously reported Nokogiri::HTML::Foo . Instead of relying on the string returned by Object#class , prefer Class#=== or Object#is_a? or Object#instance_of? . Future releases of Nokogiri may deprecate HTML methods or otherwise change this behavior, so please start using HTML4 in place of HTML . Added \u00b6 [CRuby] Nokogiri::VERSION_INFO[\"libxslt\"][\"datetime_enabled\"] is a new boolean value which describes whether libxslt (or, more properly, libexslt) has compiled-in datetime support. This generally going to be true , but some distros ship without this support (e.g., some mingw UCRT-based packages, see https://github.com/msys2/MINGW-packages/pull/8957 ). See #2272 for more details. Changed \u00b6 Introduce a new constant, Nokogiri::XML::ParseOptions::DEFAULT_XSLT , which adds the libxslt-preferred options of NOENT | DTDLOAD | DTDATTR | NOCDATA to ParseOptions::DEFAULT_XML . Nokogiri.XSLT parses stylesheets using ParseOptions::DEFAULT_XSLT , which should make some edge-case XSL transformations match libxslt's default behavior. [ #1940 ] Fixed \u00b6 [CRuby] Namespaced attributes are handled properly when their parent node is reparented into another document. Previously, the namespace may have gotten dropped. [ #2228 ] [CRuby] Reparented nodes no longer inherit their parent's namespace. Previously, a node without a namespace was forced to adopt its parent's namespace. [ #1712 ] Improved \u00b6 [CRuby] Speed up (slightly) the compile time of packaged libraries libiconv , libxml2 , and libxslt by using autoconf's --disable-dependency-tracking option. (\"ruby\" platform gem only.) Deprecated \u00b6 Deprecating Nokogumbo's Nokogiri::HTML5.get . This method will be removed in a future version of Nokogiri. Dependencies \u00b6 [CRuby] Upgrade mini_portile2 dependency from ~> 2.5.0 to ~> 2.6.1 . (\"ruby\" platform gem only.) 1.11.7 / 2021-06-02 \u00b6 Fixed \u00b6 [CRuby] Backporting an upstream fix to XPath recursion depth limits which impacted some users of complex XPath queries. This issue is present in libxml 2.9.11 and 2.9.12. [ #2257 ] 1.11.6 / 2021-05-26 \u00b6 Fixed \u00b6 [CRuby] DocumentFragment#path now does proper error-checking to handle behavior introduced in libxml > 2.9.10. In v1.11.4 and v1.11.5, calling DocumentFragment#path could result in a segfault. 1.11.5 / 2021-05-19 \u00b6 Fixed \u00b6 [Windows CRuby] Work around segfault at process exit on Windows when using libxml2 system DLLs. libxml 2.9.12 introduced new behavior to avoid memory leaks when unloading libxml2 shared libraries (see libxml/!66 ). Early testing caught this segfault on non-Windows platforms (see #2059 and libxml@956534e ) but it was incompletely fixed and is still an issue on Windows platforms that are using system DLLs. We work around this by configuring libxml2 in this situation to use its default memory management functions. Note that if Nokogiri is not on Windows, or is not using shared system libraries, it will will continue to configure libxml2 to use Ruby's memory management functions. Nokogiri::VERSION_INFO[\"libxml\"][\"memory_management\"] will allow you to verify when the default memory management functions are being used. [ #2241 ] Added \u00b6 Nokogiri::VERSION_INFO[\"libxml\"] now contains the key \"memory_management\" to declare whether libxml2 is using its default memory management functions, or whether it uses the memory management functions from ruby . See above for more details. 1.11.4 / 2021-05-14 \u00b6 Security \u00b6 [CRuby] Vendored libxml2 upgraded to v2.9.12 which addresses: CVE-2019-20388 CVE-2020-24977 CVE-2021-3517 CVE-2021-3518 CVE-2021-3537 CVE-2021-3541 Note that two additional CVEs were addressed upstream but are not relevant to this release. CVE-2021-3516 via xmllint is not present in Nokogiri, and CVE-2020-7595 has been patched in Nokogiri since v1.10.8 (see #1992 ). Please see nokogiri/GHSA-7rrm-v45f-jp64 or #2233 for a more complete analysis of these CVEs and patches. Dependencies \u00b6 [CRuby] vendored libxml2 is updated from 2.9.10 to 2.9.12. (Note that 2.9.11 was skipped because it was superseded by 2.9.12 a few hours after its release.) 1.11.3 / 2021-04-07 \u00b6 Fixed \u00b6 [CRuby] Passing non- Node objects to Document#root= now raises an ArgumentError exception. Previously this likely segfaulted. [ #1900 ] [JRuby] Passing non- Node objects to Document#root= now raises an ArgumentError exception. Previously this raised a TypeError exception. [CRuby] arm64/aarch64 systems (like Apple's M1) can now compile libxml2 and libxslt from source (though we continue to strongly advise users to install the native gems for the best possible experience) 1.11.2 / 2021-03-11 \u00b6 Fixed \u00b6 [CRuby] NodeSet may now safely contain Node objects from multiple documents. Previously the GC lifecycle of the parent Document objects could lead to nodes being GCed while still in scope. [ #1952 ] [CRuby] Patch libxml2 to avoid \"huge input lookup\" errors on large CDATA elements. (See upstream GNOME/libxml2#200 and GNOME/libxml2!100 .) [ #2132 ]. [CRuby+Windows] Enable Nokogumbo (and other downstream gems) to compile and link against nokogiri.so by including LDFLAGS in Nokogiri::VERSION_INFO . [ #2167 ] [CRuby] {XML,HTML}::Document.parse now invokes #initialize exactly once. Previously #initialize was invoked twice on each object. [JRuby] {XML,HTML}::Document.parse now invokes #initialize exactly once. Previously #initialize was not called, which was a problem for subclassing such as done by Loofah . Improved \u00b6 Reduce the number of object allocations needed when parsing an HTML::DocumentFragment . [ #2087 ] (Thanks, @ashmaroli !) [JRuby] Update the algorithm used to calculate Node#line to be wrong less-often. The underlying parser, Xerces, does not track line numbers, and so we've always used a hacky solution for this method. [ #1223 , #2177 ] Introduce --enable-system-libraries and --disable-system-libraries flags to extconf.rb . These flags provide the same functionality as --use-system-libraries and the NOKOGIRI_USE_SYSTEM_LIBRARIES environment variable, but are more idiomatic. [ #2193 ] (Thanks, @eregon !) [TruffleRuby] --disable-static is now the default on TruffleRuby when the packaged libraries are used. This is more flexible and compiles faster. (Note, though, that the default on TR is still to use system libraries.) [ #2191 , #2193 ] (Thanks, @eregon !) Changed \u00b6 Nokogiri::XML::Path is now a Module (previously it has been a Class). It has been acting solely as a Module since v1.0.0. See 8461c74 . 1.11.1 / 2021-01-06 \u00b6 Fixed \u00b6 [CRuby] If libxml-ruby is loaded before nokogiri , the SAX and Push parsers no longer call libxml-ruby 's handlers. Instead, they defensively override the libxml2 global handler before parsing. [ #2168 ] 1.11.0 / 2021-01-03 \u00b6 Notes \u00b6 Faster, more reliable installation: Native Gems for Linux and OSX/Darwin \"Native gems\" contain pre-compiled libraries for a specific machine architecture. On supported platforms, this removes the need for compiling the C extension and the packaged libraries. This results in much faster installation and more reliable installation , which as you probably know are the biggest headaches for Nokogiri users. We've been shipping native Windows gems since 2009, but starting in v1.11.0 we are also shipping native gems for these platforms: Linux: x86-linux and x86_64-linux -- including musl platforms like alpine OSX/Darwin: x86_64-darwin and arm64-darwin We'd appreciate your thoughts and feedback on this work at #2075 . Dependencies \u00b6 Ruby This release introduces support for Ruby 2.7 and 3.0 in the precompiled native gems. This release ends support for: Ruby 2.3, for which official support ended on 2019-03-31 [ #1886 ] (Thanks @ashmaroli !) Ruby 2.4, for which official support ended on 2020-04-05 JRuby 9.1, which is the Ruby 2.3-compatible release. Gems Explicitly add racc as a runtime dependency. [ #1988 ] (Thanks, @voxik !) [MRI] Upgrade mini_portile2 dependency from ~> 2.4.0 to ~> 2.5.0 [ #2005 ] (Thanks, @alejandroperea !) Security \u00b6 See note below about CVE-2020-26247 in the \"Changed\" subsection entitled \"XML::Schema parsing treats input as untrusted by default\". Added \u00b6 Add Node methods for manipulating \"keyword attributes\" (for example, class and rel ): #kwattr_values , #kwattr_add , #kwattr_append , and #kwattr_remove . [ #2000 ] Add support for CSS queries a:has(> b) , a:has(~ b) , and a:has(+ b) . [ #688 ] (Thanks, @jonathanhefner !) Add Node#value? to better match expected semantics of a Hash-like object. [ #1838 , #1840 ] (Thanks, @MatzFan !) [CRuby] Add Nokogiri::XML::Node#line= for use by downstream libs like nokogumbo. [ #1918 ] (Thanks, @stevecheckoway !) nokogiri.gemspec is back after a 10-year hiatus. We still prefer you use the official releases, but main is pretty stable these days, and YOLO. Performance \u00b6 [CRuby] The CSS ~= operator and class selector . are about 2x faster. [ #2137 , #2135 ] [CRuby] Patch libxml2 to call strlen from xmlStrlen rather than the naive implementation, because strlen is generally optimized for the architecture. [ #2144 ] (Thanks, @ilyazub !) Improve performance of some namespace operations. [ #1916 ] (Thanks, @ashmaroli !) Remove unnecessary array allocations from Node serialization methods [ #1911 ] (Thanks, @ashmaroli !) Avoid creation of unnecessary zero-length String objects. [ #1970 ] (Thanks, @ashmaroli !) Always compile libxml2 and libxslt with '-O2' [ #2022 , #2100 ] (Thanks, @ilyazub !) [JRuby] Lots of code cleanup and performance improvements. [ #1934 ] (Thanks, @kares !) [CRuby] RelaxNG.from_document no longer leaks memory. [ #2114 ] Improved \u00b6 [CRuby] Handle incorrectly-closed HTML comments as WHATWG recommends for browsers. [ #2058 ] (Thanks to HackerOne user mayflower for reporting this!) {HTML,XML}::Document#parse now accept Pathname objects. Previously this worked only if the referenced file was less than 4096 bytes long; longer files resulted in undefined behavior because the read method would be repeatedly invoked. [ #1821 , #2110 ] (Thanks, @doriantaylor and @phokz !) [CRuby] Nokogumbo builds faster because it can now use header files provided by Nokogiri. [ #1788 ] (Thanks, @stevecheckoway !) Add frozen_string_literal: true magic comment to all lib files. [ #1745 ] (Thanks, @oniofchaos !) [JRuby] Clean up deprecated calls into JRuby. [ #2027 ] (Thanks, @headius !) Fixed \u00b6 HTML Parsing in \"strict\" mode (i.e., the RECOVER parse option not set) now correctly raises a XML::SyntaxError exception. Previously the value of the RECOVER bit was being ignored by CRuby and was misinterpreted by JRuby. [ #2130 ] The CSS ~= operator now correctly handles non-space whitespace in the class attribute. commit e45dedd The switch to turn off the CSS-to-XPath cache is now thread-local, rather than being shared mutable state. [ #1935 ] The Node methods add_previous_sibling , previous= , before , add_next_sibling , next= , after , replace , and swap now correctly use their parent as the context node for parsing markup. These methods now also raise a RuntimeError if they are called on a node with no parent. [ nokogumbo#160 ] [JRuby] XML::Schema XSD validation errors are captured in XML::Schema#errors . These errors were previously ignored. [JRuby] Standardize reading from IO like objects, including StringIO. [ #1888 , #1897 ] [JRuby] Fix how custom XPath function namespaces are inferred to be less naive. [ #1890 , #2148 ] [JRuby] Clarify exception message when custom XPath functions can't be resolved. [JRuby] Comparison of Node to Document with Node#<=> now matches CRuby/libxml2 behavior. [CRuby] Syntax errors are now correctly captured in Document#errors for short HTML documents. Previously the SAX parser used for encoding detection was clobbering libxml2's global error handler. [CRuby] Fixed installation on AIX with respect to vasprintf . [ #1908 ] [CRuby] On some platforms, avoid symbol name collision with glibc's canonicalize . [ #2105 ] [Windows Visual C++] Fixed compiler warnings and errors. [ #2061 , #2068 ] [CRuby] Fixed Nokogumbo integration which broke in the v1.11.0 release candidates. [ #1788 ] (Thanks, @stevecheckoway !) [JRuby] Fixed document encoding regression in v1.11.0 release candidates. [ #2080 , #2083 ] (Thanks, @thbar !) Removed \u00b6 The internal method Nokogiri::CSS::Parser.cache_on= has been removed. Use .set_cache if you need to muck with the cache internals. The class method Nokogiri::CSS::Parser.parse has been removed. This was originally deprecated in 2009 in 13db61b. Use Nokogiri::CSS.parse instead. Changed \u00b6 XML::Schema input is now \"untrusted\" by default Address CVE-2020-26247 . In Nokogiri versions <= 1.11.0.rc3, XML Schemas parsed by Nokogiri::XML::Schema were trusted by default, allowing external resources to be accessed over the network, potentially enabling XXE or SSRF attacks. This behavior is counter to the security policy intended by Nokogiri maintainers, which is to treat all input as untrusted by default whenever possible. Please note that this security fix was pushed into a new minor version, 1.11.x, rather than a patch release to the 1.10.x branch, because it is a breaking change for some schemas and the risk was assessed to be \"Low Severity\". More information and instructions for enabling \"trusted input\" behavior in v1.11.0.rc4 and later is available at the public advisory . HTML parser now obeys the strict or norecover parsing option (Also noted above in the \"Fixed\" section) HTML Parsing in \"strict\" mode (i.e., the RECOVER parse option not set) now correctly raises a XML::SyntaxError exception. Previously the value of the RECOVER bit was being ignored by CRuby and was misinterpreted by JRuby. If you're using the default parser options, you will be unaffected by this fix. If you're passing strict or norecover to your HTML parser call, you may be surprised to see that the parser now fails to recover and raises a XML::SyntaxError exception. Given the number of HTML documents on the internet that libxml2 would consider to be ill-formed, this is probably not what you want, and you can omit setting that parse option to restore the behavior that you have been relying upon. Apologies to anyone inconvenienced by this breaking bugfix being present in a minor release, but I felt it was appropriate to introduce this fix because it's straightforward to fix any code that has been relying on this buggy behavior. VersionInfo , the output of nokogiri -v , and related constants This release changes the metadata provided in Nokogiri::VersionInfo which also affects the output of nokogiri -v . Some related constants have also been changed. If you're using VersionInfo programmatically, or relying on constants related to underlying library versions, please read the detailed changes for Nokogiri::VersionInfo at #2139 and accept our apologies for the inconvenience. 1.10.10 / 2020-07-06 \u00b6 Features \u00b6 [MRI] Cross-built Windows gems now support Ruby 2.7 [ #2029 ]. Note that prior to this release, the v1.11.x prereleases provided this support. 1.10.9 / 2020-03-01 \u00b6 Fixed \u00b6 [MRI] Raise an exception when Nokogiri detects a specific libxml2 edge case involving blank Schema nodes wrapped by Ruby objects that would cause a segfault. Currently no fix is available upstream, so we're preventing a dangerous operation and informing users to code around it if possible. [ #1985 , #2001 ] [JRuby] Change NodeSet#to_a to return a RubyArray instead of Object, for compilation under JRuby 9.2.9 and later. [ #1968 , #1969 ] (Thanks, @headius !) 1.10.8 / 2020-02-10 \u00b6 Security \u00b6 [MRI] Pulled in upstream patch from libxml that addresses CVE-2020-7595. Full details are available in #1992 . Note that this patch is not yet (as of 2020-02-10) in an upstream release of libxml. 1.10.7 / 2019-12-03 \u00b6 Fixed \u00b6 [MRI] Ensure the patch applied in v1.10.6 works with GNU patch . [ #1954 ] 1.10.6 / 2019-12-03 \u00b6 Fixed \u00b6 [MRI] Fix FreeBSD installation of vendored libxml2. [ #1941 , #1953 ] (Thanks, @nurse !) 1.10.5 / 2019-10-31 \u00b6 Security \u00b6 [MRI] Vendored libxslt upgraded to v1.1.34 which addresses three CVEs for libxslt: CVE-2019-13117 CVE-2019-13118 CVE-2019-18197 CVE-2019-19956 More details are available at #1943 . Dependencies \u00b6 [MRI] vendored libxml2 is updated from 2.9.9 to 2.9.10 [MRI] vendored libxslt is updated from 1.1.33 to 1.1.34 1.10.4 / 2019-08-11 \u00b6 Security \u00b6 Address CVE-2019-5477 ( #1915 ). A command injection vulnerability in Nokogiri v1.10.3 and earlier allows commands to be executed in a subprocess by Ruby's Kernel.open method. Processes are vulnerable only if the undocumented method Nokogiri::CSS::Tokenizer#load_file is being passed untrusted user input. This vulnerability appears in code generated by the Rexical gem versions v1.0.6 and earlier. Rexical is used by Nokogiri to generate lexical scanner code for parsing CSS queries. The underlying vulnerability was addressed in Rexical v1.0.7 and Nokogiri upgraded to this version of Rexical in Nokogiri v1.10.4. This CVE's public notice is #1915 1.10.3 / 2019-04-22 \u00b6 Security \u00b6 [MRI] Pulled in upstream patch from libxslt that addresses CVE-2019-11068. Full details are available in #1892 . Note that this patch is not yet (as of 2019-04-22) in an upstream release of libxslt. 1.10.2 / 2019-03-24 \u00b6 Security \u00b6 [MRI] Remove support from vendored libxml2 for future script macros. [ #1871 ] [MRI] Remove support from vendored libxml2 for server-side includes within attributes. [ #1877 ] Fixed \u00b6 [JRuby] Fix node ownership in duplicated documents. [ #1060 ] [JRuby] Rethrow exceptions caught by Java SAX handler. [ #1847 , #1872 ] (Thanks, @adjam !) 1.10.1 / 2019-01-13 \u00b6 Added \u00b6 [MRI] During installation, handle Xcode 10's new library path. [ #1801 , #1851 ] (Thanks, @mlj and @deepj !) Avoid unnecessary creation of Proc s in many methods. [ #1776 ] (Thanks, @chopraanmol1 !) Fixed \u00b6 CSS selector :has() now correctly matches against any descendant. Previously this selector matched against only direct children). [ #350 ] (Thanks, @Phrogz !) NodeSet#attr now returns nil if it's empty. Previously this raised a NoMethodError. [MRI] XPath errors are no longer suppressed during XSLT::Stylesheet#transform . Previously these errors were suppressed which led to silent failures and a subsequent segfault. [ #1802 ] 1.10.0 / 2019-01-04 \u00b6 Added \u00b6 [MRI] Cross-built Windows gems now support Ruby 2.6 [ #1842 , #1850 ] Dependencies \u00b6 This release ends support for Ruby 2.2, for which official support ended on 2018-03-31 [ #1841 ] This release ends support for JRuby 1.7, for which official support ended on 2017-11-21 [ #1741 ] [MRI] libxml2 is updated from 2.9.8 to 2.9.9 [MRI] libxslt is updated from 1.1.32 to 1.1.33 1.9.1 / 2018-12-17 \u00b6 Fixed \u00b6 Fix a bug introduced in v1.9.0 where XML::DocumentFragment#dup no longer returned an instance of the callee's class, instead always returning an XML::DocumentFragment . This notably broke any subclass of XML::DocumentFragment including HTML::DocumentFragment as well as the Loofah gem's Loofah::HTML::DocumentFragment . [ #1846 ] 1.9.0 / 2018-12-17 \u00b6 Security \u00b6 [JRuby] Upgrade Xerces dependency from 2.11.0 to 2.12.0 to address upstream vulnerability CVE-2012-0881 [ #1831 ] (Thanks @grajagandev for reporting.) Improved \u00b6 Decrease installation size by removing many unneeded files (e.g., /test ) from the packaged gems. [ #1719 ] (Thanks, @stevecrozz !) Added \u00b6 XML::Attr#value= allows HTML node attribute values to be set to either a blank string or an empty boolean attribute. [ #1800 ] Introduce XML::Node#wrap which does what XML::NodeSet#wrap has always done, but for a single node. [ #1531 ] (Thanks, @ethirajsrinivasan !) [MRI] Improve installation experience on macOS High Sierra (Darwin). [ #1812 , #1813 ] (Thanks, @gpakosz and @nurse !) [MRI] Node#dup supports copying a node directly to a new document. See the method documentation for details. [MRI] DocumentFragment#dup is now more memory-efficient, avoiding making unnecessary copies. [ #1063 ] [JRuby] NodeSet has been rewritten to improve performance! [ #1795 ] Fixed \u00b6 NodeSet#each now returns self instead of zero. [ #1822 ] (Thanks, @olehif !) [MRI] Address a memory leak when using XML::Builder to create nodes with namespaces. [ #1810 ] [MRI] Address a memory leak when unparenting a DTD. [ #1784 ] (Thanks, @stevecheckoway !) [MRI] Use RbConfig::CONFIG instead of ::MAKEFILE_CONFIG to fix installations that use Makefile macros. [ #1820 ] (Thanks, @nobu !) [JRuby] Decrease large memory usage when making nested XPath queries. [ #1749 ] [JRuby] Fix failing tests on JRuby 9.2.x [JRuby] Fix default namespaces in nodes reparented into a different document [ #1774 ] [JRuby] Fix support for Java 9. [ #1759 ] (Thanks, @Taywee !) Dependencies \u00b6 [MRI] Upgrade mini_portile2 dependency from ~> 2.3.0 to ~> 2.4.0 1.8.5 / 2018-10-04 \u00b6 Security \u00b6 [MRI] Pulled in upstream patches from libxml2 that address CVE-2018-14404 and CVE-2018-14567. Full details are available in #1785 . Note that these patches are not yet (as of 2018-10-04) in an upstream release of libxml2. Fixed \u00b6 [MRI] Fix regression in installation when building against system libraries, where some systems would not be able to find libxml2 or libxslt when present. (Regression introduced in v1.8.3.) [ #1722 ] [JRuby] Fix node reparenting when the destination doc is empty. [ #1773 ] 1.8.4 / 2018-07-03 \u00b6 Fixed \u00b6 [MRI] Fix memory leak when creating nodes with namespaces. (Introduced in v1.5.7) [ #1771 ] 1.8.3 / 2018-06-16 \u00b6 Security \u00b6 [MRI] Behavior in libxml2 has been reverted which caused CVE-2018-8048 (loofah gem), CVE-2018-3740 (sanitize gem), and CVE-2018-3741 (rails-html-sanitizer gem). The commit in question is here: https://github.com/GNOME/libxml2/commit/960f0e2 and more information is available about this commit and its impact here: https://github.com/flavorjones/loofah/issues/144 This release simply reverts the libxml2 commit in question to protect users of Nokogiri's vendored libraries from similar vulnerabilities. If you're offended by what happened here, I'd kindly ask that you comment on the upstream bug report here: https://bugzilla.gnome.org/show_bug.cgi?id=769760 More Security \u00b6 [MRI] Vendored libxml2 upgraded to v2.9.8 which addresses CVE-2016-9318 [ #1582 ]. Dependencies \u00b6 [MRI] libxml2 is updated from 2.9.7 to 2.9.8 Added \u00b6 Node#classes , #add_class , #append_class , and #remove_class are added. NodeSet#append_class is added. NodeSet#remove_attribute is a new alias for NodeSet#remove_attr . NodeSet#each now returns an Enumerator when no block is passed (Thanks, @park53kr !) [JRuby] General improvements in JRuby implementation (Thanks, @kares !) Fixed \u00b6 CSS attribute selectors now gracefully handle queries using integers. [ #711 ] Handle ASCII-8BIT encoding on fragment input [ #553 ] Handle non-string return values within Reader [ #898 ] [JRuby] Allow Node#replace to insert Comment and CDATA nodes. [ #1666 ] [JRuby] Stability and speed improvements to Node , Sax::PushParser , and the JRuby implementation [ #1708 , #1710 , #1501 ] 1.8.2 / 2018-01-29 \u00b6 Security \u00b6 [MRI] The update of vendored libxml2 from 2.9.5 to 2.9.7 addresses at least one published vulnerability, CVE-2017-15412. [ #1714 has complete details] Dependencies \u00b6 [MRI] libxml2 is updated from 2.9.5 to 2.9.7 [MRI] libxslt is updated from 1.1.30 to 1.1.32 Added \u00b6 [MRI] OpenBSD installation should be a bit easier now. [ #1685 ] (Thanks, @jeremyevans !) [MRI] Cross-built Windows gems now support Ruby 2.5 Fixed \u00b6 Node#serialize once again returns UTF-8-encoded strings. [ #1659 ] [JRuby] made SAX parsing of characters consistent with C implementation [ #1676 ] (Thanks, [@andrew](https://github.com/andrew)-aladev !) [MRI] Predefined entities, when inspected, no longer cause a segfault. [ #1238 ] 1.8.1 / 2017-09-19 \u00b6 Dependencies \u00b6 [MRI] libxml2 is updated from 2.9.4 to 2.9.5. [MRI] libxslt is updated from 1.1.29 to 1.1.30. [MRI] optional dependency on the pkg-config gem has had its constraint loosened to ~> 1.1 (from ~> 1.1.7 ). [ #1660 ] [MRI] Upgrade mini_portile2 dependency from ~> 2.2.0 to ~> 2.3.0 , which will validate checksums on the vendored libxml2 and libxslt tarballs before using them. Fixed \u00b6 NodeSet#first with an integer argument longer than the length of the NodeSet now correctly clamps the length of the returned NodeSet to the original length. [ #1650 ] (Thanks, @Derenge !) [MRI] Ensure CData.new raises TypeError if the content argument is not implicitly convertible into a string. [ #1669 ] 1.8.0 / 2017-06-04 \u00b6 Dependencies \u00b6 This release ends support for Ruby 2.1 on Windows in the x86-mingw32 and x64-mingw32 platform gems (containing pre-compiled DLLs). Official support ended for Ruby 2.1 on 2017-04-01. Please note that this deprecation note only applies to the precompiled Windows gems. Ruby 2.1 continues to be supported (for now) in the default gem when compiled on installation. Dependencies \u00b6 [Windows] Upgrade iconv from 1.14 to 1.15 (unless --use-system-libraries) [Windows] Upgrade zlib from 1.2.8 to 1.2.11 (unless --use-system-libraries) [MRI] Upgrade rake-compiler dependency from 0.9.2 to 1.0.3 [MRI] Upgrade mini-portile2 dependency from ~> 2.1.0 to ~> 2.2.0 [JRuby] Removed support for jruby --1.8 code paths. [ #1607 ] (Thanks, @kares !) [MRI Windows] Retrieve zlib source from http://zlib.net/fossils to avoid deprecation issues going forward. See #1632 for details around this problem. Added \u00b6 NodeSet#clone is now an alias for NodeSet#dup [ #1503 ] (Thanks, @stephankaag !) Allow Processing Instructions and Comments as children of a document root. [ #1033 ] (Thanks, @windwiny !) [MRI] PushParser#replace_entities and #replace_entities= will control whether entities are replaced or not. [ #1017 ] (Thanks, @spraints !) [MRI] SyntaxError#to_s now includes line number, column number, and log level if made available by the parser. [ #1304 , #1637 ] (Thanks, @spk and @ccarruitero !) [MRI] Cross-built Windows gems now support Ruby 2.4 [MRI] Support for frozen string literals. [ #1413 ] [MRI] Support for installing Nokogiri on a machine in FIPS-enabled mode [ #1544 ] [MRI] Vendored libraries are verified with SHA-256 hashes (formerly some MD5 hashes were used) [ #1544 ] [JRuby] (performance) remove unnecessary synchronization of class-cache [ #1563 ] (Thanks, @kares !) [JRuby] (performance) remove unnecessary cloning of objects in XPath searches [ #1563 ] (Thanks, @kares !) [JRuby] (performance) more performance improvements, particularly in XPath, Reader, XmlNode, and XmlNodeSet [ #1597 ] (Thanks, @kares !) Fixed \u00b6 HTML::SAX::Parser#parse_io now correctly parses HTML and not XML [ #1577 ] (Thanks for the test case, @gregors !) Support installation on systems with a lib64 site config. [ #1562 ] [MRI] on OpenBSD, do not require gcc if using system libraries [ #1515 ] (Thanks, @jeremyevans !) [MRI] XML::Attr.new checks type of Document arg to prevent segfaults. [ #1477 ] [MRI] Prefer xmlCharStrdup (and friends) to strdup (and friends), which can cause problems on some platforms. [ #1517 ] (Thanks, @jeremy !) [JRuby] correctly append a text node before another text node [ #1318 ] (Thanks, @jkraemer !) [JRuby] custom xpath functions returning an integer now work correctly [ #1595 ] (Thanks, @kares !) [JRuby] serializing ( #to_html , #to_s , et al) a document with explicit encoding now works correctly. [ #1281 , #1440 ] (Thanks, @kares !) [JRuby] XML::Reader now returns parse errors [ #1586 ] (Thanks, @kares !) [JRuby] Empty NodeSet s are now decorated properly. [ #1319 ] (Thanks, @kares !) [JRuby] Merged nodes no longer results in Java exceptions during XPath queries. [ #1320 ] (Thanks, @kares !) 1.7.2 / 2017-05-09 \u00b6 Security \u00b6 [MRI] Upstream libxslt patches are applied to the vendored libxslt 1.1.29 which address CVE-2017-5029 and CVE-2016-4738. For more information: #1634 http://people.canonical.com/~ubuntu-security/cve/2017/CVE-2017-5029.html http://people.canonical.com/~ubuntu-security/cve/2016/CVE-2016-4738.html 1.7.1 / 2017-03-19 \u00b6 Security \u00b6 [MRI] Upstream libxml2 patches are applied to the vendored libxml 2.9.4 which address CVE-2016-4658 and CVE-2016-5131. For more information: #1615 http://people.canonical.com/~ubuntu-security/cve/2016/CVE-2016-4658.html http://people.canonical.com/~ubuntu-security/cve/2016/CVE-2016-5131.html 1.7.0.1 / 2017-01-04 \u00b6 Fixed \u00b6 Fix OpenBSD support. ( #1569 ) (related to #1543 ) 1.7.0 / 2016-12-26 \u00b6 Added \u00b6 Remove deprecation warnings in Ruby 2.4.0 ( #1545 ) (Thanks, @matthewd !) Support egcc compiler on OpenBSD ( #1543 ) (Thanks, @frenkel and @knu !) Dependencies \u00b6 This release ends support for: Ruby 1.9.2, for which official support ended on 2014-07-31 Ruby 1.9.3, for which official support ended on 2015-02-23 Ruby 2.0.0, for which official support ended on 2016-02-24 MacRuby, which hasn't been actively supported since 2015-01-13 (see https://github.com/MacRuby/MacRuby/commit/f76b9d6e99c18236db617e8aceb12c27d593a483 ) 1.6.8.1 / 2016-10-03 \u00b6 Dependencies \u00b6 Removes required dependency on the pkg-config gem. This dependency was introduced in v1.6.8 and, because it's distributed under LGPL, was objectionable to many Nokogiri users ( #1488 , #1496 ). This version makes pkg-config an optional dependency. If it's installed, it's used; but otherwise Nokogiri will attempt to work around its absence. 1.6.8 / 2016-06-06 \u00b6 Security \u00b6 [MRI] Bundled libxml2 is upgraded to 2.9.4, which fixes many security issues. Many of these had previously been patched in the vendored libxml 2.9.2 in the 1.6.7.x branch, but some are newer. See these libxml2 email posts for more: https://mail.gnome.org/archives/xml/2015-November/msg00012.html https://mail.gnome.org/archives/xml/2016-May/msg00023.html For a more detailed analysis, you may care to read Canonical's take on these security issues: http://www.ubuntu.com/usn/usn-2994-1 [MRI] Bundled libxslt is upgraded to 1.1.29, which fixes a security issue as well as many long-known outstanding bugs, some features, some portability improvements, and general cleanup. See this libxslt email post for more: https://mail.gnome.org/archives/xslt/2016-May/msg00004.html Added \u00b6 Several changes were made to improve performance: [MRI] Simplify NodeSet#to_a with a minor speed-up. ( #1397 ) XML::Node#ancestors optimization. ( #1297 ) (Thanks, Bruno Sutic!) Use Symbol#to_proc where we weren't previously. ( #1296 ) (Thanks, Bruno Sutic!) XML::DTD#each uses implicit block calls. (Thanks, @glaucocustodio !) Fall back to the pkg-config gem if we're having trouble finding the system libxml2. This should help many FreeBSD users. ( #1417 ) Set document encoding appropriately even on blank document. ( #1043 ) (Thanks, @batter !) Fixed \u00b6 [JRuby] fix slow add_child ( #692 ) [JRuby] fix load errors when deploying to JRuby/Torquebox ( #1114 ) (Thanks, @atambo and @jvshahid !) [JRuby] fix NPE when inspecting nodes returned by NodeSet#drop ( #1042 ) (Thanks, @mkristian !) [JRuby] fix nil attriubte node's namespace in reader ( #1327 ) (Thanks, @codekitchen !) [JRuby] fix Nokogiri munging unicode characters that require more than 2 bytes ( #1113 ) (Thanks, @mkristian !) [JRuby] allow unlinking an unparented node ( #1112 , #1152 ) (Thanks, @esse !) [JRuby] allow Fragment parsing on a frozen string ( #444 , #1077 ) [JRuby] HTML style tags are no longer encoded ( #1316 ) (Thanks, @tbeauvais !) [MRI] fix assertion failure while accessing attribute node's namespace in reader ( #843 ) (Thanks, @2potatocakes !) [MRI] fix issue with GCing namespace nodes returned in an xpath query. ( #1155 ) [MRI] Ensure C strings are null-terminated. ( #1381 ) [MRI] Ensure Rubygems is loaded before using mini_portile2 at installation. ( #1393 , #1411 ) (Thanks, @JonRowe !) [MRI] Handling another edge case where the libxml-ruby gem's global callbacks were smashing the heap. ( #1426 ). (Thanks to @bbergstrom for providing an isolated test case!) [MRI] Ensure encodings are passed to Sax::Parser xmldecl callback. ( #844 ) [MRI] Ensure default ns prefix is applied correctly when reparenting nodes to another document. ( #391 ) (Thanks, @ylecuyer !) [MRI] Ensure Reader handles non-existent attributes as expected. ( #1254 ) (Thanks, @ccutrer !) [MRI] Cleanup around namespace handling when reparenting nodes. ( #1332 , #1333 , #1444 ) (Thanks, @cuttrer and @bradleybeddoes !) unescape special characters in CSS queries ( #1303 ) (Thanks, @twalpole !) consistently handle empty documents ( #1349 ) Update to mini_portile2 2.1.0 to address whitespace-handling during patching. ( #1402 ) Fix encoding of xml node namespaces. Work around issue installing Nokogiri on overlayfs (commonly used in Docker containers). ( #1370 , #1405 ) Notes \u00b6 Removed legacy code remaining from Ruby 1.8.x support. Removed legacy code remaining from REE support. Removing hacky workarounds for bugs in some older versions of libxml2. Handling C strings in a forward-compatible manner, see https://github.com/ruby/ruby/blob/v2_2_0/NEWS#L319 1.6.7.2 / 2016-01-20 \u00b6 This version pulls in several upstream patches to the vendored libxml2 and libxslt to address: CVE-2015-7499 Ubuntu classifies this as \"Priority: Low\", RedHat classifies this as \"Impact: Moderate\", and NIST classifies this as \"Severity: 5.0 (MEDIUM)\". MITRE record is https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-7499 1.6.7.1 / 2015-12-16 \u00b6 This version pulls in several upstream patches to the vendored libxml2 and libxslt to address: CVE-2015-5312 CVE-2015-7497 CVE-2015-7498 CVE-2015-7499 CVE-2015-7500 CVE-2015-8241 CVE-2015-8242 CVE-2015-8317 See also http://www.ubuntu.com/usn/usn-2834-1/ 1.6.7 / 2015-11-29 \u00b6 Added \u00b6 This version supports native builds on Windows using the RubyInstaller DevKit. It also supports Ruby 2.2.x on Windows, as well as making several other improvements to the installation process on various platforms. Security \u00b6 This version also includes the security patches already applied in v1.6.6.3 and v1.6.6.4 to the vendored libxml2 and libxslt source. See #1374 and #1376 for details. Added \u00b6 Cross-built gems now have a proper ruby version requirement. ( #1266 ) Ruby 2.2.x is supported on Windows. Native build is supported on Windows. [MRI] libxml2 and libxslt config.guess files brought up to date. ( #1326 ) (Thanks, [@hernan](https://github.com/hernan)-erasmo !) [JRuby] fix error in validating files with jruby ( #1355 , #1361 ) (Thanks, @twalpole !) [MRI, OSX] Patch to handle nonstandard location of iconv.h . ( #1206 , #1210 , #1218 , #1345 ) (Thanks, @neonichu !) Fixed \u00b6 [JRuby] reset the namespace cache when replacing the document's innerHtml ( #1265 ) (Thanks, @mkristian !) [JRuby] Document#parse should support IO objects that respond to #read . ( #1124 ) (Thanks, Jake Byman!) [MRI] Duplicate-id errors when setting the id attribute on HTML documents are now silenced. ( #1262 ) [JRuby] SAX parser cuts texts in pieces when square brackets exist. ( #1261 ) [JRuby] Namespaced attributes aren't removed by remove_attribute. ( #1299 ) 1.6.6.4 / 2015-11-19 \u00b6 This version pulls in an upstream patch to the vendored libxml2 to address: unclosed comment uninitialized access issue ( #1376 ) This issue was assigned CVE-2015-8710 after the fact. See http://seclists.org/oss-sec/2015/q4/616 for details. 1.6.6.3 / 2015-11-16 \u00b6 This version pulls in several upstream patches to the vendored libxml2 and libxslt to address: CVE-2015-1819 CVE-2015-7941_1 CVE-2015-7941_2 CVE-2015-7942 CVE-2015-7942-2 CVE-2015-8035 CVE-2015-7995 See #1374 for details. 1.6.6.2 / 2015-01-23 \u00b6 Fixed \u00b6 Fixed installation issue affecting compiler arguments. ( #1230 ) 1.6.6.1 / 2015-01-22 \u00b6 Note that 1.6.6.0 was not released. Added \u00b6 Unified Node and NodeSet implementations of #search , #xpath and #css . Added Node#lang and Node#lang= . bin/nokogiri passes the URI to parse() if an HTTP URL is given. bin/nokogiri now loads ~/.nokogirirc so user can define helper methods, etc. bin/nokogiri can be configured to use Pry instead of IRB by adding a couple of lines to ~/.nokogirirc. ( #1198 ) bin/nokogiri can better handle urls from STDIN (aiding use of xargs). ( #1065 ) JRuby 9K support. Fixed \u00b6 DocumentFragment#search now matches against root nodes. ( #1205 ) (MRI) More fixes related to handling libxml2 parse errors during DocumentFragment#dup . ( #1196 ) (JRuby) Builder now handles namespace hrefs properly when there is a default ns. ( #1039 ) (JRuby) Clear the XPath cache on attr removal. ( #1109 ) XML::Comment.new argument types are now consistent and safe (and documented) across MRI and JRuby. ( #1224 ) (MRI) Restoring support for Ruby 1.9.2 that was broken in v1.6.4.1 and v1.6.5. ( #1207 ) Check if zlib is available before building libxml2 . ( #1188 ) (JRuby) HtmlSaxPushParser now exists. ( #1147 ) (Thanks, Piotr Szmielew!) 1.6.5 / 2014-11-26 \u00b6 Added \u00b6 Implement Slop#respond_to_missing? . ( #1176 ) Optimized the XPath query generated by an an+b CSS query. Fixed \u00b6 Capture non-parse errors from Document#dup in Document#errors . ( #1196 ) (JRuby) Document#canonicalize parameters are now consistent with MRI. ( #1189 ) 1.6.4.1 / 2014-11-05 \u00b6 Fixed \u00b6 (MRI) Fix a bug where CFLAGS passed in are dropped. ( #1188 ) Fix a bug where CSS selector :nth(n) did not work. ( #1187 ) 1.6.4 / 2014-11-04 \u00b6 Added \u00b6 (MRI) Bundled Libxml2 is upgraded to 2.9.2. (MRI) nokogiri --version will include a list of applied patches. (MRI) Nokogiri no longer prints messages directly to TTY while building the extension. (MRI) Detect and help user fix a missing /usr/include/iconv.h on OS X. ( #1111 ) (MRI) Improve the iconv detection for building libxml2. Fixed \u00b6 (MRI) Fix DocumentFragment#element_children ( #1138 ). Fix a bug with CSS attribute selector without any prefix where \"foo [bar]\" was treated as \"foo[bar]\". ( #1174 ) 1.6.3.1 / 2014-07-21 \u00b6 Fixed \u00b6 Addressing an Apple Macintosh installation problem for GCC users. #1130 (Thanks, @zenspider !) 1.6.3 / 2014-07-20 \u00b6 Added \u00b6 Added Node#document? and Node#processing_instruction? Fixed \u00b6 [JRuby] Fix Ruby memory exhaustion vulnerability. #1087 (Thanks, @ocher ) [MRI] Fix segfault during GC when using libxml-ruby and nokogiri together in multi-threaded environment. #895 (Thanks, @ender672 !) Building on OSX 10.9 stock ruby 2.0.0 now works. #1101 (Thanks, @zenspider !) Node#parse now works again for HTML document nodes (broken in 1.6.2+). Processing instructions can now be added via Node#add_next_sibling . 1.6.2.1 / 2014-05-13 \u00b6 Fixed \u00b6 Fix statically-linked libxml2 installation when using universal builds of Ruby. #1104 Patching mini_portile to address the git dependency detailed in #1102 . Library load fix to address segfault reported on some systems. #1097 1.6.2 / 2014-05-12 \u00b6 Security \u00b6 A set of security and bugfix patches have been backported from the libxml2 and libxslt repositories onto the version of 2.8.0 packaged with Nokogiri, including these notable security fixes: https://git.gnome.org/browse/libxml2/commit/?id=4629ee02ac649c27f9c0cf98ba017c6b5526070f CVE-2013-2877 https://git.gnome.org/browse/libxml2/commit/?id=e50ba8164eee06461c73cd8abb9b46aa0be81869 CVE-2014-0191 https://git.gnome.org/browse/libxml2/commit/?id=9cd1c3cfbd32655d60572c0a413e017260c854df It is recommended that you upgrade from 1.6.x to this version as soon as possible. Dependencies \u00b6 Now requires libxml >= 2.6.21 (was previously >= 2.6.17). Added \u00b6 Add cross building of fat binary gems for 64-Bit Windows (x64-mingw32) and add support for native builds on Windows. #864 , #989 , #1072 (MRI) Alias CP932 to Windows-31J if iconv does not support Windows-31J. (MRI) Nokogiri now links packaged libraries statically. To disable static linking, pass --disable-static to extconf.rb . #923 (MRI) Fix a library path (LIBPATH) precedence problem caused by CRuby bug #9760 . (MRI) Nokogiri automatically deletes directories of packaged libraries only used during build. To keep them for debugging purposes, pass --disable-clean to extconf.rb . #952 (MRI) Nokogiri now builds libxml2 properly with iconv support on platforms where libiconv is installed outside the system default directories, such as FreeBSD. Add support for an-b in nth selectors. #886 (Thanks, Magnus Bergmark!) Add support for bare and multiple :not() functions in selectors. #887 (Thanks, Magnus Bergmark!) (MRI) Add an extconf.rb option --use-system-libraries, alternative to setting the environment variable NOKOGIRI_USE_SYSTEM_LIBRARIES. (MRI) Update packaged libraries: libxslt to 1.1.28, zlib to 1.2.8, and libiconv to 1.14, respectively. Nokogiri::HTML::Document#title= and #meta_encoding = now always add an element if not present, trying hard to find the best place to put it. Nokogiri::XML::DTD#html_dtd? and #html5_dtd? are added. Nokogiri::XML::Node#prepend_child is added. #664 Nokogiri::XML::SAX::ParserContext#recovery is added. #453 Fix documentation for XML::Node#namespace . #803 #802 (Thanks, Hoylen Sue) Allow Nokogiri::XML::Node#parse from unparented non-element nodes. #407 Fixed \u00b6 Ensure :only-child pseudo class works within :not pseudo class. #858 (Thanks, Yamagishi Kazutoshi!) Don't call pkg_config when using bundled libraries in extconf.rb #931 (Thanks, Shota Fukumori!) Nokogiri.parse() does not mistake a non-HTML document like a RSS document as HTML document. #932 (Thanks, Yamagishi Kazutoshi!) (MRI) Perform a node type check before adding a child node to another. Previously adding a text node to another as a child could cause a SEGV. #1092 (JRuby) XSD validation crashes in Java version. #373 (JRuby) Document already has a root node error while using Builder. #646 (JRuby) c14n tests are all passing on JRuby. #226 Parsing empty documents raise SyntaxError in strict mode. #1005 (JRuby) Make xpath faster by caching the xpath context. #741 (JRuby) XML SAX push parser leaks memory on JRuby, but not on MRI. #998 (JRuby) Inconsistent behavior aliasing the default namespace. #940 (JRuby) Inconsistent behavior between parsing and adding namespaces. #943 (JRuby) Xpath returns inconsistent result set on cloned document with namespaces and attributes. #1034 (JRuby) Java-Implementation forgets element namespaces #902 (JRuby) JRuby-Nokogiri does not recognise attributes inside namespaces #1081 (JRuby) JRuby-Nokogiri has different comment node name #1080 (JRuby) JAXPExtensionsProvider / Java 7 / Secure Processing #1070 1.6.1 / 2013-12-14 \u00b6 Fixed \u00b6 (JRuby) Fix out of memory bug when certain invalid documents are parsed. (JRuby) Fix regression of billion-laughs vulnerability. #586 1.6.0 / 2013-06-08 \u00b6 This release was based on v1.5.10 and 1.6.0.rc1, and contains changes mentioned in both. Deprecations \u00b6 Remove pre 1.9 monitoring from Travis. 1.6.0.rc1 / 2013-04-14 \u00b6 This release was based on v1.5.9, and so does not contain any fixes mentioned in the notes for v1.5.10. Notes \u00b6 mini_portile is now a runtime dependency Ruby 1.9.2 and higher now required Added \u00b6 (MRI) Source code for libxml 2.8.0 and libxslt 1.2.26 is packaged with the gem. These libraries are compiled at gem install time unless the environment variable NOKOGIRI_USE_SYSTEM_LIBRARIES is set. VERSION_INFO (also nokogiri -v ) exposes whether libxml was compiled from packaged source, or the system library was used. (Windows) libxml upgraded to 2.8.0 Dependencies \u00b6 Support for Ruby 1.8.7 and prior has been dropped 1.5.11 / 2013-12-14 \u00b6 Fixed \u00b6 (JRuby) Fix out of memory bug when certain invalid documents are parsed. (JRuby) Fix regression of billion-laughs vulnerability. #586 1.5.10 / 2013-06-07 \u00b6 Fixed \u00b6 (JRuby) Fix \"null document\" error when parsing an empty IO in jruby 1.7.3. #883 (JRuby) Fix schema validation when XSD has DOCTYPE set to DTD. #912 (Thanks, Patrick Cheng!) (MRI) Fix segfault when there is no default subelement for an HTML node. #917 Notes \u00b6 Use rb_ary_entry instead of RARRAY_PTR (you know, for Rubinius). #877 (Thanks, Dirkjan Bussink!) Fix TypeError when running tests. #900 (Thanks, C\u00e9dric Boutillier!) 1.5.9 / 2013-03-21 \u00b6 Fixed \u00b6 Ensure that prefixed attributes are properly namespaced when reparented. #869 Fix for inconsistent namespaced attribute access for SVG nested in HTML. #861 (MRI) Fixed a memory leak in fragment parsing if nodes are not all subsequently reparented. #856 1.5.8 / 2013-03-19 \u00b6 Fixed \u00b6 (JRuby) Fix EmptyStackException thrown by elements with xlink:href attributes and no base_uri #534 , #805 . (Thanks, Patrick Quinn and Brian Hoffman!) Fixes duplicate attributes issue introduced in 1.5.7. #865 Allow use of a prefixed namespace on a root node using Nokogiri::XML::Builder #868 1.5.7 / 2013-03-18 \u00b6 Added \u00b6 Windows support for Ruby 2.0. Fixed \u00b6 SAX::Parser.parse_io throw an error when used with lower case encoding. #828 (JRuby) Java Nokogiri is finally green (passes all tests) under 1.8 and 1.9 mode. High five everyone. #798 , #705 (JRuby) Nokogiri::XML::Reader broken (as a pull parser) on jruby - reads the whole XML document. #831 (JRuby) JRuby hangs parsing \"&\". #837 (JRuby) JRuby NPE parsing an invalid XML instruction. #838 (JRuby) Node#content= incompatibility. #839 (JRuby) to_xhtml doesn't print the last slash for self-closing tags in JRuby. #834 (JRuby) Adding an EntityReference after a Text node mangles the entity in JRuby. #835 (JRuby) JRuby version inconsistency: nil for empty attributes. #818 CSS queries for classes (e.g., \".foo\") now treat all whitespace identically. #854 Namespace behavior cleaned up and made consistent between JRuby and MRI. #846 , #801 (Thanks, Michael Klein!) (MRI) SAX parser handles empty processing instructions. #845 1.5.6 / 2012-12-19 \u00b6 Added \u00b6 Improved performance of XML::Document#collect_namespaces . #761 (Thanks, Juergen Mangler!) New callback SAX::Document#processing_instruction (Thanks, Kitaiti Makoto!) Node#native_content= allows setting unescaped node content. #768 XPath lookup with namespaces supports symbol keys. #729 (Thanks, Ben Langfeld.) XML::Node#[]= stringifies values. #729 (Thanks, Ben Langfeld.) bin/nokogiri will process a document from $stdin bin/nokogiri -e will execute a program from the command line (JRuby) bin/nokogiri --version will print the Xerces and NekoHTML versions. Fixed \u00b6 Nokogiri now detects XSLT transform errors. #731 (Thanks, Justin Fitzsimmons!) Don't throw an Error when trying to replace top-level text node in DocumentFragment. #775 Raise an ArgumentError if an invalid encoding is passed to the SAX parser. #756 (Thanks, Bradley Schaefer!) Prefixed element inconsistency between CRuby and JRuby. #712 (JRuby) space prior to xml preamble causes nokogiri to fail parsing. (fixed along with #748 ) #790 (JRuby) Fixed the bug Nokogiri::XML::Node#content inconsistency between Java and C. #794 , #797 (JRuby) raises INVALID_CHARACTER_ERR exception when EntityReference name starts with '#'. #719 (JRuby) doesn't coerce namespaces out of strings on a direct subclass of Node. #715 (JRuby) Node#content now renders newlines properly. #737 (Thanks, Piotr Szmielew!) (JRuby) Unknown namespace are ignore when the recover option is used. #748 (JRuby) XPath queries for namespaces should not throw exceptions when called twice in a row. #764 (JRuby) More consistent (with libxml2) whitespace formatting when emitting XML. #771 (JRuby) namespaced attributes broken when appending raw xml to builder. #770 (JRuby) Nokogiri::XML::Document#wrap raises undefined method `length' for nil:NilClass when trying to << to a node. #781 (JRuby) Fixed \"bad file descriptor\" bug when closing open file descriptors. #495 (JRuby) JRuby/CRuby incompatibility for attribute decorators. #785 (JRuby) Issues parsing valid XML with no internal subset in the DTD. #547 , #811 (JRuby) Issues parsing valid node content when it contains colons. #728 (JRuby) Correctly parse the doc type of html documents. #733 (JRuby) Include dtd in the xml output when a builder is used with create_internal_subset. #751 (JRuby) builder requires textwrappers for valid utf8 in jruby, not in mri. #784 1.5.5 / 2012-06-24 \u00b6 Added \u00b6 Much-improved support for JRuby in 1.9 mode! Yay! Fixed \u00b6 Regression in JRuby Nokogiri add_previous_sibling (1.5.0 -> 1.5.1) #691 (Thanks, John Shahid!) JRuby unable to create HTML doc if URL arg provided #674 (Thanks, John Shahid!) JRuby raises NullPointerException when given HTML document is nil or empty string. #699 JRuby 1.9 error, uncaught throw 'encoding_found', has been fixed. #673 Invalid encoding returned in JRuby with US-ASCII. #583 XmlSaxPushParser raises IndexOutOfBoundsException when over 512 characters are given. #567 , #615 When xpath evaluation returns empty NodeSet , decorating NodeSet 's base document raises exception. #514 JRuby raises exception when xpath with namespace is specified. pull request #681 (Thanks, Piotr Szmielew) JRuby renders nodes without their namespace when subclassing Node. #695 JRuby raises NAMESPACE_ERR (org.w3c.dom.DOMException) while instantiating RDF::RDFXML::Writer . #683 JRuby is not able to use namespaces in xpath. #493 JRuby's Entity resolving should be consistent with C-Nokogiri #704 , #647 , #703 1.5.4 / 2012-06-12 \u00b6 Added \u00b6 The \"nokogiri\" script now has more verbose output when passed the --rng option. #675 (Thanks, Dan Radez!) Build support on hardened Debian systems that use -Werror=format-security . #680 . Better build support for systems with pkg-config. #584 Better build support for systems with multiple iconv installations. Fixed \u00b6 Segmentation fault when creating a comment node for a DocumentFragment. #677 , #678 . Treat '.' as xpath in at() and search() . #690 Security \u00b6 (MRI) Default parse options for XML documents were changed to not make network connections during document parsing, to avoid XXE vulnerability. #693 To re-enable this behavior, the configuration method nononet may be called, like this: Nokogiri :: XML :: Document . parse ( xml ) { | config | config . nononet } Insert your own joke about double-negatives here. 1.5.3 / 2012-06-01 \u00b6 Added \u00b6 Support for \"prefixless\" CSS selectors ~, > and + like jQuery supports. #621 , #623 . (Thanks, David Lee!) Attempting to improve installation on homebrew 0.9 (with regards to iconv). Isn't package management convenient? Fixed \u00b6 Custom xpath functions with empty nodeset arguments cause a segfault. #634 . Nokogiri::XML::Node#css now works for XML documents with default namespaces when the rule contains attribute selector without namespace. Fixed marshalling bugs around how arguments are passed to (and returned from) XSLT custom xpath functions. #640 . Nokogiri::XML::Reader#outer_xml is broken in JRuby #617 Nokogiri::XML::Attribute on JRuby returns a nil namespace #647 Nokogiri::XML::Node#namespace= cannot set a namespace without a prefix on JRuby #648 (JRuby) 1.9 mode causes dead lock while running rake #571 HTML::Document#meta_encoding does not raise exception on docs with malformed content-type. #655 Fixing segfault related to unsupported encodings in in-context parsing on 1.8.7. #643 (JRuby) Concurrency issue in XPath parsing. #682 1.5.2 / 2012-03-09 \u00b6 Repackaging of 1.5.1 with a gemspec that is compatible with older Rubies. #631 , #632 . 1.5.1 / 2012-03-09 \u00b6 Added \u00b6 XML::Builder#comment allows creation of comment nodes. CSS searches now support namespaced attributes. #593 Java integration feature is added. Now, XML::Document.wrap and XML::Document#to_java methods are available. RelaxNG validator support in the nokogiri cli utility. #591 (thanks, Dan Radez!) Fixed \u00b6 Fix many memory leaks and segfault opportunities. Thanks, Tim Elliott! extconf searches homebrew paths if homebrew is installed. Inconsistent behavior of Nokogiri 1.5.0 Java #620 Inheriting from Nokogiri::XML::Node on JRuby (1.6.4/5) fails #560 XML::Attr nodes are not allowed to be added as node children, so an exception is raised. #558 No longer defensively \"pickle\" adjacent text nodes on Node#add_next_sibling and Node#add_previous_sibling calls. #595 . Java version inconsistency: it returns nil for empty attributes #589 to_xhtml incorrectly generates <p /></p> when tag is empty #557 Document#add_child now accepts a Node , NodeSet , DocumentFragment , or String . #546 . Document#create_element now recognizes namespaces containing non-word characters (like \"SOAP-ENV\"). This is mostly relevant to users of Builder, which calls Document#create_element for nearly everything. #531 . File encoding broken in 1.5.0 / jruby / windows #529 Java version does not return namespace defs as attrs for ::HTML #542 Bad file descriptor with Nokogiri 1.5.0 #495 remove_namespace! doesn't work in pure java version #492 The Nokogiri Java native build throws a null pointer exception when ActiveSupport's .blank? method is called directly on a parsed object. #489 1.5.0 Not using correct character encoding #488 Raw XML string in XML Builder broken on JRuby #486 Nokogiri 1.5.0 XML generation broken on JRuby #484 Do not allow multiple root nodes. #550 Fixes for custom XPath functions. #605 , #606 (thanks, Juan Wajnerman!) Node#to_xml does not override :save_with if it is provided. #505 Node#set is a private method (JRuby). #564 (thanks, Nick Sieger!) C14n cleanup and Node#canonicalize (thanks, Ivan Pirlik!) #563 1.5.0 / 2011-07-01 \u00b6 Notes \u00b6 See changelog from 1.4.7 Added \u00b6 extracted sets of Node::SaveOptions into Node::SaveOptions::DEFAULT_{X,H,XH}TML (refactor) Fixed \u00b6 default output of XML on JRuby is no longer formatted due to inconsistent whitespace handling. #415 (JRuby) making empty NodeSet s with null nodes member safe to operate on. #443 Fix a bug in advanced encoding detection that leads to partially duplicated document when parsing an HTML file with unknown encoding. Add support for <meta charset=\"...\"> . 1.5.0 beta3 / 2010-12-02 \u00b6 Notes \u00b6 JRuby performance tuning See changelog from 1.4.4 Fixed \u00b6 Node#inner_text no longer returns nil. (JRuby) #264 1.5.0 beta2 / 2010-07-30 \u00b6 Notes \u00b6 See changelog from 1.4.3 1.5.0 beta1 / 2010-05-22 \u00b6 Notes \u00b6 JRuby support is provided by a new pure-java backend. Dependencies \u00b6 Ruby 1.8.6 is deprecated. Nokogiri will install, but official support is ended. LibXML 2.6.16 and earlier are deprecated. Nokogiri will refuse to install. Removed \u00b6 FFI support is removed. 1.4.7 / 2011-07-01 \u00b6 Fixed \u00b6 Fix a bug in advanced encoding detection that leads to partially duplicated document when parsing an HTML file with unknown encoding. Thanks, Timothy Elliott ( @ender672 )! #478 1.4.6 / 2011-06-19 \u00b6 Notes \u00b6 This version is functionally identical to 1.4.5. Ruby 1.8.6 support has been restored. 1.4.5 / 2011-05-19 \u00b6 Added \u00b6 Nokogiri::HTML::Document#title accessor gets and sets the document title. extracted sets of Node::SaveOptions into Node::SaveOptions::DEFAULT_{X,H,XH}TML (refactor) Raise an exception if a string is passed to Nokogiri::XML::Schema#validate . #406 Fixed \u00b6 Node#serialize -and-friends now accepts a SaveOption object as the, erm, save object. Nokogiri::CSS::Parser has-a Nokogiri::CSS::Tokenizer (JRUBY+FFI only) Weak references are now threadsafe. #355 Make direct start_element() callback (currently used for HTML::SAX::Parser ) pass attributes in assoc array, just as emulated start_element() callback does. rel. #356 HTML::SAX::Parser should call back a block given to parse*() if any, just as XML::SAX::Parser does. Add further encoding detection to HTML parser that libxml2 does not do. Document#remove_namespaces! now handles attributes with namespaces. #396 XSLT::Stylesheet#transform no longer segfaults when handed a non- XML::Document . #452 XML::Reader no longer segfaults when under GC pressure. #439 1.4.4 / 2010-11-15 \u00b6 Added \u00b6 XML::Node#children= sets the node's inner html (much like #inner_html=), but returns the reparent node(s). XSLT supports function extensions. #336 XPath bind parameter substitution. #329 XML::Reader node type constants. #369 SAX Parser context provides line and column information Fixed \u00b6 XML::DTD#attributes returns an empty hash instead of nil when there are no attributes. XML::DTD#{keys,each} now work as expected. #324 {XML,HTML}::DocumentFragment.{new,parse} no longer strip leading and trailing whitespace. #319 XML::Node#{add_child,add_previous_sibling,add_next_sibling,replace} return a NodeSet when passed a string. Unclosed tags parsed more robustly in fragments. #315 XML::Node#{replace,add_previous_sibling,add_next_sibling} edge cases fixed related to libxml's text node merging. #308 Fixed a segfault when GC occurs during xpath handler argument marshalling. #345 Added hack to Slop decorator to work with previously defined methods. #330 Fix a memory leak when duplicating child nodes. #353 Fixed off-by-one bug with nth-last-{child,of-type} CSS selectors when NOT using an+b notation. #354 Fixed passing of non-namespace attributes to SAX::Document#start_element . #356 Workaround for libxml2 in-context parsing bug. #362 Fixed NodeSet#wrap on nodes within a fragment. #331 1.4.3 / 2010-07-28 \u00b6 Added \u00b6 XML::Reader#empty_element? returns true for empty elements. #262 Node#remove_namespaces! now removes namespace declarations as well. #294 NodeSet#at_xpath , NodeSet#at_css and NodeSet#> do what the corresponding methods of Node do. Fixed \u00b6 XML::NodeSet#{include?,delete,push} accept an XML::Namespace XML::Document#parse added for parsing in the context of a document XML::DocumentFragment#inner_html= works with contextual parsing! #298 , #281 lib/nokogiri/css/parser.y Combined CSS functions + pseudo selectors fixed Reparenting text nodes is safe, even when the operation frees adjacent merged nodes. #283 Fixed libxml2 versionitis issue with xmlFirstElementChild et al. #303 XML::Attr#add_namespace now works as expected. #252 HTML::DocumentFragment uses the string's encoding. #305 Fix the CSS3 selector translation rule for the general sibling combinator (a.k.a. preceding selector) that incorrectly converted \"E ~ F G\" to \"//F//G[preceding-sibling::E]\". 1.4.2 / 2010-05-22 \u00b6 Added \u00b6 XML::Node#parse will parse XML or HTML fragments with respect to the context node. XML::Node#namespaces returns all namespaces defined in the node and all ancestor nodes (previously did not return ancestors' namespace definitions). Added Enumerable to XML::Node Nokogiri::XML::Schema#validate now uses xmlSchemaValidateFile if a filename is passed, which is faster and more memory-efficient. GH #219 XML::Document#create_entity will create new EntityDecl objects. GH #174 JRuby FFI implementation no longer uses ObjectSpace._id2ref , instead using Charles Nutter's rocking Weakling gem. Nokogiri::XML::Node#first_element_child fetch the first child node that is an ELEMENT node. Nokogiri::XML::Node#last_element_child fetch the last child node that is an ELEMENT node. Nokogiri::XML::Node#elements fetch all children nodes that are ELEMENT nodes. Nokogiri::XML::Node#add_child , #add_previous_sibling , #before , #add_next_sibling , #after , #inner_html , #swap and #replace all now accept a Node , DocumentFragment , NodeSet , or a string containing markup. Node#fragment? indicates whether a node is a DocumentFragment . Fixed \u00b6 XML::NodeSet is now always decorated (if the document has decorators). GH #198 XML::NodeSet#slice gracefully handles offset+length larger than the set length. GH #200 XML::Node#content= safely unlinks previous content. GH #203 XML::Node#namespace= takes nil as a parameter XML::Node#xpath returns things other than NodeSet objects. GH #208 XSLT::StyleSheet#transform accepts hashes for parameters. GH #223 Psuedo selectors inside not() work. GH #205 XML::Builder doesn't break when nodes are unlinked. Thanks to vihai! GH #228 Encoding can be forced on the SAX parser. Thanks Eugene Pimenov! GH #204 XML::DocumentFragment uses XML::Node#parse to determine children. Fixed a memory leak in xml reader. Thanks sdor! GH #244 Node#replace returns the new child node as claimed in the RDoc. Previously returned +self+. Notes \u00b6 The Windows gems now bundle DLLs for libxml 2.7.6 and libxslt 1.1.26. Prior to this release, libxml 2.7.3 and libxslt 1.1.24 were bundled. 1.4.1 / 2009-12-10 \u00b6 Added \u00b6 Added Nokogiri::LIBXML_ICONV_ENABLED Alias Node#[] to Node#attr XML::Node#next_element added XML::Node#> added for searching a nodes immediate children XML::NodeSet#reverse added Added fragment support to Node#add_child , Node#add_next_sibling , Node#add_previous_sibling , and Node#replace . XML::Node#previous_element implemented Rubinius support Ths CSS selector engine now supports :has() XML::NodeSet#filter() was added XML::Node.next= and .previous= are aliases for add_next_sibling and add_previous_sibling. GH #183 Fixed \u00b6 XML fragments with namespaces do not raise an exception (regression in 1.4.0) Node#matches? works in nodes contained by a DocumentFragment . GH #158 Document should not define add_namespace() method. GH #169 XPath queries returning namespace declarations do not segfault. Node#replace works with nodes from different documents. GH #162 Adding XML::Document#collect_namespaces Fixed bugs in the SOAP4R adapter Fixed bug in XML::Node#next_element for certain edge cases Fixed load path issue with JRuby under Windows. GH #160 . XSLT#apply_to will honor the \"output method\". Thanks richardlehane! Fragments containing leading text nodes with newlines now parse properly. GH #178 . 1.4.0 / 2009-10-30 \u00b6 Added \u00b6 Node#at_xpath returns the first element of the NodeSet matching the XPath expression. Node#at_css returns the first element of the NodeSet matching the CSS selector. NodeSet#| for unions GH #119 (Thanks Serabe!) NodeSet#inspect makes prettier output Node#inspect implemented for more rubyish document inspecting Added XML::DTD#external_id Added XML::DTD#system_id Added XML::ElementContent for DTD Element content validity Better namespace declaration support in Nokogiri::XML::Builder Added XML::Node#external_subset Added XML::Node#create_external_subset Added XML::Node#create_internal_subset XML Builder can append raw strings (GH #141 , patch from dudleyf) XML::SAX::ParserContext added XML::Document#remove_namespaces! for the namespace-impaired Fixed \u00b6 returns nil when HTML documents do not declare a meta encoding tag. GH #115 Uses RbConfig::CONFIG['host_os'] to adjust ENV['PATH'] GH #113 NodeSet#search is more efficient GH #119 (Thanks Serabe!) NodeSet#xpath handles custom xpath functions Fixing a SEGV when XML::Reader gets attributes for current node Node#inner_html takes the same arguments as Node#to_html GH #117 DocumentFragment#css delegates to it's child nodes GH #123 NodeSet#[] works with slices larger than NodeSet#length GH #131 Reparented nodes maintain their namespace. GH #134 Fixed SEGV when adding an XML::Document to NodeSet XML::SyntaxError can be duplicated. GH #148 Removed \u00b6 Hpricot compatibility layer removed 1.3.3 / 2009-07-26 \u00b6 Added \u00b6 NodeSet#children returns all children of all nodes Fixed \u00b6 Override libxml-ruby's global error handler ParseOption#strict fixed Fixed a segfault when sending an empty string to Node#inner_html= GH #88 String encoding is now set to UTF-8 in Ruby 1.9 Fixed a segfault when moving root nodes between documents. GH #91 Fixed an O(n) penalty on node creation. GH #101 Allowing XML documents to be output as HTML documents Deprecations \u00b6 Hpricot compatibility layer will be removed in 1.4.0 1.3.2 / 2009-06-22 \u00b6 Added \u00b6 Nokogiri::XML::DTD#validate will validate your document Fixed \u00b6 Nokogiri::XML::NodeSet#search will search top level nodes. GH #73 Removed namespace related methods from Nokogiri::XML::Document Fixed a segfault when a namespace was added twice Made nokogiri work with Snow Leopard GH #79 Mailing list has moved to: http://groups.google.com/group/nokogiri-talk HTML fragments now correctly handle comments and CDATA blocks. GH #78 Nokogiri::XML::Document#clone is now an alias of dup Deprecations \u00b6 Nokogiri::XML::SAX::Document#start_element_ns is deprecated, please switch to Nokogiri::XML::SAX::Document#start_element_namespace Nokogiri::XML::SAX::Document#end_element_ns is deprecated, please switch to Nokogiri::XML::SAX::Document#end_element_namespace 1.3.1 / 2009-06-07 \u00b6 Fixed \u00b6 extconf.rb checks for optional RelaxNG and Schema functions Namespace nodes are added to the Document node cache 1.3.0 / 2009-05-30 \u00b6 Added \u00b6 Builder changes scope based on block arity Builder supports methods ending in underscore similar to tagz Nokogiri::XML::Node#<=> compares nodes based on Document position Nokogiri::XML::Node#matches? returns true if Node can be found with given selector. Nokogiri::XML::Node#ancestors now returns an Nokogiri::XML::NodeSet Nokogiri::XML::Node#ancestors will match parents against optional selector Nokogiri::HTML::Document#meta_encoding for getting the meta encoding Nokogiri::HTML::Document#meta_encoding= for setting the meta encoding Nokogiri::XML::Document#encoding= to set the document encoding Nokogiri::XML::Schema for validating documents against XSD schema Nokogiri::XML::RelaxNG for validating documents against RelaxNG schema Nokogiri::HTML::ElementDescription for fetching HTML element descriptions Nokogiri::XML::Node#description to fetch the node description Nokogiri::XML::Node#accept implements Visitor pattern bin/nokogiri for easily examining documents (Thanks Yutaka HARA!) Nokogiri::XML::NodeSet now supports more Array and Enumerable operators: index, delete, slice, - (difference), + (concatenation), & (intersection), push, pop, shift, == Nokogiri.XML , Nokogiri.HTML take blocks that receive Nokogiri::XML::ParseOptions objects Nokogiri::XML::Node#namespace returns a Nokogiri::XML::Namespace Nokogiri::XML::Node#namespace= for setting a node's namespace Nokogiri::XML::DocumentFragment and Nokogiri::HTML::DocumentFragment have a sensible API and a more robust implementation. JRuby 1.3.0 support via FFI. Fixed \u00b6 Fixed a problem with nil passed to CDATA constructor Fragment method deals with regular expression characters (Thanks Joel!) LH #73 Fixing builder scope issues LH #61 , LH #74 , LH #70 Fixed a problem when adding a child could remove the child namespace LH #78 Fixed bug with unlinking a node then reparenting it. (GH #22 ) Fixed failure to catch errors during XSLT parsing (GH #32 ) Fixed a bug with attribute conditions in CSS selectors (GH #36 ) Fixed intolerance of HTML attributes without values in Node#{before/after/inner_html=} . (GH #35 ) 1.2.3 / 2009-03-22 \u00b6 Fixed \u00b6 Fixing bug where a node is passed in to Node#new Namespace should be assigned on DocumentFragment creation. LH #66 Nokogiri::XML::NodeSet#dup works GH #10 Nokogiri::HTML returns an empty Document when given a blank string GH #11 Adding a child will remove duplicate namespace declarations LH #67 Builder methods take a hash as a second argument 1.2.2 / 2009-03-14 \u00b6 Added \u00b6 Nokogiri may be used with soap4r. See XSD::XMLParser::Nokogiri Nokogiri::XML::Node#inner_html= to set the inner html for a node Nokogiri builder interface improvements Nokogiri::XML::Node#swap swaps html for current node (LH #50 ) Fixed \u00b6 Fixed a tag nesting problem in the Builder API (LH #41 ) Nokogiri::HTML.fragment will properly handle text only nodes (LH #43 ) Nokogiri::XML::Node#before will prepend text nodes (LH #44 ) Nokogiri::XML::Node#after will append text nodes Nokogiri::XML::Node#search automatically registers root namespaces (LH #42 ) Nokogiri::XML::NodeSet#search automatically registers namespaces Nokogiri::HTML::NamedCharacters delegates to libxml2 Nokogiri::XML::Node#[] can take a symbol (LH #48 ) vasprintf for windows updated. Thanks Geoffroy Couprie! Nokogiri::XML::Node#[]= should not encode entities (LH #55 ) Namespaces should be copied to reparented nodes (LH #56 ) Nokogiri uses encoding set on the string for default in Ruby 1.9 Document#dup should create a new document of the same type (LH #59 ) Document should not have a parent method (LH #64 ) 1.2.1 / 2009-02-23 \u00b6 Fixed \u00b6 Fixed a CSS selector space bug Fixed Ruby 1.9 String Encoding (Thanks \u89d2\u8c37\u3055\u3093\uff01) 1.2.0 / 2009-02-22 \u00b6 Added \u00b6 CSS search now supports CSS3 namespace queries Namespaces on the root node are automatically registered CSS queries use the default namespace Nokogiri::XML::Document#encoding get encoding used for this document Nokogiri::XML::Document#url get the document url Nokogiri::XML::Node#add_namespace add a namespace to the node LH #38 Nokogiri::XML::Node#each iterate over attribute name, value pairs Nokogiri::XML::Node#keys get all attribute names Nokogiri::XML::Node#line get the line number for a node (Thanks Dirkjan Bussink!) Nokogiri::XML::Node#serialize now takes an optional encoding parameter Nokogiri::XML::Node#to_html , to_xml, and to_xhtml take an optional encoding Nokogiri::XML::Node#to_str Nokogiri::XML::Node#to_xhtml to produce XHTML documents Nokogiri::XML::Node#values get all attribute values Nokogiri::XML::Node#write_to writes the node to an IO object with optional encoding Nokogiri::XML::ProcessingInstruction.new Nokogiri::XML::SAX::PushParser for all your push parsing needs. Fixed \u00b6 Fixed Nokogiri::XML::Document#dup Fixed header detection. Thanks rubikitch! Fixed a problem where invalid CSS would cause the parser to hang Deprecations \u00b6 Nokogiri::XML::Node.new_from_str will be deprecated in 1.3.0 Changed \u00b6 Nokogiri::HTML.fragment now returns an XML::DocumentFragment (LH #32 ) 1.1.1 \u00b6 Added \u00b6 Added XML::Node#elem? Added XML::Node#attribute_nodes Added XML::Attr XML::Node#delete added. XML::NodeSet#inner_html added. Fixed \u00b6 Not including an HTML entity for \\r for HTML nodes. Removed CSS::SelectorHandler and XML::XPathHandler XML::Node#attributes returns an Attr node for the value. XML::NodeSet implements to_xml 1.1.0 \u00b6 Added \u00b6 Custom XPath functions are now supported. See Nokogiri::XML::Node#xpath Custom CSS pseudo classes are now supported. See Nokogiri::XML::Node#css Nokogiri::XML::Node#<< will add a child to the current node Fixed \u00b6 Mutex lock on CSS cache access Fixed build problems with GCC 3.3.5 XML::Node#to_xml now takes an indentation argument XML::Node#dup takes an optional depth argument XML::Node#add_previous_sibling returns new sibling node. 1.0.7 \u00b6 Fixed \u00b6 Fixed memory leak when using Dike SAX parser now parses IO streams Comment nodes have their own class Nokogiri() should delegate to Nokogiri.parse() Prepending rather than appending to ENV['PATH'] on windows Fixed a bug in complex CSS negation selectors 1.0.6 \u00b6 Fixed \u00b6 XPath Parser raises a SyntaxError on parse failure CSS Parser raises a SyntaxError on parse failure filter() and not() hpricot compatibility added CSS searches via Node#search are now always relative CSS to XPath conversion is now cached 1.0.5 \u00b6 Fixed \u00b6 Added mailing list and ticket tracking information to the README.txt Sets ENV['PATH'] on windows if it doesn't exist Caching results of NodeSet#[] on Document 1.0.4 \u00b6 Fixed \u00b6 Changed memory management from weak refs to document refs Plugged some memory leaks Builder blocks can call methods from surrounding contexts 1.0.3 \u00b6 Fixed \u00b6 NodeSet now implements to_ary XML::Document should not implement parent More GC Bugs fixed. (Mike is AWESOME!) Removed RARRAY_LEN for 1.8.5 compatibility. Thanks Shane Hanna. inner_html fixed. (Thanks Yehuda!) 1.0.2 \u00b6 Fixed \u00b6 extconf.rb should not check for frex and racc 1.0.1 \u00b6 Fixed \u00b6 Made sure extconf.rb searched libdir and prefix so that ports libxml/ruby will link properly. Thanks lucsky! 1.0.0 / 2008-07-13 \u00b6 Added \u00b6 Birthday!","title":"Changelog"},{"location":"CHANGELOG.html#nokogiri-changelog","text":"Nokogiri follows Semantic Versioning , please see the README.md for details.","title":"Nokogiri Changelog"},{"location":"CHANGELOG.html#1123-2021-08-10","text":"","title":"1.12.3 / 2021-08-10"},{"location":"CHANGELOG.html#fixed","text":"[CRuby] Fix compilation of libgumbo on older systems with versions of GCC that give errors on C99-isms. Affected systems include RHEL6, RHEL7, and SLES12. [ #2302 ]","title":"Fixed"},{"location":"CHANGELOG.html#1122-2021-08-04","text":"","title":"1.12.2 / 2021-08-04"},{"location":"CHANGELOG.html#fixed_1","text":"[CRuby] Ensure that C extension files in non-native gem installations are loaded using require and rely on $LOAD_PATH instead of using require_relative . This issue only exists when deleting shared libraries that exist outside the extensions directory, something users occasionally do to conserve disk space. [ #2300 ]","title":"Fixed"},{"location":"CHANGELOG.html#1121-2021-08-03","text":"","title":"1.12.1 / 2021-08-03"},{"location":"CHANGELOG.html#fixed_2","text":"[CRuby] Fix compilation of libgumbo on BSD systems by avoiding GNU-isms. [ #2298 ]","title":"Fixed"},{"location":"CHANGELOG.html#1120-2021-08-02","text":"","title":"1.12.0 / 2021-08-02"},{"location":"CHANGELOG.html#notable-addition-html5-support-cruby-only","text":"HTML5 support has been added (to CRuby only) by merging Nokogumbo into Nokogiri. The Nokogumbo public API has been preserved, so this functionality is available under the Nokogiri::HTML5 namespace. [ #2204 ] Please note that HTML5 support is not available for JRuby in this version. However, we feel it is important to think about JRuby and we hope to work on this in the future. If you're interested in helping with HTML5 support on JRuby, please reach out to the maintainers by commenting on issue #2227 . Many thanks to Sam Ruby, Steve Checkoway, and Craig Barnes for creating and maintaining Nokogumbo and supporting the Gumbo HTML5 parser. They're now Nokogiri core contributors with all the powers and privileges pertaining thereto. \ud83d\ude4c","title":"Notable Addition: HTML5 Support (CRuby only)"},{"location":"CHANGELOG.html#notable-change-nokogirihtml4-module-and-namespace","text":"Nokogiri::HTML has been renamed to Nokogiri::HTML4 , and Nokogiri::HTML is aliased to preserve backwards-compatibility. Nokogiri::HTML and Nokogiri::HTML4 parse methods still use libxml2's (or NekoHTML's) HTML4 parser in the v1.12 release series. Take special note that if you rely on the class name of an object in your code, objects will now report a class of Nokogiri::HTML4::Foo where they previously reported Nokogiri::HTML::Foo . Instead of relying on the string returned by Object#class , prefer Class#=== or Object#is_a? or Object#instance_of? . Future releases of Nokogiri may deprecate HTML methods or otherwise change this behavior, so please start using HTML4 in place of HTML .","title":"Notable Change: Nokogiri::HTML4 module and namespace"},{"location":"CHANGELOG.html#added","text":"[CRuby] Nokogiri::VERSION_INFO[\"libxslt\"][\"datetime_enabled\"] is a new boolean value which describes whether libxslt (or, more properly, libexslt) has compiled-in datetime support. This generally going to be true , but some distros ship without this support (e.g., some mingw UCRT-based packages, see https://github.com/msys2/MINGW-packages/pull/8957 ). See #2272 for more details.","title":"Added"},{"location":"CHANGELOG.html#changed","text":"Introduce a new constant, Nokogiri::XML::ParseOptions::DEFAULT_XSLT , which adds the libxslt-preferred options of NOENT | DTDLOAD | DTDATTR | NOCDATA to ParseOptions::DEFAULT_XML . Nokogiri.XSLT parses stylesheets using ParseOptions::DEFAULT_XSLT , which should make some edge-case XSL transformations match libxslt's default behavior. [ #1940 ]","title":"Changed"},{"location":"CHANGELOG.html#fixed_3","text":"[CRuby] Namespaced attributes are handled properly when their parent node is reparented into another document. Previously, the namespace may have gotten dropped. [ #2228 ] [CRuby] Reparented nodes no longer inherit their parent's namespace. Previously, a node without a namespace was forced to adopt its parent's namespace. [ #1712 ]","title":"Fixed"},{"location":"CHANGELOG.html#improved","text":"[CRuby] Speed up (slightly) the compile time of packaged libraries libiconv , libxml2 , and libxslt by using autoconf's --disable-dependency-tracking option. (\"ruby\" platform gem only.)","title":"Improved"},{"location":"CHANGELOG.html#deprecated","text":"Deprecating Nokogumbo's Nokogiri::HTML5.get . This method will be removed in a future version of Nokogiri.","title":"Deprecated"},{"location":"CHANGELOG.html#dependencies","text":"[CRuby] Upgrade mini_portile2 dependency from ~> 2.5.0 to ~> 2.6.1 . (\"ruby\" platform gem only.)","title":"Dependencies"},{"location":"CHANGELOG.html#1117-2021-06-02","text":"","title":"1.11.7 / 2021-06-02"},{"location":"CHANGELOG.html#fixed_4","text":"[CRuby] Backporting an upstream fix to XPath recursion depth limits which impacted some users of complex XPath queries. This issue is present in libxml 2.9.11 and 2.9.12. [ #2257 ]","title":"Fixed"},{"location":"CHANGELOG.html#1116-2021-05-26","text":"","title":"1.11.6 / 2021-05-26"},{"location":"CHANGELOG.html#fixed_5","text":"[CRuby] DocumentFragment#path now does proper error-checking to handle behavior introduced in libxml > 2.9.10. In v1.11.4 and v1.11.5, calling DocumentFragment#path could result in a segfault.","title":"Fixed"},{"location":"CHANGELOG.html#1115-2021-05-19","text":"","title":"1.11.5 / 2021-05-19"},{"location":"CHANGELOG.html#fixed_6","text":"[Windows CRuby] Work around segfault at process exit on Windows when using libxml2 system DLLs. libxml 2.9.12 introduced new behavior to avoid memory leaks when unloading libxml2 shared libraries (see libxml/!66 ). Early testing caught this segfault on non-Windows platforms (see #2059 and libxml@956534e ) but it was incompletely fixed and is still an issue on Windows platforms that are using system DLLs. We work around this by configuring libxml2 in this situation to use its default memory management functions. Note that if Nokogiri is not on Windows, or is not using shared system libraries, it will will continue to configure libxml2 to use Ruby's memory management functions. Nokogiri::VERSION_INFO[\"libxml\"][\"memory_management\"] will allow you to verify when the default memory management functions are being used. [ #2241 ]","title":"Fixed"},{"location":"CHANGELOG.html#added_1","text":"Nokogiri::VERSION_INFO[\"libxml\"] now contains the key \"memory_management\" to declare whether libxml2 is using its default memory management functions, or whether it uses the memory management functions from ruby . See above for more details.","title":"Added"},{"location":"CHANGELOG.html#1114-2021-05-14","text":"","title":"1.11.4 / 2021-05-14"},{"location":"CHANGELOG.html#security","text":"[CRuby] Vendored libxml2 upgraded to v2.9.12 which addresses: CVE-2019-20388 CVE-2020-24977 CVE-2021-3517 CVE-2021-3518 CVE-2021-3537 CVE-2021-3541 Note that two additional CVEs were addressed upstream but are not relevant to this release. CVE-2021-3516 via xmllint is not present in Nokogiri, and CVE-2020-7595 has been patched in Nokogiri since v1.10.8 (see #1992 ). Please see nokogiri/GHSA-7rrm-v45f-jp64 or #2233 for a more complete analysis of these CVEs and patches.","title":"Security"},{"location":"CHANGELOG.html#dependencies_1","text":"[CRuby] vendored libxml2 is updated from 2.9.10 to 2.9.12. (Note that 2.9.11 was skipped because it was superseded by 2.9.12 a few hours after its release.)","title":"Dependencies"},{"location":"CHANGELOG.html#1113-2021-04-07","text":"","title":"1.11.3 / 2021-04-07"},{"location":"CHANGELOG.html#fixed_7","text":"[CRuby] Passing non- Node objects to Document#root= now raises an ArgumentError exception. Previously this likely segfaulted. [ #1900 ] [JRuby] Passing non- Node objects to Document#root= now raises an ArgumentError exception. Previously this raised a TypeError exception. [CRuby] arm64/aarch64 systems (like Apple's M1) can now compile libxml2 and libxslt from source (though we continue to strongly advise users to install the native gems for the best possible experience)","title":"Fixed"},{"location":"CHANGELOG.html#1112-2021-03-11","text":"","title":"1.11.2 / 2021-03-11"},{"location":"CHANGELOG.html#fixed_8","text":"[CRuby] NodeSet may now safely contain Node objects from multiple documents. Previously the GC lifecycle of the parent Document objects could lead to nodes being GCed while still in scope. [ #1952 ] [CRuby] Patch libxml2 to avoid \"huge input lookup\" errors on large CDATA elements. (See upstream GNOME/libxml2#200 and GNOME/libxml2!100 .) [ #2132 ]. [CRuby+Windows] Enable Nokogumbo (and other downstream gems) to compile and link against nokogiri.so by including LDFLAGS in Nokogiri::VERSION_INFO . [ #2167 ] [CRuby] {XML,HTML}::Document.parse now invokes #initialize exactly once. Previously #initialize was invoked twice on each object. [JRuby] {XML,HTML}::Document.parse now invokes #initialize exactly once. Previously #initialize was not called, which was a problem for subclassing such as done by Loofah .","title":"Fixed"},{"location":"CHANGELOG.html#improved_1","text":"Reduce the number of object allocations needed when parsing an HTML::DocumentFragment . [ #2087 ] (Thanks, @ashmaroli !) [JRuby] Update the algorithm used to calculate Node#line to be wrong less-often. The underlying parser, Xerces, does not track line numbers, and so we've always used a hacky solution for this method. [ #1223 , #2177 ] Introduce --enable-system-libraries and --disable-system-libraries flags to extconf.rb . These flags provide the same functionality as --use-system-libraries and the NOKOGIRI_USE_SYSTEM_LIBRARIES environment variable, but are more idiomatic. [ #2193 ] (Thanks, @eregon !) [TruffleRuby] --disable-static is now the default on TruffleRuby when the packaged libraries are used. This is more flexible and compiles faster. (Note, though, that the default on TR is still to use system libraries.) [ #2191 , #2193 ] (Thanks, @eregon !)","title":"Improved"},{"location":"CHANGELOG.html#changed_1","text":"Nokogiri::XML::Path is now a Module (previously it has been a Class). It has been acting solely as a Module since v1.0.0. See 8461c74 .","title":"Changed"},{"location":"CHANGELOG.html#1111-2021-01-06","text":"","title":"1.11.1 / 2021-01-06"},{"location":"CHANGELOG.html#fixed_9","text":"[CRuby] If libxml-ruby is loaded before nokogiri , the SAX and Push parsers no longer call libxml-ruby 's handlers. Instead, they defensively override the libxml2 global handler before parsing. [ #2168 ]","title":"Fixed"},{"location":"CHANGELOG.html#1110-2021-01-03","text":"","title":"1.11.0 / 2021-01-03"},{"location":"CHANGELOG.html#notes","text":"","title":"Notes"},{"location":"CHANGELOG.html#dependencies_2","text":"","title":"Dependencies"},{"location":"CHANGELOG.html#security_1","text":"See note below about CVE-2020-26247 in the \"Changed\" subsection entitled \"XML::Schema parsing treats input as untrusted by default\".","title":"Security"},{"location":"CHANGELOG.html#added_2","text":"Add Node methods for manipulating \"keyword attributes\" (for example, class and rel ): #kwattr_values , #kwattr_add , #kwattr_append , and #kwattr_remove . [ #2000 ] Add support for CSS queries a:has(> b) , a:has(~ b) , and a:has(+ b) . [ #688 ] (Thanks, @jonathanhefner !) Add Node#value? to better match expected semantics of a Hash-like object. [ #1838 , #1840 ] (Thanks, @MatzFan !) [CRuby] Add Nokogiri::XML::Node#line= for use by downstream libs like nokogumbo. [ #1918 ] (Thanks, @stevecheckoway !) nokogiri.gemspec is back after a 10-year hiatus. We still prefer you use the official releases, but main is pretty stable these days, and YOLO.","title":"Added"},{"location":"CHANGELOG.html#performance","text":"[CRuby] The CSS ~= operator and class selector . are about 2x faster. [ #2137 , #2135 ] [CRuby] Patch libxml2 to call strlen from xmlStrlen rather than the naive implementation, because strlen is generally optimized for the architecture. [ #2144 ] (Thanks, @ilyazub !) Improve performance of some namespace operations. [ #1916 ] (Thanks, @ashmaroli !) Remove unnecessary array allocations from Node serialization methods [ #1911 ] (Thanks, @ashmaroli !) Avoid creation of unnecessary zero-length String objects. [ #1970 ] (Thanks, @ashmaroli !) Always compile libxml2 and libxslt with '-O2' [ #2022 , #2100 ] (Thanks, @ilyazub !) [JRuby] Lots of code cleanup and performance improvements. [ #1934 ] (Thanks, @kares !) [CRuby] RelaxNG.from_document no longer leaks memory. [ #2114 ]","title":"Performance"},{"location":"CHANGELOG.html#improved_2","text":"[CRuby] Handle incorrectly-closed HTML comments as WHATWG recommends for browsers. [ #2058 ] (Thanks to HackerOne user mayflower for reporting this!) {HTML,XML}::Document#parse now accept Pathname objects. Previously this worked only if the referenced file was less than 4096 bytes long; longer files resulted in undefined behavior because the read method would be repeatedly invoked. [ #1821 , #2110 ] (Thanks, @doriantaylor and @phokz !) [CRuby] Nokogumbo builds faster because it can now use header files provided by Nokogiri. [ #1788 ] (Thanks, @stevecheckoway !) Add frozen_string_literal: true magic comment to all lib files. [ #1745 ] (Thanks, @oniofchaos !) [JRuby] Clean up deprecated calls into JRuby. [ #2027 ] (Thanks, @headius !)","title":"Improved"},{"location":"CHANGELOG.html#fixed_10","text":"HTML Parsing in \"strict\" mode (i.e., the RECOVER parse option not set) now correctly raises a XML::SyntaxError exception. Previously the value of the RECOVER bit was being ignored by CRuby and was misinterpreted by JRuby. [ #2130 ] The CSS ~= operator now correctly handles non-space whitespace in the class attribute. commit e45dedd The switch to turn off the CSS-to-XPath cache is now thread-local, rather than being shared mutable state. [ #1935 ] The Node methods add_previous_sibling , previous= , before , add_next_sibling , next= , after , replace , and swap now correctly use their parent as the context node for parsing markup. These methods now also raise a RuntimeError if they are called on a node with no parent. [ nokogumbo#160 ] [JRuby] XML::Schema XSD validation errors are captured in XML::Schema#errors . These errors were previously ignored. [JRuby] Standardize reading from IO like objects, including StringIO. [ #1888 , #1897 ] [JRuby] Fix how custom XPath function namespaces are inferred to be less naive. [ #1890 , #2148 ] [JRuby] Clarify exception message when custom XPath functions can't be resolved. [JRuby] Comparison of Node to Document with Node#<=> now matches CRuby/libxml2 behavior. [CRuby] Syntax errors are now correctly captured in Document#errors for short HTML documents. Previously the SAX parser used for encoding detection was clobbering libxml2's global error handler. [CRuby] Fixed installation on AIX with respect to vasprintf . [ #1908 ] [CRuby] On some platforms, avoid symbol name collision with glibc's canonicalize . [ #2105 ] [Windows Visual C++] Fixed compiler warnings and errors. [ #2061 , #2068 ] [CRuby] Fixed Nokogumbo integration which broke in the v1.11.0 release candidates. [ #1788 ] (Thanks, @stevecheckoway !) [JRuby] Fixed document encoding regression in v1.11.0 release candidates. [ #2080 , #2083 ] (Thanks, @thbar !)","title":"Fixed"},{"location":"CHANGELOG.html#removed","text":"The internal method Nokogiri::CSS::Parser.cache_on= has been removed. Use .set_cache if you need to muck with the cache internals. The class method Nokogiri::CSS::Parser.parse has been removed. This was originally deprecated in 2009 in 13db61b. Use Nokogiri::CSS.parse instead.","title":"Removed"},{"location":"CHANGELOG.html#changed_2","text":"","title":"Changed"},{"location":"CHANGELOG.html#11010-2020-07-06","text":"","title":"1.10.10 / 2020-07-06"},{"location":"CHANGELOG.html#features","text":"[MRI] Cross-built Windows gems now support Ruby 2.7 [ #2029 ]. Note that prior to this release, the v1.11.x prereleases provided this support.","title":"Features"},{"location":"CHANGELOG.html#1109-2020-03-01","text":"","title":"1.10.9 / 2020-03-01"},{"location":"CHANGELOG.html#fixed_11","text":"[MRI] Raise an exception when Nokogiri detects a specific libxml2 edge case involving blank Schema nodes wrapped by Ruby objects that would cause a segfault. Currently no fix is available upstream, so we're preventing a dangerous operation and informing users to code around it if possible. [ #1985 , #2001 ] [JRuby] Change NodeSet#to_a to return a RubyArray instead of Object, for compilation under JRuby 9.2.9 and later. [ #1968 , #1969 ] (Thanks, @headius !)","title":"Fixed"},{"location":"CHANGELOG.html#1108-2020-02-10","text":"","title":"1.10.8 / 2020-02-10"},{"location":"CHANGELOG.html#security_2","text":"[MRI] Pulled in upstream patch from libxml that addresses CVE-2020-7595. Full details are available in #1992 . Note that this patch is not yet (as of 2020-02-10) in an upstream release of libxml.","title":"Security"},{"location":"CHANGELOG.html#1107-2019-12-03","text":"","title":"1.10.7 / 2019-12-03"},{"location":"CHANGELOG.html#fixed_12","text":"[MRI] Ensure the patch applied in v1.10.6 works with GNU patch . [ #1954 ]","title":"Fixed"},{"location":"CHANGELOG.html#1106-2019-12-03","text":"","title":"1.10.6 / 2019-12-03"},{"location":"CHANGELOG.html#fixed_13","text":"[MRI] Fix FreeBSD installation of vendored libxml2. [ #1941 , #1953 ] (Thanks, @nurse !)","title":"Fixed"},{"location":"CHANGELOG.html#1105-2019-10-31","text":"","title":"1.10.5 / 2019-10-31"},{"location":"CHANGELOG.html#security_3","text":"[MRI] Vendored libxslt upgraded to v1.1.34 which addresses three CVEs for libxslt: CVE-2019-13117 CVE-2019-13118 CVE-2019-18197 CVE-2019-19956 More details are available at #1943 .","title":"Security"},{"location":"CHANGELOG.html#dependencies_3","text":"[MRI] vendored libxml2 is updated from 2.9.9 to 2.9.10 [MRI] vendored libxslt is updated from 1.1.33 to 1.1.34","title":"Dependencies"},{"location":"CHANGELOG.html#1104-2019-08-11","text":"","title":"1.10.4 / 2019-08-11"},{"location":"CHANGELOG.html#security_4","text":"Address CVE-2019-5477 ( #1915 ). A command injection vulnerability in Nokogiri v1.10.3 and earlier allows commands to be executed in a subprocess by Ruby's Kernel.open method. Processes are vulnerable only if the undocumented method Nokogiri::CSS::Tokenizer#load_file is being passed untrusted user input. This vulnerability appears in code generated by the Rexical gem versions v1.0.6 and earlier. Rexical is used by Nokogiri to generate lexical scanner code for parsing CSS queries. The underlying vulnerability was addressed in Rexical v1.0.7 and Nokogiri upgraded to this version of Rexical in Nokogiri v1.10.4. This CVE's public notice is #1915","title":"Security"},{"location":"CHANGELOG.html#1103-2019-04-22","text":"","title":"1.10.3 / 2019-04-22"},{"location":"CHANGELOG.html#security_5","text":"[MRI] Pulled in upstream patch from libxslt that addresses CVE-2019-11068. Full details are available in #1892 . Note that this patch is not yet (as of 2019-04-22) in an upstream release of libxslt.","title":"Security"},{"location":"CHANGELOG.html#1102-2019-03-24","text":"","title":"1.10.2 / 2019-03-24"},{"location":"CHANGELOG.html#security_6","text":"[MRI] Remove support from vendored libxml2 for future script macros. [ #1871 ] [MRI] Remove support from vendored libxml2 for server-side includes within attributes. [ #1877 ]","title":"Security"},{"location":"CHANGELOG.html#fixed_14","text":"[JRuby] Fix node ownership in duplicated documents. [ #1060 ] [JRuby] Rethrow exceptions caught by Java SAX handler. [ #1847 , #1872 ] (Thanks, @adjam !)","title":"Fixed"},{"location":"CHANGELOG.html#1101-2019-01-13","text":"","title":"1.10.1 / 2019-01-13"},{"location":"CHANGELOG.html#added_3","text":"[MRI] During installation, handle Xcode 10's new library path. [ #1801 , #1851 ] (Thanks, @mlj and @deepj !) Avoid unnecessary creation of Proc s in many methods. [ #1776 ] (Thanks, @chopraanmol1 !)","title":"Added"},{"location":"CHANGELOG.html#fixed_15","text":"CSS selector :has() now correctly matches against any descendant. Previously this selector matched against only direct children). [ #350 ] (Thanks, @Phrogz !) NodeSet#attr now returns nil if it's empty. Previously this raised a NoMethodError. [MRI] XPath errors are no longer suppressed during XSLT::Stylesheet#transform . Previously these errors were suppressed which led to silent failures and a subsequent segfault. [ #1802 ]","title":"Fixed"},{"location":"CHANGELOG.html#1100-2019-01-04","text":"","title":"1.10.0 / 2019-01-04"},{"location":"CHANGELOG.html#added_4","text":"[MRI] Cross-built Windows gems now support Ruby 2.6 [ #1842 , #1850 ]","title":"Added"},{"location":"CHANGELOG.html#dependencies_4","text":"This release ends support for Ruby 2.2, for which official support ended on 2018-03-31 [ #1841 ] This release ends support for JRuby 1.7, for which official support ended on 2017-11-21 [ #1741 ] [MRI] libxml2 is updated from 2.9.8 to 2.9.9 [MRI] libxslt is updated from 1.1.32 to 1.1.33","title":"Dependencies"},{"location":"CHANGELOG.html#191-2018-12-17","text":"","title":"1.9.1 / 2018-12-17"},{"location":"CHANGELOG.html#fixed_16","text":"Fix a bug introduced in v1.9.0 where XML::DocumentFragment#dup no longer returned an instance of the callee's class, instead always returning an XML::DocumentFragment . This notably broke any subclass of XML::DocumentFragment including HTML::DocumentFragment as well as the Loofah gem's Loofah::HTML::DocumentFragment . [ #1846 ]","title":"Fixed"},{"location":"CHANGELOG.html#190-2018-12-17","text":"","title":"1.9.0 / 2018-12-17"},{"location":"CHANGELOG.html#security_7","text":"[JRuby] Upgrade Xerces dependency from 2.11.0 to 2.12.0 to address upstream vulnerability CVE-2012-0881 [ #1831 ] (Thanks @grajagandev for reporting.)","title":"Security"},{"location":"CHANGELOG.html#improved_3","text":"Decrease installation size by removing many unneeded files (e.g., /test ) from the packaged gems. [ #1719 ] (Thanks, @stevecrozz !)","title":"Improved"},{"location":"CHANGELOG.html#added_5","text":"XML::Attr#value= allows HTML node attribute values to be set to either a blank string or an empty boolean attribute. [ #1800 ] Introduce XML::Node#wrap which does what XML::NodeSet#wrap has always done, but for a single node. [ #1531 ] (Thanks, @ethirajsrinivasan !) [MRI] Improve installation experience on macOS High Sierra (Darwin). [ #1812 , #1813 ] (Thanks, @gpakosz and @nurse !) [MRI] Node#dup supports copying a node directly to a new document. See the method documentation for details. [MRI] DocumentFragment#dup is now more memory-efficient, avoiding making unnecessary copies. [ #1063 ] [JRuby] NodeSet has been rewritten to improve performance! [ #1795 ]","title":"Added"},{"location":"CHANGELOG.html#fixed_17","text":"NodeSet#each now returns self instead of zero. [ #1822 ] (Thanks, @olehif !) [MRI] Address a memory leak when using XML::Builder to create nodes with namespaces. [ #1810 ] [MRI] Address a memory leak when unparenting a DTD. [ #1784 ] (Thanks, @stevecheckoway !) [MRI] Use RbConfig::CONFIG instead of ::MAKEFILE_CONFIG to fix installations that use Makefile macros. [ #1820 ] (Thanks, @nobu !) [JRuby] Decrease large memory usage when making nested XPath queries. [ #1749 ] [JRuby] Fix failing tests on JRuby 9.2.x [JRuby] Fix default namespaces in nodes reparented into a different document [ #1774 ] [JRuby] Fix support for Java 9. [ #1759 ] (Thanks, @Taywee !)","title":"Fixed"},{"location":"CHANGELOG.html#dependencies_5","text":"[MRI] Upgrade mini_portile2 dependency from ~> 2.3.0 to ~> 2.4.0","title":"Dependencies"},{"location":"CHANGELOG.html#185-2018-10-04","text":"","title":"1.8.5 / 2018-10-04"},{"location":"CHANGELOG.html#security_8","text":"[MRI] Pulled in upstream patches from libxml2 that address CVE-2018-14404 and CVE-2018-14567. Full details are available in #1785 . Note that these patches are not yet (as of 2018-10-04) in an upstream release of libxml2.","title":"Security"},{"location":"CHANGELOG.html#fixed_18","text":"[MRI] Fix regression in installation when building against system libraries, where some systems would not be able to find libxml2 or libxslt when present. (Regression introduced in v1.8.3.) [ #1722 ] [JRuby] Fix node reparenting when the destination doc is empty. [ #1773 ]","title":"Fixed"},{"location":"CHANGELOG.html#184-2018-07-03","text":"","title":"1.8.4 / 2018-07-03"},{"location":"CHANGELOG.html#fixed_19","text":"[MRI] Fix memory leak when creating nodes with namespaces. (Introduced in v1.5.7) [ #1771 ]","title":"Fixed"},{"location":"CHANGELOG.html#183-2018-06-16","text":"","title":"1.8.3 / 2018-06-16"},{"location":"CHANGELOG.html#security_9","text":"[MRI] Behavior in libxml2 has been reverted which caused CVE-2018-8048 (loofah gem), CVE-2018-3740 (sanitize gem), and CVE-2018-3741 (rails-html-sanitizer gem). The commit in question is here: https://github.com/GNOME/libxml2/commit/960f0e2 and more information is available about this commit and its impact here: https://github.com/flavorjones/loofah/issues/144 This release simply reverts the libxml2 commit in question to protect users of Nokogiri's vendored libraries from similar vulnerabilities. If you're offended by what happened here, I'd kindly ask that you comment on the upstream bug report here: https://bugzilla.gnome.org/show_bug.cgi?id=769760","title":"Security"},{"location":"CHANGELOG.html#more-security","text":"[MRI] Vendored libxml2 upgraded to v2.9.8 which addresses CVE-2016-9318 [ #1582 ].","title":"More Security"},{"location":"CHANGELOG.html#dependencies_6","text":"[MRI] libxml2 is updated from 2.9.7 to 2.9.8","title":"Dependencies"},{"location":"CHANGELOG.html#added_6","text":"Node#classes , #add_class , #append_class , and #remove_class are added. NodeSet#append_class is added. NodeSet#remove_attribute is a new alias for NodeSet#remove_attr . NodeSet#each now returns an Enumerator when no block is passed (Thanks, @park53kr !) [JRuby] General improvements in JRuby implementation (Thanks, @kares !)","title":"Added"},{"location":"CHANGELOG.html#fixed_20","text":"CSS attribute selectors now gracefully handle queries using integers. [ #711 ] Handle ASCII-8BIT encoding on fragment input [ #553 ] Handle non-string return values within Reader [ #898 ] [JRuby] Allow Node#replace to insert Comment and CDATA nodes. [ #1666 ] [JRuby] Stability and speed improvements to Node , Sax::PushParser , and the JRuby implementation [ #1708 , #1710 , #1501 ]","title":"Fixed"},{"location":"CHANGELOG.html#182-2018-01-29","text":"","title":"1.8.2 / 2018-01-29"},{"location":"CHANGELOG.html#security_10","text":"[MRI] The update of vendored libxml2 from 2.9.5 to 2.9.7 addresses at least one published vulnerability, CVE-2017-15412. [ #1714 has complete details]","title":"Security"},{"location":"CHANGELOG.html#dependencies_7","text":"[MRI] libxml2 is updated from 2.9.5 to 2.9.7 [MRI] libxslt is updated from 1.1.30 to 1.1.32","title":"Dependencies"},{"location":"CHANGELOG.html#added_7","text":"[MRI] OpenBSD installation should be a bit easier now. [ #1685 ] (Thanks, @jeremyevans !) [MRI] Cross-built Windows gems now support Ruby 2.5","title":"Added"},{"location":"CHANGELOG.html#fixed_21","text":"Node#serialize once again returns UTF-8-encoded strings. [ #1659 ] [JRuby] made SAX parsing of characters consistent with C implementation [ #1676 ] (Thanks, [@andrew](https://github.com/andrew)-aladev !) [MRI] Predefined entities, when inspected, no longer cause a segfault. [ #1238 ]","title":"Fixed"},{"location":"CHANGELOG.html#181-2017-09-19","text":"","title":"1.8.1 / 2017-09-19"},{"location":"CHANGELOG.html#dependencies_8","text":"[MRI] libxml2 is updated from 2.9.4 to 2.9.5. [MRI] libxslt is updated from 1.1.29 to 1.1.30. [MRI] optional dependency on the pkg-config gem has had its constraint loosened to ~> 1.1 (from ~> 1.1.7 ). [ #1660 ] [MRI] Upgrade mini_portile2 dependency from ~> 2.2.0 to ~> 2.3.0 , which will validate checksums on the vendored libxml2 and libxslt tarballs before using them.","title":"Dependencies"},{"location":"CHANGELOG.html#fixed_22","text":"NodeSet#first with an integer argument longer than the length of the NodeSet now correctly clamps the length of the returned NodeSet to the original length. [ #1650 ] (Thanks, @Derenge !) [MRI] Ensure CData.new raises TypeError if the content argument is not implicitly convertible into a string. [ #1669 ]","title":"Fixed"},{"location":"CHANGELOG.html#180-2017-06-04","text":"","title":"1.8.0 / 2017-06-04"},{"location":"CHANGELOG.html#dependencies_9","text":"This release ends support for Ruby 2.1 on Windows in the x86-mingw32 and x64-mingw32 platform gems (containing pre-compiled DLLs). Official support ended for Ruby 2.1 on 2017-04-01. Please note that this deprecation note only applies to the precompiled Windows gems. Ruby 2.1 continues to be supported (for now) in the default gem when compiled on installation.","title":"Dependencies"},{"location":"CHANGELOG.html#dependencies_10","text":"[Windows] Upgrade iconv from 1.14 to 1.15 (unless --use-system-libraries) [Windows] Upgrade zlib from 1.2.8 to 1.2.11 (unless --use-system-libraries) [MRI] Upgrade rake-compiler dependency from 0.9.2 to 1.0.3 [MRI] Upgrade mini-portile2 dependency from ~> 2.1.0 to ~> 2.2.0 [JRuby] Removed support for jruby --1.8 code paths. [ #1607 ] (Thanks, @kares !) [MRI Windows] Retrieve zlib source from http://zlib.net/fossils to avoid deprecation issues going forward. See #1632 for details around this problem.","title":"Dependencies"},{"location":"CHANGELOG.html#added_8","text":"NodeSet#clone is now an alias for NodeSet#dup [ #1503 ] (Thanks, @stephankaag !) Allow Processing Instructions and Comments as children of a document root. [ #1033 ] (Thanks, @windwiny !) [MRI] PushParser#replace_entities and #replace_entities= will control whether entities are replaced or not. [ #1017 ] (Thanks, @spraints !) [MRI] SyntaxError#to_s now includes line number, column number, and log level if made available by the parser. [ #1304 , #1637 ] (Thanks, @spk and @ccarruitero !) [MRI] Cross-built Windows gems now support Ruby 2.4 [MRI] Support for frozen string literals. [ #1413 ] [MRI] Support for installing Nokogiri on a machine in FIPS-enabled mode [ #1544 ] [MRI] Vendored libraries are verified with SHA-256 hashes (formerly some MD5 hashes were used) [ #1544 ] [JRuby] (performance) remove unnecessary synchronization of class-cache [ #1563 ] (Thanks, @kares !) [JRuby] (performance) remove unnecessary cloning of objects in XPath searches [ #1563 ] (Thanks, @kares !) [JRuby] (performance) more performance improvements, particularly in XPath, Reader, XmlNode, and XmlNodeSet [ #1597 ] (Thanks, @kares !)","title":"Added"},{"location":"CHANGELOG.html#fixed_23","text":"HTML::SAX::Parser#parse_io now correctly parses HTML and not XML [ #1577 ] (Thanks for the test case, @gregors !) Support installation on systems with a lib64 site config. [ #1562 ] [MRI] on OpenBSD, do not require gcc if using system libraries [ #1515 ] (Thanks, @jeremyevans !) [MRI] XML::Attr.new checks type of Document arg to prevent segfaults. [ #1477 ] [MRI] Prefer xmlCharStrdup (and friends) to strdup (and friends), which can cause problems on some platforms. [ #1517 ] (Thanks, @jeremy !) [JRuby] correctly append a text node before another text node [ #1318 ] (Thanks, @jkraemer !) [JRuby] custom xpath functions returning an integer now work correctly [ #1595 ] (Thanks, @kares !) [JRuby] serializing ( #to_html , #to_s , et al) a document with explicit encoding now works correctly. [ #1281 , #1440 ] (Thanks, @kares !) [JRuby] XML::Reader now returns parse errors [ #1586 ] (Thanks, @kares !) [JRuby] Empty NodeSet s are now decorated properly. [ #1319 ] (Thanks, @kares !) [JRuby] Merged nodes no longer results in Java exceptions during XPath queries. [ #1320 ] (Thanks, @kares !)","title":"Fixed"},{"location":"CHANGELOG.html#172-2017-05-09","text":"","title":"1.7.2 / 2017-05-09"},{"location":"CHANGELOG.html#security_11","text":"[MRI] Upstream libxslt patches are applied to the vendored libxslt 1.1.29 which address CVE-2017-5029 and CVE-2016-4738. For more information: #1634 http://people.canonical.com/~ubuntu-security/cve/2017/CVE-2017-5029.html http://people.canonical.com/~ubuntu-security/cve/2016/CVE-2016-4738.html","title":"Security"},{"location":"CHANGELOG.html#171-2017-03-19","text":"","title":"1.7.1 / 2017-03-19"},{"location":"CHANGELOG.html#security_12","text":"[MRI] Upstream libxml2 patches are applied to the vendored libxml 2.9.4 which address CVE-2016-4658 and CVE-2016-5131. For more information: #1615 http://people.canonical.com/~ubuntu-security/cve/2016/CVE-2016-4658.html http://people.canonical.com/~ubuntu-security/cve/2016/CVE-2016-5131.html","title":"Security"},{"location":"CHANGELOG.html#1701-2017-01-04","text":"","title":"1.7.0.1 / 2017-01-04"},{"location":"CHANGELOG.html#fixed_24","text":"Fix OpenBSD support. ( #1569 ) (related to #1543 )","title":"Fixed"},{"location":"CHANGELOG.html#170-2016-12-26","text":"","title":"1.7.0 / 2016-12-26"},{"location":"CHANGELOG.html#added_9","text":"Remove deprecation warnings in Ruby 2.4.0 ( #1545 ) (Thanks, @matthewd !) Support egcc compiler on OpenBSD ( #1543 ) (Thanks, @frenkel and @knu !)","title":"Added"},{"location":"CHANGELOG.html#dependencies_11","text":"This release ends support for: Ruby 1.9.2, for which official support ended on 2014-07-31 Ruby 1.9.3, for which official support ended on 2015-02-23 Ruby 2.0.0, for which official support ended on 2016-02-24 MacRuby, which hasn't been actively supported since 2015-01-13 (see https://github.com/MacRuby/MacRuby/commit/f76b9d6e99c18236db617e8aceb12c27d593a483 )","title":"Dependencies"},{"location":"CHANGELOG.html#1681-2016-10-03","text":"","title":"1.6.8.1 / 2016-10-03"},{"location":"CHANGELOG.html#dependencies_12","text":"Removes required dependency on the pkg-config gem. This dependency was introduced in v1.6.8 and, because it's distributed under LGPL, was objectionable to many Nokogiri users ( #1488 , #1496 ). This version makes pkg-config an optional dependency. If it's installed, it's used; but otherwise Nokogiri will attempt to work around its absence.","title":"Dependencies"},{"location":"CHANGELOG.html#168-2016-06-06","text":"","title":"1.6.8 / 2016-06-06"},{"location":"CHANGELOG.html#security_13","text":"[MRI] Bundled libxml2 is upgraded to 2.9.4, which fixes many security issues. Many of these had previously been patched in the vendored libxml 2.9.2 in the 1.6.7.x branch, but some are newer. See these libxml2 email posts for more: https://mail.gnome.org/archives/xml/2015-November/msg00012.html https://mail.gnome.org/archives/xml/2016-May/msg00023.html For a more detailed analysis, you may care to read Canonical's take on these security issues: http://www.ubuntu.com/usn/usn-2994-1 [MRI] Bundled libxslt is upgraded to 1.1.29, which fixes a security issue as well as many long-known outstanding bugs, some features, some portability improvements, and general cleanup. See this libxslt email post for more: https://mail.gnome.org/archives/xslt/2016-May/msg00004.html","title":"Security"},{"location":"CHANGELOG.html#added_10","text":"Several changes were made to improve performance: [MRI] Simplify NodeSet#to_a with a minor speed-up. ( #1397 ) XML::Node#ancestors optimization. ( #1297 ) (Thanks, Bruno Sutic!) Use Symbol#to_proc where we weren't previously. ( #1296 ) (Thanks, Bruno Sutic!) XML::DTD#each uses implicit block calls. (Thanks, @glaucocustodio !) Fall back to the pkg-config gem if we're having trouble finding the system libxml2. This should help many FreeBSD users. ( #1417 ) Set document encoding appropriately even on blank document. ( #1043 ) (Thanks, @batter !)","title":"Added"},{"location":"CHANGELOG.html#fixed_25","text":"[JRuby] fix slow add_child ( #692 ) [JRuby] fix load errors when deploying to JRuby/Torquebox ( #1114 ) (Thanks, @atambo and @jvshahid !) [JRuby] fix NPE when inspecting nodes returned by NodeSet#drop ( #1042 ) (Thanks, @mkristian !) [JRuby] fix nil attriubte node's namespace in reader ( #1327 ) (Thanks, @codekitchen !) [JRuby] fix Nokogiri munging unicode characters that require more than 2 bytes ( #1113 ) (Thanks, @mkristian !) [JRuby] allow unlinking an unparented node ( #1112 , #1152 ) (Thanks, @esse !) [JRuby] allow Fragment parsing on a frozen string ( #444 , #1077 ) [JRuby] HTML style tags are no longer encoded ( #1316 ) (Thanks, @tbeauvais !) [MRI] fix assertion failure while accessing attribute node's namespace in reader ( #843 ) (Thanks, @2potatocakes !) [MRI] fix issue with GCing namespace nodes returned in an xpath query. ( #1155 ) [MRI] Ensure C strings are null-terminated. ( #1381 ) [MRI] Ensure Rubygems is loaded before using mini_portile2 at installation. ( #1393 , #1411 ) (Thanks, @JonRowe !) [MRI] Handling another edge case where the libxml-ruby gem's global callbacks were smashing the heap. ( #1426 ). (Thanks to @bbergstrom for providing an isolated test case!) [MRI] Ensure encodings are passed to Sax::Parser xmldecl callback. ( #844 ) [MRI] Ensure default ns prefix is applied correctly when reparenting nodes to another document. ( #391 ) (Thanks, @ylecuyer !) [MRI] Ensure Reader handles non-existent attributes as expected. ( #1254 ) (Thanks, @ccutrer !) [MRI] Cleanup around namespace handling when reparenting nodes. ( #1332 , #1333 , #1444 ) (Thanks, @cuttrer and @bradleybeddoes !) unescape special characters in CSS queries ( #1303 ) (Thanks, @twalpole !) consistently handle empty documents ( #1349 ) Update to mini_portile2 2.1.0 to address whitespace-handling during patching. ( #1402 ) Fix encoding of xml node namespaces. Work around issue installing Nokogiri on overlayfs (commonly used in Docker containers). ( #1370 , #1405 )","title":"Fixed"},{"location":"CHANGELOG.html#notes_1","text":"Removed legacy code remaining from Ruby 1.8.x support. Removed legacy code remaining from REE support. Removing hacky workarounds for bugs in some older versions of libxml2. Handling C strings in a forward-compatible manner, see https://github.com/ruby/ruby/blob/v2_2_0/NEWS#L319","title":"Notes"},{"location":"CHANGELOG.html#1672-2016-01-20","text":"This version pulls in several upstream patches to the vendored libxml2 and libxslt to address: CVE-2015-7499 Ubuntu classifies this as \"Priority: Low\", RedHat classifies this as \"Impact: Moderate\", and NIST classifies this as \"Severity: 5.0 (MEDIUM)\". MITRE record is https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-7499","title":"1.6.7.2 / 2016-01-20"},{"location":"CHANGELOG.html#1671-2015-12-16","text":"This version pulls in several upstream patches to the vendored libxml2 and libxslt to address: CVE-2015-5312 CVE-2015-7497 CVE-2015-7498 CVE-2015-7499 CVE-2015-7500 CVE-2015-8241 CVE-2015-8242 CVE-2015-8317 See also http://www.ubuntu.com/usn/usn-2834-1/","title":"1.6.7.1 / 2015-12-16"},{"location":"CHANGELOG.html#167-2015-11-29","text":"","title":"1.6.7 / 2015-11-29"},{"location":"CHANGELOG.html#added_11","text":"This version supports native builds on Windows using the RubyInstaller DevKit. It also supports Ruby 2.2.x on Windows, as well as making several other improvements to the installation process on various platforms.","title":"Added"},{"location":"CHANGELOG.html#security_14","text":"This version also includes the security patches already applied in v1.6.6.3 and v1.6.6.4 to the vendored libxml2 and libxslt source. See #1374 and #1376 for details.","title":"Security"},{"location":"CHANGELOG.html#added_12","text":"Cross-built gems now have a proper ruby version requirement. ( #1266 ) Ruby 2.2.x is supported on Windows. Native build is supported on Windows. [MRI] libxml2 and libxslt config.guess files brought up to date. ( #1326 ) (Thanks, [@hernan](https://github.com/hernan)-erasmo !) [JRuby] fix error in validating files with jruby ( #1355 , #1361 ) (Thanks, @twalpole !) [MRI, OSX] Patch to handle nonstandard location of iconv.h . ( #1206 , #1210 , #1218 , #1345 ) (Thanks, @neonichu !)","title":"Added"},{"location":"CHANGELOG.html#fixed_26","text":"[JRuby] reset the namespace cache when replacing the document's innerHtml ( #1265 ) (Thanks, @mkristian !) [JRuby] Document#parse should support IO objects that respond to #read . ( #1124 ) (Thanks, Jake Byman!) [MRI] Duplicate-id errors when setting the id attribute on HTML documents are now silenced. ( #1262 ) [JRuby] SAX parser cuts texts in pieces when square brackets exist. ( #1261 ) [JRuby] Namespaced attributes aren't removed by remove_attribute. ( #1299 )","title":"Fixed"},{"location":"CHANGELOG.html#1664-2015-11-19","text":"This version pulls in an upstream patch to the vendored libxml2 to address: unclosed comment uninitialized access issue ( #1376 ) This issue was assigned CVE-2015-8710 after the fact. See http://seclists.org/oss-sec/2015/q4/616 for details.","title":"1.6.6.4 / 2015-11-19"},{"location":"CHANGELOG.html#1663-2015-11-16","text":"This version pulls in several upstream patches to the vendored libxml2 and libxslt to address: CVE-2015-1819 CVE-2015-7941_1 CVE-2015-7941_2 CVE-2015-7942 CVE-2015-7942-2 CVE-2015-8035 CVE-2015-7995 See #1374 for details.","title":"1.6.6.3 / 2015-11-16"},{"location":"CHANGELOG.html#1662-2015-01-23","text":"","title":"1.6.6.2 / 2015-01-23"},{"location":"CHANGELOG.html#fixed_27","text":"Fixed installation issue affecting compiler arguments. ( #1230 )","title":"Fixed"},{"location":"CHANGELOG.html#1661-2015-01-22","text":"Note that 1.6.6.0 was not released.","title":"1.6.6.1 / 2015-01-22"},{"location":"CHANGELOG.html#added_13","text":"Unified Node and NodeSet implementations of #search , #xpath and #css . Added Node#lang and Node#lang= . bin/nokogiri passes the URI to parse() if an HTTP URL is given. bin/nokogiri now loads ~/.nokogirirc so user can define helper methods, etc. bin/nokogiri can be configured to use Pry instead of IRB by adding a couple of lines to ~/.nokogirirc. ( #1198 ) bin/nokogiri can better handle urls from STDIN (aiding use of xargs). ( #1065 ) JRuby 9K support.","title":"Added"},{"location":"CHANGELOG.html#fixed_28","text":"DocumentFragment#search now matches against root nodes. ( #1205 ) (MRI) More fixes related to handling libxml2 parse errors during DocumentFragment#dup . ( #1196 ) (JRuby) Builder now handles namespace hrefs properly when there is a default ns. ( #1039 ) (JRuby) Clear the XPath cache on attr removal. ( #1109 ) XML::Comment.new argument types are now consistent and safe (and documented) across MRI and JRuby. ( #1224 ) (MRI) Restoring support for Ruby 1.9.2 that was broken in v1.6.4.1 and v1.6.5. ( #1207 ) Check if zlib is available before building libxml2 . ( #1188 ) (JRuby) HtmlSaxPushParser now exists. ( #1147 ) (Thanks, Piotr Szmielew!)","title":"Fixed"},{"location":"CHANGELOG.html#165-2014-11-26","text":"","title":"1.6.5 / 2014-11-26"},{"location":"CHANGELOG.html#added_14","text":"Implement Slop#respond_to_missing? . ( #1176 ) Optimized the XPath query generated by an an+b CSS query.","title":"Added"},{"location":"CHANGELOG.html#fixed_29","text":"Capture non-parse errors from Document#dup in Document#errors . ( #1196 ) (JRuby) Document#canonicalize parameters are now consistent with MRI. ( #1189 )","title":"Fixed"},{"location":"CHANGELOG.html#1641-2014-11-05","text":"","title":"1.6.4.1 / 2014-11-05"},{"location":"CHANGELOG.html#fixed_30","text":"(MRI) Fix a bug where CFLAGS passed in are dropped. ( #1188 ) Fix a bug where CSS selector :nth(n) did not work. ( #1187 )","title":"Fixed"},{"location":"CHANGELOG.html#164-2014-11-04","text":"","title":"1.6.4 / 2014-11-04"},{"location":"CHANGELOG.html#added_15","text":"(MRI) Bundled Libxml2 is upgraded to 2.9.2. (MRI) nokogiri --version will include a list of applied patches. (MRI) Nokogiri no longer prints messages directly to TTY while building the extension. (MRI) Detect and help user fix a missing /usr/include/iconv.h on OS X. ( #1111 ) (MRI) Improve the iconv detection for building libxml2.","title":"Added"},{"location":"CHANGELOG.html#fixed_31","text":"(MRI) Fix DocumentFragment#element_children ( #1138 ). Fix a bug with CSS attribute selector without any prefix where \"foo [bar]\" was treated as \"foo[bar]\". ( #1174 )","title":"Fixed"},{"location":"CHANGELOG.html#1631-2014-07-21","text":"","title":"1.6.3.1 / 2014-07-21"},{"location":"CHANGELOG.html#fixed_32","text":"Addressing an Apple Macintosh installation problem for GCC users. #1130 (Thanks, @zenspider !)","title":"Fixed"},{"location":"CHANGELOG.html#163-2014-07-20","text":"","title":"1.6.3 / 2014-07-20"},{"location":"CHANGELOG.html#added_16","text":"Added Node#document? and Node#processing_instruction?","title":"Added"},{"location":"CHANGELOG.html#fixed_33","text":"[JRuby] Fix Ruby memory exhaustion vulnerability. #1087 (Thanks, @ocher ) [MRI] Fix segfault during GC when using libxml-ruby and nokogiri together in multi-threaded environment. #895 (Thanks, @ender672 !) Building on OSX 10.9 stock ruby 2.0.0 now works. #1101 (Thanks, @zenspider !) Node#parse now works again for HTML document nodes (broken in 1.6.2+). Processing instructions can now be added via Node#add_next_sibling .","title":"Fixed"},{"location":"CHANGELOG.html#1621-2014-05-13","text":"","title":"1.6.2.1 / 2014-05-13"},{"location":"CHANGELOG.html#fixed_34","text":"Fix statically-linked libxml2 installation when using universal builds of Ruby. #1104 Patching mini_portile to address the git dependency detailed in #1102 . Library load fix to address segfault reported on some systems. #1097","title":"Fixed"},{"location":"CHANGELOG.html#162-2014-05-12","text":"","title":"1.6.2 / 2014-05-12"},{"location":"CHANGELOG.html#security_15","text":"A set of security and bugfix patches have been backported from the libxml2 and libxslt repositories onto the version of 2.8.0 packaged with Nokogiri, including these notable security fixes: https://git.gnome.org/browse/libxml2/commit/?id=4629ee02ac649c27f9c0cf98ba017c6b5526070f CVE-2013-2877 https://git.gnome.org/browse/libxml2/commit/?id=e50ba8164eee06461c73cd8abb9b46aa0be81869 CVE-2014-0191 https://git.gnome.org/browse/libxml2/commit/?id=9cd1c3cfbd32655d60572c0a413e017260c854df It is recommended that you upgrade from 1.6.x to this version as soon as possible.","title":"Security"},{"location":"CHANGELOG.html#dependencies_13","text":"Now requires libxml >= 2.6.21 (was previously >= 2.6.17).","title":"Dependencies"},{"location":"CHANGELOG.html#added_17","text":"Add cross building of fat binary gems for 64-Bit Windows (x64-mingw32) and add support for native builds on Windows. #864 , #989 , #1072 (MRI) Alias CP932 to Windows-31J if iconv does not support Windows-31J. (MRI) Nokogiri now links packaged libraries statically. To disable static linking, pass --disable-static to extconf.rb . #923 (MRI) Fix a library path (LIBPATH) precedence problem caused by CRuby bug #9760 . (MRI) Nokogiri automatically deletes directories of packaged libraries only used during build. To keep them for debugging purposes, pass --disable-clean to extconf.rb . #952 (MRI) Nokogiri now builds libxml2 properly with iconv support on platforms where libiconv is installed outside the system default directories, such as FreeBSD. Add support for an-b in nth selectors. #886 (Thanks, Magnus Bergmark!) Add support for bare and multiple :not() functions in selectors. #887 (Thanks, Magnus Bergmark!) (MRI) Add an extconf.rb option --use-system-libraries, alternative to setting the environment variable NOKOGIRI_USE_SYSTEM_LIBRARIES. (MRI) Update packaged libraries: libxslt to 1.1.28, zlib to 1.2.8, and libiconv to 1.14, respectively. Nokogiri::HTML::Document#title= and #meta_encoding = now always add an element if not present, trying hard to find the best place to put it. Nokogiri::XML::DTD#html_dtd? and #html5_dtd? are added. Nokogiri::XML::Node#prepend_child is added. #664 Nokogiri::XML::SAX::ParserContext#recovery is added. #453 Fix documentation for XML::Node#namespace . #803 #802 (Thanks, Hoylen Sue) Allow Nokogiri::XML::Node#parse from unparented non-element nodes. #407","title":"Added"},{"location":"CHANGELOG.html#fixed_35","text":"Ensure :only-child pseudo class works within :not pseudo class. #858 (Thanks, Yamagishi Kazutoshi!) Don't call pkg_config when using bundled libraries in extconf.rb #931 (Thanks, Shota Fukumori!) Nokogiri.parse() does not mistake a non-HTML document like a RSS document as HTML document. #932 (Thanks, Yamagishi Kazutoshi!) (MRI) Perform a node type check before adding a child node to another. Previously adding a text node to another as a child could cause a SEGV. #1092 (JRuby) XSD validation crashes in Java version. #373 (JRuby) Document already has a root node error while using Builder. #646 (JRuby) c14n tests are all passing on JRuby. #226 Parsing empty documents raise SyntaxError in strict mode. #1005 (JRuby) Make xpath faster by caching the xpath context. #741 (JRuby) XML SAX push parser leaks memory on JRuby, but not on MRI. #998 (JRuby) Inconsistent behavior aliasing the default namespace. #940 (JRuby) Inconsistent behavior between parsing and adding namespaces. #943 (JRuby) Xpath returns inconsistent result set on cloned document with namespaces and attributes. #1034 (JRuby) Java-Implementation forgets element namespaces #902 (JRuby) JRuby-Nokogiri does not recognise attributes inside namespaces #1081 (JRuby) JRuby-Nokogiri has different comment node name #1080 (JRuby) JAXPExtensionsProvider / Java 7 / Secure Processing #1070","title":"Fixed"},{"location":"CHANGELOG.html#161-2013-12-14","text":"","title":"1.6.1 / 2013-12-14"},{"location":"CHANGELOG.html#fixed_36","text":"(JRuby) Fix out of memory bug when certain invalid documents are parsed. (JRuby) Fix regression of billion-laughs vulnerability. #586","title":"Fixed"},{"location":"CHANGELOG.html#160-2013-06-08","text":"This release was based on v1.5.10 and 1.6.0.rc1, and contains changes mentioned in both.","title":"1.6.0 / 2013-06-08"},{"location":"CHANGELOG.html#deprecations","text":"Remove pre 1.9 monitoring from Travis.","title":"Deprecations"},{"location":"CHANGELOG.html#160rc1-2013-04-14","text":"This release was based on v1.5.9, and so does not contain any fixes mentioned in the notes for v1.5.10.","title":"1.6.0.rc1 / 2013-04-14"},{"location":"CHANGELOG.html#notes_2","text":"mini_portile is now a runtime dependency Ruby 1.9.2 and higher now required","title":"Notes"},{"location":"CHANGELOG.html#added_18","text":"(MRI) Source code for libxml 2.8.0 and libxslt 1.2.26 is packaged with the gem. These libraries are compiled at gem install time unless the environment variable NOKOGIRI_USE_SYSTEM_LIBRARIES is set. VERSION_INFO (also nokogiri -v ) exposes whether libxml was compiled from packaged source, or the system library was used. (Windows) libxml upgraded to 2.8.0","title":"Added"},{"location":"CHANGELOG.html#dependencies_14","text":"Support for Ruby 1.8.7 and prior has been dropped","title":"Dependencies"},{"location":"CHANGELOG.html#1511-2013-12-14","text":"","title":"1.5.11 / 2013-12-14"},{"location":"CHANGELOG.html#fixed_37","text":"(JRuby) Fix out of memory bug when certain invalid documents are parsed. (JRuby) Fix regression of billion-laughs vulnerability. #586","title":"Fixed"},{"location":"CHANGELOG.html#1510-2013-06-07","text":"","title":"1.5.10 / 2013-06-07"},{"location":"CHANGELOG.html#fixed_38","text":"(JRuby) Fix \"null document\" error when parsing an empty IO in jruby 1.7.3. #883 (JRuby) Fix schema validation when XSD has DOCTYPE set to DTD. #912 (Thanks, Patrick Cheng!) (MRI) Fix segfault when there is no default subelement for an HTML node. #917","title":"Fixed"},{"location":"CHANGELOG.html#notes_3","text":"Use rb_ary_entry instead of RARRAY_PTR (you know, for Rubinius). #877 (Thanks, Dirkjan Bussink!) Fix TypeError when running tests. #900 (Thanks, C\u00e9dric Boutillier!)","title":"Notes"},{"location":"CHANGELOG.html#159-2013-03-21","text":"","title":"1.5.9 / 2013-03-21"},{"location":"CHANGELOG.html#fixed_39","text":"Ensure that prefixed attributes are properly namespaced when reparented. #869 Fix for inconsistent namespaced attribute access for SVG nested in HTML. #861 (MRI) Fixed a memory leak in fragment parsing if nodes are not all subsequently reparented. #856","title":"Fixed"},{"location":"CHANGELOG.html#158-2013-03-19","text":"","title":"1.5.8 / 2013-03-19"},{"location":"CHANGELOG.html#fixed_40","text":"(JRuby) Fix EmptyStackException thrown by elements with xlink:href attributes and no base_uri #534 , #805 . (Thanks, Patrick Quinn and Brian Hoffman!) Fixes duplicate attributes issue introduced in 1.5.7. #865 Allow use of a prefixed namespace on a root node using Nokogiri::XML::Builder #868","title":"Fixed"},{"location":"CHANGELOG.html#157-2013-03-18","text":"","title":"1.5.7 / 2013-03-18"},{"location":"CHANGELOG.html#added_19","text":"Windows support for Ruby 2.0.","title":"Added"},{"location":"CHANGELOG.html#fixed_41","text":"SAX::Parser.parse_io throw an error when used with lower case encoding. #828 (JRuby) Java Nokogiri is finally green (passes all tests) under 1.8 and 1.9 mode. High five everyone. #798 , #705 (JRuby) Nokogiri::XML::Reader broken (as a pull parser) on jruby - reads the whole XML document. #831 (JRuby) JRuby hangs parsing \"&\". #837 (JRuby) JRuby NPE parsing an invalid XML instruction. #838 (JRuby) Node#content= incompatibility. #839 (JRuby) to_xhtml doesn't print the last slash for self-closing tags in JRuby. #834 (JRuby) Adding an EntityReference after a Text node mangles the entity in JRuby. #835 (JRuby) JRuby version inconsistency: nil for empty attributes. #818 CSS queries for classes (e.g., \".foo\") now treat all whitespace identically. #854 Namespace behavior cleaned up and made consistent between JRuby and MRI. #846 , #801 (Thanks, Michael Klein!) (MRI) SAX parser handles empty processing instructions. #845","title":"Fixed"},{"location":"CHANGELOG.html#156-2012-12-19","text":"","title":"1.5.6 / 2012-12-19"},{"location":"CHANGELOG.html#added_20","text":"Improved performance of XML::Document#collect_namespaces . #761 (Thanks, Juergen Mangler!) New callback SAX::Document#processing_instruction (Thanks, Kitaiti Makoto!) Node#native_content= allows setting unescaped node content. #768 XPath lookup with namespaces supports symbol keys. #729 (Thanks, Ben Langfeld.) XML::Node#[]= stringifies values. #729 (Thanks, Ben Langfeld.) bin/nokogiri will process a document from $stdin bin/nokogiri -e will execute a program from the command line (JRuby) bin/nokogiri --version will print the Xerces and NekoHTML versions.","title":"Added"},{"location":"CHANGELOG.html#fixed_42","text":"Nokogiri now detects XSLT transform errors. #731 (Thanks, Justin Fitzsimmons!) Don't throw an Error when trying to replace top-level text node in DocumentFragment. #775 Raise an ArgumentError if an invalid encoding is passed to the SAX parser. #756 (Thanks, Bradley Schaefer!) Prefixed element inconsistency between CRuby and JRuby. #712 (JRuby) space prior to xml preamble causes nokogiri to fail parsing. (fixed along with #748 ) #790 (JRuby) Fixed the bug Nokogiri::XML::Node#content inconsistency between Java and C. #794 , #797 (JRuby) raises INVALID_CHARACTER_ERR exception when EntityReference name starts with '#'. #719 (JRuby) doesn't coerce namespaces out of strings on a direct subclass of Node. #715 (JRuby) Node#content now renders newlines properly. #737 (Thanks, Piotr Szmielew!) (JRuby) Unknown namespace are ignore when the recover option is used. #748 (JRuby) XPath queries for namespaces should not throw exceptions when called twice in a row. #764 (JRuby) More consistent (with libxml2) whitespace formatting when emitting XML. #771 (JRuby) namespaced attributes broken when appending raw xml to builder. #770 (JRuby) Nokogiri::XML::Document#wrap raises undefined method `length' for nil:NilClass when trying to << to a node. #781 (JRuby) Fixed \"bad file descriptor\" bug when closing open file descriptors. #495 (JRuby) JRuby/CRuby incompatibility for attribute decorators. #785 (JRuby) Issues parsing valid XML with no internal subset in the DTD. #547 , #811 (JRuby) Issues parsing valid node content when it contains colons. #728 (JRuby) Correctly parse the doc type of html documents. #733 (JRuby) Include dtd in the xml output when a builder is used with create_internal_subset. #751 (JRuby) builder requires textwrappers for valid utf8 in jruby, not in mri. #784","title":"Fixed"},{"location":"CHANGELOG.html#155-2012-06-24","text":"","title":"1.5.5 / 2012-06-24"},{"location":"CHANGELOG.html#added_21","text":"Much-improved support for JRuby in 1.9 mode! Yay!","title":"Added"},{"location":"CHANGELOG.html#fixed_43","text":"Regression in JRuby Nokogiri add_previous_sibling (1.5.0 -> 1.5.1) #691 (Thanks, John Shahid!) JRuby unable to create HTML doc if URL arg provided #674 (Thanks, John Shahid!) JRuby raises NullPointerException when given HTML document is nil or empty string. #699 JRuby 1.9 error, uncaught throw 'encoding_found', has been fixed. #673 Invalid encoding returned in JRuby with US-ASCII. #583 XmlSaxPushParser raises IndexOutOfBoundsException when over 512 characters are given. #567 , #615 When xpath evaluation returns empty NodeSet , decorating NodeSet 's base document raises exception. #514 JRuby raises exception when xpath with namespace is specified. pull request #681 (Thanks, Piotr Szmielew) JRuby renders nodes without their namespace when subclassing Node. #695 JRuby raises NAMESPACE_ERR (org.w3c.dom.DOMException) while instantiating RDF::RDFXML::Writer . #683 JRuby is not able to use namespaces in xpath. #493 JRuby's Entity resolving should be consistent with C-Nokogiri #704 , #647 , #703","title":"Fixed"},{"location":"CHANGELOG.html#154-2012-06-12","text":"","title":"1.5.4 / 2012-06-12"},{"location":"CHANGELOG.html#added_22","text":"The \"nokogiri\" script now has more verbose output when passed the --rng option. #675 (Thanks, Dan Radez!) Build support on hardened Debian systems that use -Werror=format-security . #680 . Better build support for systems with pkg-config. #584 Better build support for systems with multiple iconv installations.","title":"Added"},{"location":"CHANGELOG.html#fixed_44","text":"Segmentation fault when creating a comment node for a DocumentFragment. #677 , #678 . Treat '.' as xpath in at() and search() . #690","title":"Fixed"},{"location":"CHANGELOG.html#security_16","text":"(MRI) Default parse options for XML documents were changed to not make network connections during document parsing, to avoid XXE vulnerability. #693 To re-enable this behavior, the configuration method nononet may be called, like this: Nokogiri :: XML :: Document . parse ( xml ) { | config | config . nononet } Insert your own joke about double-negatives here.","title":"Security"},{"location":"CHANGELOG.html#153-2012-06-01","text":"","title":"1.5.3 / 2012-06-01"},{"location":"CHANGELOG.html#added_23","text":"Support for \"prefixless\" CSS selectors ~, > and + like jQuery supports. #621 , #623 . (Thanks, David Lee!) Attempting to improve installation on homebrew 0.9 (with regards to iconv). Isn't package management convenient?","title":"Added"},{"location":"CHANGELOG.html#fixed_45","text":"Custom xpath functions with empty nodeset arguments cause a segfault. #634 . Nokogiri::XML::Node#css now works for XML documents with default namespaces when the rule contains attribute selector without namespace. Fixed marshalling bugs around how arguments are passed to (and returned from) XSLT custom xpath functions. #640 . Nokogiri::XML::Reader#outer_xml is broken in JRuby #617 Nokogiri::XML::Attribute on JRuby returns a nil namespace #647 Nokogiri::XML::Node#namespace= cannot set a namespace without a prefix on JRuby #648 (JRuby) 1.9 mode causes dead lock while running rake #571 HTML::Document#meta_encoding does not raise exception on docs with malformed content-type. #655 Fixing segfault related to unsupported encodings in in-context parsing on 1.8.7. #643 (JRuby) Concurrency issue in XPath parsing. #682","title":"Fixed"},{"location":"CHANGELOG.html#152-2012-03-09","text":"Repackaging of 1.5.1 with a gemspec that is compatible with older Rubies. #631 , #632 .","title":"1.5.2 / 2012-03-09"},{"location":"CHANGELOG.html#151-2012-03-09","text":"","title":"1.5.1 / 2012-03-09"},{"location":"CHANGELOG.html#added_24","text":"XML::Builder#comment allows creation of comment nodes. CSS searches now support namespaced attributes. #593 Java integration feature is added. Now, XML::Document.wrap and XML::Document#to_java methods are available. RelaxNG validator support in the nokogiri cli utility. #591 (thanks, Dan Radez!)","title":"Added"},{"location":"CHANGELOG.html#fixed_46","text":"Fix many memory leaks and segfault opportunities. Thanks, Tim Elliott! extconf searches homebrew paths if homebrew is installed. Inconsistent behavior of Nokogiri 1.5.0 Java #620 Inheriting from Nokogiri::XML::Node on JRuby (1.6.4/5) fails #560 XML::Attr nodes are not allowed to be added as node children, so an exception is raised. #558 No longer defensively \"pickle\" adjacent text nodes on Node#add_next_sibling and Node#add_previous_sibling calls. #595 . Java version inconsistency: it returns nil for empty attributes #589 to_xhtml incorrectly generates <p /></p> when tag is empty #557 Document#add_child now accepts a Node , NodeSet , DocumentFragment , or String . #546 . Document#create_element now recognizes namespaces containing non-word characters (like \"SOAP-ENV\"). This is mostly relevant to users of Builder, which calls Document#create_element for nearly everything. #531 . File encoding broken in 1.5.0 / jruby / windows #529 Java version does not return namespace defs as attrs for ::HTML #542 Bad file descriptor with Nokogiri 1.5.0 #495 remove_namespace! doesn't work in pure java version #492 The Nokogiri Java native build throws a null pointer exception when ActiveSupport's .blank? method is called directly on a parsed object. #489 1.5.0 Not using correct character encoding #488 Raw XML string in XML Builder broken on JRuby #486 Nokogiri 1.5.0 XML generation broken on JRuby #484 Do not allow multiple root nodes. #550 Fixes for custom XPath functions. #605 , #606 (thanks, Juan Wajnerman!) Node#to_xml does not override :save_with if it is provided. #505 Node#set is a private method (JRuby). #564 (thanks, Nick Sieger!) C14n cleanup and Node#canonicalize (thanks, Ivan Pirlik!) #563","title":"Fixed"},{"location":"CHANGELOG.html#150-2011-07-01","text":"","title":"1.5.0 / 2011-07-01"},{"location":"CHANGELOG.html#notes_4","text":"See changelog from 1.4.7","title":"Notes"},{"location":"CHANGELOG.html#added_25","text":"extracted sets of Node::SaveOptions into Node::SaveOptions::DEFAULT_{X,H,XH}TML (refactor)","title":"Added"},{"location":"CHANGELOG.html#fixed_47","text":"default output of XML on JRuby is no longer formatted due to inconsistent whitespace handling. #415 (JRuby) making empty NodeSet s with null nodes member safe to operate on. #443 Fix a bug in advanced encoding detection that leads to partially duplicated document when parsing an HTML file with unknown encoding. Add support for <meta charset=\"...\"> .","title":"Fixed"},{"location":"CHANGELOG.html#150-beta3-2010-12-02","text":"","title":"1.5.0 beta3 / 2010-12-02"},{"location":"CHANGELOG.html#notes_5","text":"JRuby performance tuning See changelog from 1.4.4","title":"Notes"},{"location":"CHANGELOG.html#fixed_48","text":"Node#inner_text no longer returns nil. (JRuby) #264","title":"Fixed"},{"location":"CHANGELOG.html#150-beta2-2010-07-30","text":"","title":"1.5.0 beta2 / 2010-07-30"},{"location":"CHANGELOG.html#notes_6","text":"See changelog from 1.4.3","title":"Notes"},{"location":"CHANGELOG.html#150-beta1-2010-05-22","text":"","title":"1.5.0 beta1 / 2010-05-22"},{"location":"CHANGELOG.html#notes_7","text":"JRuby support is provided by a new pure-java backend.","title":"Notes"},{"location":"CHANGELOG.html#dependencies_15","text":"Ruby 1.8.6 is deprecated. Nokogiri will install, but official support is ended. LibXML 2.6.16 and earlier are deprecated. Nokogiri will refuse to install.","title":"Dependencies"},{"location":"CHANGELOG.html#removed_1","text":"FFI support is removed.","title":"Removed"},{"location":"CHANGELOG.html#147-2011-07-01","text":"","title":"1.4.7 / 2011-07-01"},{"location":"CHANGELOG.html#fixed_49","text":"Fix a bug in advanced encoding detection that leads to partially duplicated document when parsing an HTML file with unknown encoding. Thanks, Timothy Elliott ( @ender672 )! #478","title":"Fixed"},{"location":"CHANGELOG.html#146-2011-06-19","text":"","title":"1.4.6 / 2011-06-19"},{"location":"CHANGELOG.html#notes_8","text":"This version is functionally identical to 1.4.5. Ruby 1.8.6 support has been restored.","title":"Notes"},{"location":"CHANGELOG.html#145-2011-05-19","text":"","title":"1.4.5 / 2011-05-19"},{"location":"CHANGELOG.html#added_26","text":"Nokogiri::HTML::Document#title accessor gets and sets the document title. extracted sets of Node::SaveOptions into Node::SaveOptions::DEFAULT_{X,H,XH}TML (refactor) Raise an exception if a string is passed to Nokogiri::XML::Schema#validate . #406","title":"Added"},{"location":"CHANGELOG.html#fixed_50","text":"Node#serialize -and-friends now accepts a SaveOption object as the, erm, save object. Nokogiri::CSS::Parser has-a Nokogiri::CSS::Tokenizer (JRUBY+FFI only) Weak references are now threadsafe. #355 Make direct start_element() callback (currently used for HTML::SAX::Parser ) pass attributes in assoc array, just as emulated start_element() callback does. rel. #356 HTML::SAX::Parser should call back a block given to parse*() if any, just as XML::SAX::Parser does. Add further encoding detection to HTML parser that libxml2 does not do. Document#remove_namespaces! now handles attributes with namespaces. #396 XSLT::Stylesheet#transform no longer segfaults when handed a non- XML::Document . #452 XML::Reader no longer segfaults when under GC pressure. #439","title":"Fixed"},{"location":"CHANGELOG.html#144-2010-11-15","text":"","title":"1.4.4 / 2010-11-15"},{"location":"CHANGELOG.html#added_27","text":"XML::Node#children= sets the node's inner html (much like #inner_html=), but returns the reparent node(s). XSLT supports function extensions. #336 XPath bind parameter substitution. #329 XML::Reader node type constants. #369 SAX Parser context provides line and column information","title":"Added"},{"location":"CHANGELOG.html#fixed_51","text":"XML::DTD#attributes returns an empty hash instead of nil when there are no attributes. XML::DTD#{keys,each} now work as expected. #324 {XML,HTML}::DocumentFragment.{new,parse} no longer strip leading and trailing whitespace. #319 XML::Node#{add_child,add_previous_sibling,add_next_sibling,replace} return a NodeSet when passed a string. Unclosed tags parsed more robustly in fragments. #315 XML::Node#{replace,add_previous_sibling,add_next_sibling} edge cases fixed related to libxml's text node merging. #308 Fixed a segfault when GC occurs during xpath handler argument marshalling. #345 Added hack to Slop decorator to work with previously defined methods. #330 Fix a memory leak when duplicating child nodes. #353 Fixed off-by-one bug with nth-last-{child,of-type} CSS selectors when NOT using an+b notation. #354 Fixed passing of non-namespace attributes to SAX::Document#start_element . #356 Workaround for libxml2 in-context parsing bug. #362 Fixed NodeSet#wrap on nodes within a fragment. #331","title":"Fixed"},{"location":"CHANGELOG.html#143-2010-07-28","text":"","title":"1.4.3 / 2010-07-28"},{"location":"CHANGELOG.html#added_28","text":"XML::Reader#empty_element? returns true for empty elements. #262 Node#remove_namespaces! now removes namespace declarations as well. #294 NodeSet#at_xpath , NodeSet#at_css and NodeSet#> do what the corresponding methods of Node do.","title":"Added"},{"location":"CHANGELOG.html#fixed_52","text":"XML::NodeSet#{include?,delete,push} accept an XML::Namespace XML::Document#parse added for parsing in the context of a document XML::DocumentFragment#inner_html= works with contextual parsing! #298 , #281 lib/nokogiri/css/parser.y Combined CSS functions + pseudo selectors fixed Reparenting text nodes is safe, even when the operation frees adjacent merged nodes. #283 Fixed libxml2 versionitis issue with xmlFirstElementChild et al. #303 XML::Attr#add_namespace now works as expected. #252 HTML::DocumentFragment uses the string's encoding. #305 Fix the CSS3 selector translation rule for the general sibling combinator (a.k.a. preceding selector) that incorrectly converted \"E ~ F G\" to \"//F//G[preceding-sibling::E]\".","title":"Fixed"},{"location":"CHANGELOG.html#142-2010-05-22","text":"","title":"1.4.2 / 2010-05-22"},{"location":"CHANGELOG.html#added_29","text":"XML::Node#parse will parse XML or HTML fragments with respect to the context node. XML::Node#namespaces returns all namespaces defined in the node and all ancestor nodes (previously did not return ancestors' namespace definitions). Added Enumerable to XML::Node Nokogiri::XML::Schema#validate now uses xmlSchemaValidateFile if a filename is passed, which is faster and more memory-efficient. GH #219 XML::Document#create_entity will create new EntityDecl objects. GH #174 JRuby FFI implementation no longer uses ObjectSpace._id2ref , instead using Charles Nutter's rocking Weakling gem. Nokogiri::XML::Node#first_element_child fetch the first child node that is an ELEMENT node. Nokogiri::XML::Node#last_element_child fetch the last child node that is an ELEMENT node. Nokogiri::XML::Node#elements fetch all children nodes that are ELEMENT nodes. Nokogiri::XML::Node#add_child , #add_previous_sibling , #before , #add_next_sibling , #after , #inner_html , #swap and #replace all now accept a Node , DocumentFragment , NodeSet , or a string containing markup. Node#fragment? indicates whether a node is a DocumentFragment .","title":"Added"},{"location":"CHANGELOG.html#fixed_53","text":"XML::NodeSet is now always decorated (if the document has decorators). GH #198 XML::NodeSet#slice gracefully handles offset+length larger than the set length. GH #200 XML::Node#content= safely unlinks previous content. GH #203 XML::Node#namespace= takes nil as a parameter XML::Node#xpath returns things other than NodeSet objects. GH #208 XSLT::StyleSheet#transform accepts hashes for parameters. GH #223 Psuedo selectors inside not() work. GH #205 XML::Builder doesn't break when nodes are unlinked. Thanks to vihai! GH #228 Encoding can be forced on the SAX parser. Thanks Eugene Pimenov! GH #204 XML::DocumentFragment uses XML::Node#parse to determine children. Fixed a memory leak in xml reader. Thanks sdor! GH #244 Node#replace returns the new child node as claimed in the RDoc. Previously returned +self+.","title":"Fixed"},{"location":"CHANGELOG.html#notes_9","text":"The Windows gems now bundle DLLs for libxml 2.7.6 and libxslt 1.1.26. Prior to this release, libxml 2.7.3 and libxslt 1.1.24 were bundled.","title":"Notes"},{"location":"CHANGELOG.html#141-2009-12-10","text":"","title":"1.4.1 / 2009-12-10"},{"location":"CHANGELOG.html#added_30","text":"Added Nokogiri::LIBXML_ICONV_ENABLED Alias Node#[] to Node#attr XML::Node#next_element added XML::Node#> added for searching a nodes immediate children XML::NodeSet#reverse added Added fragment support to Node#add_child , Node#add_next_sibling , Node#add_previous_sibling , and Node#replace . XML::Node#previous_element implemented Rubinius support Ths CSS selector engine now supports :has() XML::NodeSet#filter() was added XML::Node.next= and .previous= are aliases for add_next_sibling and add_previous_sibling. GH #183","title":"Added"},{"location":"CHANGELOG.html#fixed_54","text":"XML fragments with namespaces do not raise an exception (regression in 1.4.0) Node#matches? works in nodes contained by a DocumentFragment . GH #158 Document should not define add_namespace() method. GH #169 XPath queries returning namespace declarations do not segfault. Node#replace works with nodes from different documents. GH #162 Adding XML::Document#collect_namespaces Fixed bugs in the SOAP4R adapter Fixed bug in XML::Node#next_element for certain edge cases Fixed load path issue with JRuby under Windows. GH #160 . XSLT#apply_to will honor the \"output method\". Thanks richardlehane! Fragments containing leading text nodes with newlines now parse properly. GH #178 .","title":"Fixed"},{"location":"CHANGELOG.html#140-2009-10-30","text":"","title":"1.4.0 / 2009-10-30"},{"location":"CHANGELOG.html#added_31","text":"Node#at_xpath returns the first element of the NodeSet matching the XPath expression. Node#at_css returns the first element of the NodeSet matching the CSS selector. NodeSet#| for unions GH #119 (Thanks Serabe!) NodeSet#inspect makes prettier output Node#inspect implemented for more rubyish document inspecting Added XML::DTD#external_id Added XML::DTD#system_id Added XML::ElementContent for DTD Element content validity Better namespace declaration support in Nokogiri::XML::Builder Added XML::Node#external_subset Added XML::Node#create_external_subset Added XML::Node#create_internal_subset XML Builder can append raw strings (GH #141 , patch from dudleyf) XML::SAX::ParserContext added XML::Document#remove_namespaces! for the namespace-impaired","title":"Added"},{"location":"CHANGELOG.html#fixed_55","text":"returns nil when HTML documents do not declare a meta encoding tag. GH #115 Uses RbConfig::CONFIG['host_os'] to adjust ENV['PATH'] GH #113 NodeSet#search is more efficient GH #119 (Thanks Serabe!) NodeSet#xpath handles custom xpath functions Fixing a SEGV when XML::Reader gets attributes for current node Node#inner_html takes the same arguments as Node#to_html GH #117 DocumentFragment#css delegates to it's child nodes GH #123 NodeSet#[] works with slices larger than NodeSet#length GH #131 Reparented nodes maintain their namespace. GH #134 Fixed SEGV when adding an XML::Document to NodeSet XML::SyntaxError can be duplicated. GH #148","title":"Fixed"},{"location":"CHANGELOG.html#removed_2","text":"Hpricot compatibility layer removed","title":"Removed"},{"location":"CHANGELOG.html#133-2009-07-26","text":"","title":"1.3.3 / 2009-07-26"},{"location":"CHANGELOG.html#added_32","text":"NodeSet#children returns all children of all nodes","title":"Added"},{"location":"CHANGELOG.html#fixed_56","text":"Override libxml-ruby's global error handler ParseOption#strict fixed Fixed a segfault when sending an empty string to Node#inner_html= GH #88 String encoding is now set to UTF-8 in Ruby 1.9 Fixed a segfault when moving root nodes between documents. GH #91 Fixed an O(n) penalty on node creation. GH #101 Allowing XML documents to be output as HTML documents","title":"Fixed"},{"location":"CHANGELOG.html#deprecations_1","text":"Hpricot compatibility layer will be removed in 1.4.0","title":"Deprecations"},{"location":"CHANGELOG.html#132-2009-06-22","text":"","title":"1.3.2 / 2009-06-22"},{"location":"CHANGELOG.html#added_33","text":"Nokogiri::XML::DTD#validate will validate your document","title":"Added"},{"location":"CHANGELOG.html#fixed_57","text":"Nokogiri::XML::NodeSet#search will search top level nodes. GH #73 Removed namespace related methods from Nokogiri::XML::Document Fixed a segfault when a namespace was added twice Made nokogiri work with Snow Leopard GH #79 Mailing list has moved to: http://groups.google.com/group/nokogiri-talk HTML fragments now correctly handle comments and CDATA blocks. GH #78 Nokogiri::XML::Document#clone is now an alias of dup","title":"Fixed"},{"location":"CHANGELOG.html#deprecations_2","text":"Nokogiri::XML::SAX::Document#start_element_ns is deprecated, please switch to Nokogiri::XML::SAX::Document#start_element_namespace Nokogiri::XML::SAX::Document#end_element_ns is deprecated, please switch to Nokogiri::XML::SAX::Document#end_element_namespace","title":"Deprecations"},{"location":"CHANGELOG.html#131-2009-06-07","text":"","title":"1.3.1 / 2009-06-07"},{"location":"CHANGELOG.html#fixed_58","text":"extconf.rb checks for optional RelaxNG and Schema functions Namespace nodes are added to the Document node cache","title":"Fixed"},{"location":"CHANGELOG.html#130-2009-05-30","text":"","title":"1.3.0 / 2009-05-30"},{"location":"CHANGELOG.html#added_34","text":"Builder changes scope based on block arity Builder supports methods ending in underscore similar to tagz Nokogiri::XML::Node#<=> compares nodes based on Document position Nokogiri::XML::Node#matches? returns true if Node can be found with given selector. Nokogiri::XML::Node#ancestors now returns an Nokogiri::XML::NodeSet Nokogiri::XML::Node#ancestors will match parents against optional selector Nokogiri::HTML::Document#meta_encoding for getting the meta encoding Nokogiri::HTML::Document#meta_encoding= for setting the meta encoding Nokogiri::XML::Document#encoding= to set the document encoding Nokogiri::XML::Schema for validating documents against XSD schema Nokogiri::XML::RelaxNG for validating documents against RelaxNG schema Nokogiri::HTML::ElementDescription for fetching HTML element descriptions Nokogiri::XML::Node#description to fetch the node description Nokogiri::XML::Node#accept implements Visitor pattern bin/nokogiri for easily examining documents (Thanks Yutaka HARA!) Nokogiri::XML::NodeSet now supports more Array and Enumerable operators: index, delete, slice, - (difference), + (concatenation), & (intersection), push, pop, shift, == Nokogiri.XML , Nokogiri.HTML take blocks that receive Nokogiri::XML::ParseOptions objects Nokogiri::XML::Node#namespace returns a Nokogiri::XML::Namespace Nokogiri::XML::Node#namespace= for setting a node's namespace Nokogiri::XML::DocumentFragment and Nokogiri::HTML::DocumentFragment have a sensible API and a more robust implementation. JRuby 1.3.0 support via FFI.","title":"Added"},{"location":"CHANGELOG.html#fixed_59","text":"Fixed a problem with nil passed to CDATA constructor Fragment method deals with regular expression characters (Thanks Joel!) LH #73 Fixing builder scope issues LH #61 , LH #74 , LH #70 Fixed a problem when adding a child could remove the child namespace LH #78 Fixed bug with unlinking a node then reparenting it. (GH #22 ) Fixed failure to catch errors during XSLT parsing (GH #32 ) Fixed a bug with attribute conditions in CSS selectors (GH #36 ) Fixed intolerance of HTML attributes without values in Node#{before/after/inner_html=} . (GH #35 )","title":"Fixed"},{"location":"CHANGELOG.html#123-2009-03-22","text":"","title":"1.2.3 / 2009-03-22"},{"location":"CHANGELOG.html#fixed_60","text":"Fixing bug where a node is passed in to Node#new Namespace should be assigned on DocumentFragment creation. LH #66 Nokogiri::XML::NodeSet#dup works GH #10 Nokogiri::HTML returns an empty Document when given a blank string GH #11 Adding a child will remove duplicate namespace declarations LH #67 Builder methods take a hash as a second argument","title":"Fixed"},{"location":"CHANGELOG.html#122-2009-03-14","text":"","title":"1.2.2 / 2009-03-14"},{"location":"CHANGELOG.html#added_35","text":"Nokogiri may be used with soap4r. See XSD::XMLParser::Nokogiri Nokogiri::XML::Node#inner_html= to set the inner html for a node Nokogiri builder interface improvements Nokogiri::XML::Node#swap swaps html for current node (LH #50 )","title":"Added"},{"location":"CHANGELOG.html#fixed_61","text":"Fixed a tag nesting problem in the Builder API (LH #41 ) Nokogiri::HTML.fragment will properly handle text only nodes (LH #43 ) Nokogiri::XML::Node#before will prepend text nodes (LH #44 ) Nokogiri::XML::Node#after will append text nodes Nokogiri::XML::Node#search automatically registers root namespaces (LH #42 ) Nokogiri::XML::NodeSet#search automatically registers namespaces Nokogiri::HTML::NamedCharacters delegates to libxml2 Nokogiri::XML::Node#[] can take a symbol (LH #48 ) vasprintf for windows updated. Thanks Geoffroy Couprie! Nokogiri::XML::Node#[]= should not encode entities (LH #55 ) Namespaces should be copied to reparented nodes (LH #56 ) Nokogiri uses encoding set on the string for default in Ruby 1.9 Document#dup should create a new document of the same type (LH #59 ) Document should not have a parent method (LH #64 )","title":"Fixed"},{"location":"CHANGELOG.html#121-2009-02-23","text":"","title":"1.2.1 / 2009-02-23"},{"location":"CHANGELOG.html#fixed_62","text":"Fixed a CSS selector space bug Fixed Ruby 1.9 String Encoding (Thanks \u89d2\u8c37\u3055\u3093\uff01)","title":"Fixed"},{"location":"CHANGELOG.html#120-2009-02-22","text":"","title":"1.2.0 / 2009-02-22"},{"location":"CHANGELOG.html#added_36","text":"CSS search now supports CSS3 namespace queries Namespaces on the root node are automatically registered CSS queries use the default namespace Nokogiri::XML::Document#encoding get encoding used for this document Nokogiri::XML::Document#url get the document url Nokogiri::XML::Node#add_namespace add a namespace to the node LH #38 Nokogiri::XML::Node#each iterate over attribute name, value pairs Nokogiri::XML::Node#keys get all attribute names Nokogiri::XML::Node#line get the line number for a node (Thanks Dirkjan Bussink!) Nokogiri::XML::Node#serialize now takes an optional encoding parameter Nokogiri::XML::Node#to_html , to_xml, and to_xhtml take an optional encoding Nokogiri::XML::Node#to_str Nokogiri::XML::Node#to_xhtml to produce XHTML documents Nokogiri::XML::Node#values get all attribute values Nokogiri::XML::Node#write_to writes the node to an IO object with optional encoding Nokogiri::XML::ProcessingInstruction.new Nokogiri::XML::SAX::PushParser for all your push parsing needs.","title":"Added"},{"location":"CHANGELOG.html#fixed_63","text":"Fixed Nokogiri::XML::Document#dup Fixed header detection. Thanks rubikitch! Fixed a problem where invalid CSS would cause the parser to hang","title":"Fixed"},{"location":"CHANGELOG.html#deprecations_3","text":"Nokogiri::XML::Node.new_from_str will be deprecated in 1.3.0","title":"Deprecations"},{"location":"CHANGELOG.html#changed_3","text":"Nokogiri::HTML.fragment now returns an XML::DocumentFragment (LH #32 )","title":"Changed"},{"location":"CHANGELOG.html#111","text":"","title":"1.1.1"},{"location":"CHANGELOG.html#added_37","text":"Added XML::Node#elem? Added XML::Node#attribute_nodes Added XML::Attr XML::Node#delete added. XML::NodeSet#inner_html added.","title":"Added"},{"location":"CHANGELOG.html#fixed_64","text":"Not including an HTML entity for \\r for HTML nodes. Removed CSS::SelectorHandler and XML::XPathHandler XML::Node#attributes returns an Attr node for the value. XML::NodeSet implements to_xml","title":"Fixed"},{"location":"CHANGELOG.html#110","text":"","title":"1.1.0"},{"location":"CHANGELOG.html#added_38","text":"Custom XPath functions are now supported. See Nokogiri::XML::Node#xpath Custom CSS pseudo classes are now supported. See Nokogiri::XML::Node#css Nokogiri::XML::Node#<< will add a child to the current node","title":"Added"},{"location":"CHANGELOG.html#fixed_65","text":"Mutex lock on CSS cache access Fixed build problems with GCC 3.3.5 XML::Node#to_xml now takes an indentation argument XML::Node#dup takes an optional depth argument XML::Node#add_previous_sibling returns new sibling node.","title":"Fixed"},{"location":"CHANGELOG.html#107","text":"","title":"1.0.7"},{"location":"CHANGELOG.html#fixed_66","text":"Fixed memory leak when using Dike SAX parser now parses IO streams Comment nodes have their own class Nokogiri() should delegate to Nokogiri.parse() Prepending rather than appending to ENV['PATH'] on windows Fixed a bug in complex CSS negation selectors","title":"Fixed"},{"location":"CHANGELOG.html#106","text":"","title":"1.0.6"},{"location":"CHANGELOG.html#fixed_67","text":"XPath Parser raises a SyntaxError on parse failure CSS Parser raises a SyntaxError on parse failure filter() and not() hpricot compatibility added CSS searches via Node#search are now always relative CSS to XPath conversion is now cached","title":"Fixed"},{"location":"CHANGELOG.html#105","text":"","title":"1.0.5"},{"location":"CHANGELOG.html#fixed_68","text":"Added mailing list and ticket tracking information to the README.txt Sets ENV['PATH'] on windows if it doesn't exist Caching results of NodeSet#[] on Document","title":"Fixed"},{"location":"CHANGELOG.html#104","text":"","title":"1.0.4"},{"location":"CHANGELOG.html#fixed_69","text":"Changed memory management from weak refs to document refs Plugged some memory leaks Builder blocks can call methods from surrounding contexts","title":"Fixed"},{"location":"CHANGELOG.html#103","text":"","title":"1.0.3"},{"location":"CHANGELOG.html#fixed_70","text":"NodeSet now implements to_ary XML::Document should not implement parent More GC Bugs fixed. (Mike is AWESOME!) Removed RARRAY_LEN for 1.8.5 compatibility. Thanks Shane Hanna. inner_html fixed. (Thanks Yehuda!)","title":"Fixed"},{"location":"CHANGELOG.html#102","text":"","title":"1.0.2"},{"location":"CHANGELOG.html#fixed_71","text":"extconf.rb should not check for frex and racc","title":"Fixed"},{"location":"CHANGELOG.html#101","text":"","title":"1.0.1"},{"location":"CHANGELOG.html#fixed_72","text":"Made sure extconf.rb searched libdir and prefix so that ports libxml/ruby will link properly. Thanks lucsky!","title":"Fixed"},{"location":"CHANGELOG.html#100-2008-07-13","text":"","title":"1.0.0 / 2008-07-13"},{"location":"CHANGELOG.html#added_39","text":"Birthday!","title":"Added"},{"location":"CODE_OF_CONDUCT.html","text":"Contributor Covenant Code of Conduct \u00b6 Our Pledge \u00b6 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00b6 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00b6 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00b6 This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00b6 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at mike.dalessio@gmail.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution \u00b6 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Code of Conduct"},{"location":"CODE_OF_CONDUCT.html#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"CODE_OF_CONDUCT.html#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"CODE_OF_CONDUCT.html#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"CODE_OF_CONDUCT.html#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"CODE_OF_CONDUCT.html#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"CODE_OF_CONDUCT.html#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at mike.dalessio@gmail.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"CODE_OF_CONDUCT.html#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Attribution"},{"location":"CONTRIBUTING.html","text":"Contributing to Nokogiri \u00b6 This document is still a work-in-progress. This doc is intended to be a short introduction on how to modify and maintain Nokogiri. If you're looking for guidance on filing a bug report or getting support, please visit the \"Getting Help\" tutorial at the nokogiri.org site. Contents \u00b6 Introduction Some guiding principles of the project Where to start getting involved Submitting Pull Requests How to set up your local development environment How to run the tests Style Guide How Continuous Integration (\"CI\") is configured Building gems Other utilities Rake tasks Making a release Code of Conduct Introduction \u00b6 Hello there! I'm super excited that you're interested in contributing to Nokogiri. Welcome! This document is intended only to provide a brief introduction on how to contribute to Nokogiri. It's not a complete specification of everything you need to know, so if you want to know more, I encourage you to reach out to the maintainers in the Discord channel . We'd love to get to know you a bit better! Some guiding principles of the project \u00b6 The top guiding principles, as noted in the README are: be secure-by-default by treating all documents as untrusted by default be a thin-as-reasonable layer on top of the underlying parsers, and don't attempt to fix behavioral differences between the parsers Nokogiri supports both CRuby and JRuby, and has native code specific to each (though much Ruby code is shared between them). Some related secondary principles are: Whenever possible, implement the same functionality for both CRuby and JRuby. Whenever possible, implement shared behavior as shared Ruby code (i.e., write as little native code as reasonable). Whenever possible, write tests that are not platform-specific (which includes skipping). Notably, despite all parsers being standards-compliant, there are behavioral inconsistencies between the parsers used in the CRuby and JRuby implementations, and Nokogiri does not and should not attempt to remove these inconsistencies. Instead, we surface these differences in the test suite when they are important/semantic; or we intentionally write tests to depend only on the important/semantic bits (omitting whitespace from regex matchers on results, for example). Nokogiri is widely used in the Ruby ecosystem, and so extra care should be taken to avoid introducing breaking changes. Please read our Semantic Versioning Policy to understand what we consider to be a breaking change. Where to start getting involved \u00b6 Please take a look at our Issues marked \"Help Wanted\" . Also, pull requests for documentation improvements are always welcome! Submitting Pull Requests \u00b6 Pull requests that introduce behavior change must always contain a test demonstrating the behavior being introduced, fixed, or changed. These tests should ideally communicate to the maintainers the problem being solved. We will ask you for clarification if we don't understand the problem you're trying to solve. Please do not submit pull requests that make purely cosmetic changes to the code (style, naming, etc.). While we recognize that the code can always be improved, we would prefer you to focus on more impactful contributions. Feel free to push a \"work in progress\" to take advantage of the feedback loops from CI. But then please indicate that it's still in progress by marking it as a Draft Pull Request . How to set up your local development environment \u00b6 Basic \u00b6 Clone https://github.com/sparklemotion/nokogiri and run bundle install . Advanced \u00b6 Please install the latest or previous version of CRuby (e.g., 3.0 or 2.7 as of 2021-02), and a recent version of JRuby. We recommend using rbenv , which is used in test scripts when necessary to test gems against multiple rubies. Please install a system version of libxml2/libxslt (see Installing Nokogiri for details) so that you can test against both the packaged libraries and your system libraries. We recommend that you install valgrind if you can, but it's only necessary for debugging problems so feel free to wait until you need it. (I'm not sure valgrind is easily available on MacOS.) If you plan to package precompiled native gems, make sure docker is installed and is working properly. How to run the tests \u00b6 Note that rake test does not compile the native extension, and this is intentional. If you're modifying the extension code, please make sure you re-compile each time you run the tests to ensure you're testing your changes. The short version \u00b6 bundle exec rake compile test CRuby advanced usage \u00b6 Test using your system's libraries: bundle exec rake clean # blow away pre-existing libraries using packaged libs NOKOGIRI_USE_SYSTEM_LIBRARIES = t bundle exec rake compile test Run tests using valgrind: bundle exec rake compile test:valgrind Run tests in the debugger: bundle exec rake compile test:gdb Note that by default the test suite will run a major GC after each test completes. This has shown to be useful for localizing entire classes of memory bugs, but does slow the suite down. Some variations of the test suite behavior are available (see test/helper.rb for more info): # see failure messages immediately NOKOGIRI_TEST_FAIL_FAST = t bundle exec rake compile test # ordinary GC behavior NOKOGIRI_TEST_GC_LEVEL = normal bundle exec rake compile test # minor GC after each test NOKOGIRI_TEST_GC_LEVEL = minor bundle exec rake compile test # major GC after each test NOKOGIRI_TEST_GC_LEVEL = major bundle exec rake compile test # major GC after each test and GC compaction after every 20 tests NOKOGIRI_TEST_GC_LEVEL = compact bundle exec rake compile test # verify references after compaction after every 20 tests # (see https://alanwu.space/post/check-compaction/) NOKOGIRI_TEST_GC_LEVEL = verify bundle exec rake compile test # run with GC \"stress mode\" on NOKOGIRI_TEST_GC_LEVEL = stress bundle exec rake compile test libxml2 advanced usage \u00b6 If you want to build Nokogiri against a modified version of libxml2, clone libxml2 to ../libxml2 and then run scripts/compile-against-libxml2-source . That script also takes an optional command to run with the proper environment variables set to use the local libxml2 library, which can be useful when trying to git bisect against libxml2. gumbo HTML5 parser \u00b6 To run the test suite for the gumbo parser: bundle exec rake gumbo To make sure to run additional html5lib tests for Nokogiri's HTML5 parser: git submodule update --init # test/html5lib-tests bundle exec rake compile test Style Guide \u00b6 I don't feel very strongly about code style, but when possible I follow Shopify's Ruby Style Guide , and for C and Java code I use the astyle settings laid out in /rakelib/format.rake . You can format the C and Java code with rake format . Maybe someday I'll auto-format Ruby, but not today. No, I don't want to talk to you about this. How Continuous Integration (\"CI\") is configured \u00b6 The bulk of CI is running in Github Actions since May 2021: https://github.com/sparklemotion/nokogiri/actions However, we also run tests against 32-bit windows (which aren't supported by GA as of this writing) in Appveyor: https://ci.appveyor.com/project/flavorjones/nokogiri Please note that there are some known holes in CI coverage due to actions/download-artifact (as well as other actions) not supporting systems other than 64-bit glibc: installing ruby and native gems on Alpine/musl installing ruby and native gems on 32-bit Linux For more information, please check out #2244 and #2247 which document the migration from Concourse to Github Actions. Coverage \u00b6 The ci.yml pipeline includes jobs to: basic security sanity check: run rubocop fast feedback for obvious failures: run against system libraries on vanilla ubuntu run the gumbo parser tests on ubuntu, macos, and windows run on all supported versions of CRuby: once with packaged libraries once with system libraries once on valgrind (to look for memory bugs) run on JRuby run on a Musl (Alpine) system: against system libraries with valgrind using packaged libraries run with libxml-ruby loaded (because this interacts with libxml2 in conflicting ways) against system libraries with valgrind using packaged libraries The upstream.yml pipeline includes jobs to: run against CRuby head (linux, windows, macos) including valgrind run against JRuby head run against libxml2 and libxslt head (linux only today) including valgrind The gem-install.yml pipeline includes jobs to: build a \"ruby\" platform gem install and test on linux, macos, and windows build a native 64-bit gem (linux, macos, windows) install and test against all supported versions of CRuby install and test on musl build a jruby gem, install and test it The truffle.yml pipeline tests TruffleRuby nightlies with a few different compile-time flags. TruffleRuby support is still experimental due to Sulong limitations, and the test suite is exceedingly slow when run by TR, so this pipeline doesn't run on pushes and PRs. Instead, it runs periodically on a timer to give us some signal without slowing down developer feedback loops. Valgrind \u00b6 We rely heavily on Valgrind to catch memory bugs by running in combination with every version of CRuby. We use suppressions, too -- because some Rubies seem to have memory issues? See the files in the /suppressions directory and /rakelib/test.rake for more information. Conventions \u00b6 Always checkout the source code including submodules (for the html5lib tests) When testing packaged libraries (not system libraries), cache either ports/ (for compiled libraries) or ports/archives/ (for just tarballs) note that libgumbo is built outside of ports/ to allow us to do this caching safely Building gems \u00b6 As a prerequisite please make sure you have docker correctly installed. Run scripts/build-gems which will package gems for all supported platforms, and run some basic sanity tests on those packages using scripts/test-gem-set , scripts/test-gem-file-contents , and scripts/test-gem-installation . Other utilities \u00b6 scripts/test-exported-symbols checks the compiled nokogiri.so library for surprising exported symbols. This script likely only works on Linux, sorry. scripts/test-nokogumbo-compatibility is used by CI to ensure that Nokogumbo installs correctly against the currently-installed version of Nokogiri. Nokogumbo receives this extra care because it compiles against Nokogiri's and libxml2's header files, and makes assumptions about what symbols are exported by Nokogiri's extension library. scripts/files-modified-by-open-prs is a hack to see what files are being proposed to change in the set of open pull requests. This might be useful if you're thinking about radically changing a file, to be aware of what merge conflicts might result. This could probably be a rake task. There's a Vagrantfile in the project root which I've used once or twice to try to reproduce problems non-Linux systems (like OpenBSD). It's not well-maintained so YMMV. Rake tasks \u00b6 The Rakefile used to be a big fat mess. It's now decomposed into a small set of files in /rakelib . If you've got a new rake task you'd like to introduce, please consider whether it belongs in one of the existing concerns, or needs a new file. Please don't add it to Rakefile without compelling reasons. Making a release \u00b6 A quick checklist: [ ] make sure CI is green! [ ] update CHANGELOG.md and lib/nokogiri/version/constant.rb [ ] create a git tag [ ] run scripts/build-gems and make sure it completes and all the tests pass [ ] for g in gems/*.gem ; do gem push $g ; done [ ] create a release at https://github.com/sparklemotion/nokogiri/releases and provide sha2 checksums [ ] if security-related, email ruby-security-ann@googlegroups.com and ruby-talk@ruby-lang.org [ ] update nokogiri.org Code of Conduct \u00b6 Our full Code of Conduct is in CODE_OF_CONDUCT.md . For best results, be nice. Remember that Nokogiri maintainers are volunteers, and treat them with respect. Do not act entitled to service. Do not be rude. Do not use judgmental or foul language. The maintainers reserve the right to delete comments that are rude, or that contain foul language. The maintainers reserve the right to delete comments that they deem harassing or offensive.","title":"Contributing"},{"location":"CONTRIBUTING.html#contributing-to-nokogiri","text":"This document is still a work-in-progress. This doc is intended to be a short introduction on how to modify and maintain Nokogiri. If you're looking for guidance on filing a bug report or getting support, please visit the \"Getting Help\" tutorial at the nokogiri.org site.","title":"Contributing to Nokogiri"},{"location":"CONTRIBUTING.html#contents","text":"Introduction Some guiding principles of the project Where to start getting involved Submitting Pull Requests How to set up your local development environment How to run the tests Style Guide How Continuous Integration (\"CI\") is configured Building gems Other utilities Rake tasks Making a release Code of Conduct","title":"Contents"},{"location":"CONTRIBUTING.html#introduction","text":"Hello there! I'm super excited that you're interested in contributing to Nokogiri. Welcome! This document is intended only to provide a brief introduction on how to contribute to Nokogiri. It's not a complete specification of everything you need to know, so if you want to know more, I encourage you to reach out to the maintainers in the Discord channel . We'd love to get to know you a bit better!","title":"Introduction"},{"location":"CONTRIBUTING.html#some-guiding-principles-of-the-project","text":"The top guiding principles, as noted in the README are: be secure-by-default by treating all documents as untrusted by default be a thin-as-reasonable layer on top of the underlying parsers, and don't attempt to fix behavioral differences between the parsers Nokogiri supports both CRuby and JRuby, and has native code specific to each (though much Ruby code is shared between them). Some related secondary principles are: Whenever possible, implement the same functionality for both CRuby and JRuby. Whenever possible, implement shared behavior as shared Ruby code (i.e., write as little native code as reasonable). Whenever possible, write tests that are not platform-specific (which includes skipping). Notably, despite all parsers being standards-compliant, there are behavioral inconsistencies between the parsers used in the CRuby and JRuby implementations, and Nokogiri does not and should not attempt to remove these inconsistencies. Instead, we surface these differences in the test suite when they are important/semantic; or we intentionally write tests to depend only on the important/semantic bits (omitting whitespace from regex matchers on results, for example). Nokogiri is widely used in the Ruby ecosystem, and so extra care should be taken to avoid introducing breaking changes. Please read our Semantic Versioning Policy to understand what we consider to be a breaking change.","title":"Some guiding principles of the project"},{"location":"CONTRIBUTING.html#where-to-start-getting-involved","text":"Please take a look at our Issues marked \"Help Wanted\" . Also, pull requests for documentation improvements are always welcome!","title":"Where to start getting involved"},{"location":"CONTRIBUTING.html#submitting-pull-requests","text":"Pull requests that introduce behavior change must always contain a test demonstrating the behavior being introduced, fixed, or changed. These tests should ideally communicate to the maintainers the problem being solved. We will ask you for clarification if we don't understand the problem you're trying to solve. Please do not submit pull requests that make purely cosmetic changes to the code (style, naming, etc.). While we recognize that the code can always be improved, we would prefer you to focus on more impactful contributions. Feel free to push a \"work in progress\" to take advantage of the feedback loops from CI. But then please indicate that it's still in progress by marking it as a Draft Pull Request .","title":"Submitting Pull Requests"},{"location":"CONTRIBUTING.html#how-to-set-up-your-local-development-environment","text":"","title":"How to set up your local development environment"},{"location":"CONTRIBUTING.html#basic","text":"Clone https://github.com/sparklemotion/nokogiri and run bundle install .","title":"Basic"},{"location":"CONTRIBUTING.html#advanced","text":"Please install the latest or previous version of CRuby (e.g., 3.0 or 2.7 as of 2021-02), and a recent version of JRuby. We recommend using rbenv , which is used in test scripts when necessary to test gems against multiple rubies. Please install a system version of libxml2/libxslt (see Installing Nokogiri for details) so that you can test against both the packaged libraries and your system libraries. We recommend that you install valgrind if you can, but it's only necessary for debugging problems so feel free to wait until you need it. (I'm not sure valgrind is easily available on MacOS.) If you plan to package precompiled native gems, make sure docker is installed and is working properly.","title":"Advanced"},{"location":"CONTRIBUTING.html#how-to-run-the-tests","text":"Note that rake test does not compile the native extension, and this is intentional. If you're modifying the extension code, please make sure you re-compile each time you run the tests to ensure you're testing your changes.","title":"How to run the tests"},{"location":"CONTRIBUTING.html#the-short-version","text":"bundle exec rake compile test","title":"The short version"},{"location":"CONTRIBUTING.html#cruby-advanced-usage","text":"Test using your system's libraries: bundle exec rake clean # blow away pre-existing libraries using packaged libs NOKOGIRI_USE_SYSTEM_LIBRARIES = t bundle exec rake compile test Run tests using valgrind: bundle exec rake compile test:valgrind Run tests in the debugger: bundle exec rake compile test:gdb Note that by default the test suite will run a major GC after each test completes. This has shown to be useful for localizing entire classes of memory bugs, but does slow the suite down. Some variations of the test suite behavior are available (see test/helper.rb for more info): # see failure messages immediately NOKOGIRI_TEST_FAIL_FAST = t bundle exec rake compile test # ordinary GC behavior NOKOGIRI_TEST_GC_LEVEL = normal bundle exec rake compile test # minor GC after each test NOKOGIRI_TEST_GC_LEVEL = minor bundle exec rake compile test # major GC after each test NOKOGIRI_TEST_GC_LEVEL = major bundle exec rake compile test # major GC after each test and GC compaction after every 20 tests NOKOGIRI_TEST_GC_LEVEL = compact bundle exec rake compile test # verify references after compaction after every 20 tests # (see https://alanwu.space/post/check-compaction/) NOKOGIRI_TEST_GC_LEVEL = verify bundle exec rake compile test # run with GC \"stress mode\" on NOKOGIRI_TEST_GC_LEVEL = stress bundle exec rake compile test","title":"CRuby advanced usage"},{"location":"CONTRIBUTING.html#libxml2-advanced-usage","text":"If you want to build Nokogiri against a modified version of libxml2, clone libxml2 to ../libxml2 and then run scripts/compile-against-libxml2-source . That script also takes an optional command to run with the proper environment variables set to use the local libxml2 library, which can be useful when trying to git bisect against libxml2.","title":"libxml2 advanced usage"},{"location":"CONTRIBUTING.html#gumbo-html5-parser","text":"To run the test suite for the gumbo parser: bundle exec rake gumbo To make sure to run additional html5lib tests for Nokogiri's HTML5 parser: git submodule update --init # test/html5lib-tests bundle exec rake compile test","title":"gumbo HTML5 parser"},{"location":"CONTRIBUTING.html#style-guide","text":"I don't feel very strongly about code style, but when possible I follow Shopify's Ruby Style Guide , and for C and Java code I use the astyle settings laid out in /rakelib/format.rake . You can format the C and Java code with rake format . Maybe someday I'll auto-format Ruby, but not today. No, I don't want to talk to you about this.","title":"Style Guide"},{"location":"CONTRIBUTING.html#how-continuous-integration-ci-is-configured","text":"The bulk of CI is running in Github Actions since May 2021: https://github.com/sparklemotion/nokogiri/actions However, we also run tests against 32-bit windows (which aren't supported by GA as of this writing) in Appveyor: https://ci.appveyor.com/project/flavorjones/nokogiri Please note that there are some known holes in CI coverage due to actions/download-artifact (as well as other actions) not supporting systems other than 64-bit glibc: installing ruby and native gems on Alpine/musl installing ruby and native gems on 32-bit Linux For more information, please check out #2244 and #2247 which document the migration from Concourse to Github Actions.","title":"How Continuous Integration (\"CI\") is configured"},{"location":"CONTRIBUTING.html#coverage","text":"The ci.yml pipeline includes jobs to: basic security sanity check: run rubocop fast feedback for obvious failures: run against system libraries on vanilla ubuntu run the gumbo parser tests on ubuntu, macos, and windows run on all supported versions of CRuby: once with packaged libraries once with system libraries once on valgrind (to look for memory bugs) run on JRuby run on a Musl (Alpine) system: against system libraries with valgrind using packaged libraries run with libxml-ruby loaded (because this interacts with libxml2 in conflicting ways) against system libraries with valgrind using packaged libraries The upstream.yml pipeline includes jobs to: run against CRuby head (linux, windows, macos) including valgrind run against JRuby head run against libxml2 and libxslt head (linux only today) including valgrind The gem-install.yml pipeline includes jobs to: build a \"ruby\" platform gem install and test on linux, macos, and windows build a native 64-bit gem (linux, macos, windows) install and test against all supported versions of CRuby install and test on musl build a jruby gem, install and test it The truffle.yml pipeline tests TruffleRuby nightlies with a few different compile-time flags. TruffleRuby support is still experimental due to Sulong limitations, and the test suite is exceedingly slow when run by TR, so this pipeline doesn't run on pushes and PRs. Instead, it runs periodically on a timer to give us some signal without slowing down developer feedback loops.","title":"Coverage"},{"location":"CONTRIBUTING.html#valgrind","text":"We rely heavily on Valgrind to catch memory bugs by running in combination with every version of CRuby. We use suppressions, too -- because some Rubies seem to have memory issues? See the files in the /suppressions directory and /rakelib/test.rake for more information.","title":"Valgrind"},{"location":"CONTRIBUTING.html#conventions","text":"Always checkout the source code including submodules (for the html5lib tests) When testing packaged libraries (not system libraries), cache either ports/ (for compiled libraries) or ports/archives/ (for just tarballs) note that libgumbo is built outside of ports/ to allow us to do this caching safely","title":"Conventions"},{"location":"CONTRIBUTING.html#building-gems","text":"As a prerequisite please make sure you have docker correctly installed. Run scripts/build-gems which will package gems for all supported platforms, and run some basic sanity tests on those packages using scripts/test-gem-set , scripts/test-gem-file-contents , and scripts/test-gem-installation .","title":"Building gems"},{"location":"CONTRIBUTING.html#other-utilities","text":"scripts/test-exported-symbols checks the compiled nokogiri.so library for surprising exported symbols. This script likely only works on Linux, sorry. scripts/test-nokogumbo-compatibility is used by CI to ensure that Nokogumbo installs correctly against the currently-installed version of Nokogiri. Nokogumbo receives this extra care because it compiles against Nokogiri's and libxml2's header files, and makes assumptions about what symbols are exported by Nokogiri's extension library. scripts/files-modified-by-open-prs is a hack to see what files are being proposed to change in the set of open pull requests. This might be useful if you're thinking about radically changing a file, to be aware of what merge conflicts might result. This could probably be a rake task. There's a Vagrantfile in the project root which I've used once or twice to try to reproduce problems non-Linux systems (like OpenBSD). It's not well-maintained so YMMV.","title":"Other utilities"},{"location":"CONTRIBUTING.html#rake-tasks","text":"The Rakefile used to be a big fat mess. It's now decomposed into a small set of files in /rakelib . If you've got a new rake task you'd like to introduce, please consider whether it belongs in one of the existing concerns, or needs a new file. Please don't add it to Rakefile without compelling reasons.","title":"Rake tasks"},{"location":"CONTRIBUTING.html#making-a-release","text":"A quick checklist: [ ] make sure CI is green! [ ] update CHANGELOG.md and lib/nokogiri/version/constant.rb [ ] create a git tag [ ] run scripts/build-gems and make sure it completes and all the tests pass [ ] for g in gems/*.gem ; do gem push $g ; done [ ] create a release at https://github.com/sparklemotion/nokogiri/releases and provide sha2 checksums [ ] if security-related, email ruby-security-ann@googlegroups.com and ruby-talk@ruby-lang.org [ ] update nokogiri.org","title":"Making a release"},{"location":"CONTRIBUTING.html#code-of-conduct","text":"Our full Code of Conduct is in CODE_OF_CONDUCT.md . For best results, be nice. Remember that Nokogiri maintainers are volunteers, and treat them with respect. Do not act entitled to service. Do not be rude. Do not use judgmental or foul language. The maintainers reserve the right to delete comments that are rude, or that contain foul language. The maintainers reserve the right to delete comments that they deem harassing or offensive.","title":"Code of Conduct"},{"location":"LICENSE-DEPENDENCIES.html","text":"Vendored Dependency Licenses \u00b6 Nokogiri ships with some third party dependencies, which are listed here along with their licenses. Note that this document is broken into multiple sections, each of which describes the dependencies of a different \"platform release\" of Nokogiri. Platform Releases Default platform release (\"ruby\") Native Linux\u24c7 platform releases (\"x86_64-linux\" and \"arm64-linux\") Native Darwin (macOS\u24c7) platform releases (\"x86_64-darwin\" and \"arm64-darwin\") Native Windows\u24c7 platform releases (\"x86-mingw32\" and \"x64-mingw32\") Java\u24c7 (JRuby) platform release (\"java\") Appendix: Dependencies' License Texts libgumbo and nokogumbo libxml2 libxslt zlib libiconv isorelax jing nekodtd nekohtml xalan xerces xml-apis Anyone consuming this file via license-tracking software should endeavor to understand which gem file you're downloading and using, so as not to misinterpret the contents of this file and the licenses of the software being distributed. You can double-check the dependencies in your gem file by examining the output of nokogiri -v after installation, which will emit the complete set of libraries in use (for versions >= 1.11.0.rc4 ). In particular, I'm sure somebody's lawyer, somewhere, is going to freak out that the LGPL appears in this file; and so I'd like to take special note that the dependency covered by LGPL, libiconv , is only being redistributed in the native Windows and native Darwin platform releases. It's not present in default, Java\u24c7, or native Linux\u24c7 releases. Platform Releases \u00b6 Default platform release (\"ruby\") \u00b6 The default platform release distributes the following dependencies in source form: libxml2 libxslt libgumbo and nokogumbo This distribution can be identified by inspecting the included Gem::Specification, which will have the value \"ruby\" for its \"platform\" attribute. Native Linux\u24c7 platform releases (\"x86_64-linux\" and \"arm64-linux\") \u00b6 The native Linux\u24c7 platform release distributes the following dependencies in source form: libxml2 libxslt libgumbo and nokogumbo zlib This distribution can be identified by inspecting the included Gem::Specification, which will have a value similar to \"x86_64-linux\" or \"x86-linux\" for its \"platform.cpu\" attribute. Native Darwin (macOS\u24c7) platform releases (\"x86_64-darwin\" and \"arm64-darwin\") \u00b6 The native Darwin platform release distributes the following dependencies in source form: libxml2 libxslt libgumbo and nokogumbo zlib libiconv This distribution can be identified by inspecting the included Gem::Specification, which will have a value similar to \"x86_64-darwin\" or \"arm64-darwin\" for its \"platform.cpu\" attribute. Darwin is also known more familiarly as \"OSX\" or \"macOS\u24c7\" and is the operating system for many Apple\u24c7 computers. Native Windows\u24c7 platform releases (\"x86-mingw32\" and \"x64-mingw32\") \u00b6 The native Windows\u24c7 platform release distributes the following dependencies in source form: libxml2 libxslt libgumbo and nokogumbo zlib libiconv This distribution can be identified by inspecting the included Gem::Specification, which will have a value similar to \"x64-mingw32\" or \"x86-mingw32\" for its \"platform.cpu\" attribute. Java\u24c7 (JRuby) platform release (\"java\") \u00b6 The Java platform release distributes the following dependencies as compiled jar files: isorelax jing nekodtd nekohtml xalan xerces xml-apis This distribution can be identified by inspecting the included Gem::Specification, which will have the value \"java\" for its \"platform.os\" attribute. Appendix: Dependencies' License Texts \u00b6 This section contains a subsection for each potentially-distributed dependency, which includes the name of the license and the license text. Please see previous sections to understand which of these potential dependencies is actually distributed in the gem file you're downloading and using. libgumbo and nokogumbo \u00b6 Apache 2.0 https://github.com/rubys/nokogumbo/blob/f6a7412/LICENSE.txt Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright [yyyy] [name of copyright owner] Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. libxml2 \u00b6 MIT http://xmlsoft.org/ Except where otherwise noted in the source code (e.g. the files hash.c, list.c and the trio files, which are covered by a similar licence but with different Copyright notices) all the files are: Copyright (C) 1998-2012 Daniel Veillard. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is fur- nished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FIT- NESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. libxslt \u00b6 MIT http://xmlsoft.org/libxslt/ Licence for libxslt except libexslt ---------------------------------------------------------------------- Copyright (C) 2001-2002 Daniel Veillard. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is fur- nished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FIT- NESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE DANIEL VEILLARD BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CON- NECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Except as contained in this notice, the name of Daniel Veillard shall not be used in advertising or otherwise to promote the sale, use or other deal- ings in this Software without prior written authorization from him. ---------------------------------------------------------------------- Licence for libexslt ---------------------------------------------------------------------- Copyright (C) 2001-2002 Thomas Broyer, Charlie Bozeman and Daniel Veillard. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is fur- nished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FIT- NESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CON- NECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Except as contained in this notice, the name of the authors shall not be used in advertising or otherwise to promote the sale, use or other deal- ings in this Software without prior written authorization from him. ---------------------------------------------------------------------- zlib \u00b6 zlib license http://www.zlib.net/zlib_license.html Copyright (C) 1995-2017 Jean-loup Gailly and Mark Adler This software is provided 'as-is', without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software. Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions: 1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required. 2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software. 3. This notice may not be removed or altered from any source distribution. Jean-loup Gailly Mark Adler jloup@gzip.org madler@alumni.caltech.edu libiconv \u00b6 LGPL https://www.gnu.org/software/libiconv/ GNU LIBRARY GENERAL PUBLIC LICENSE Version 2, June 1991 Copyright (C) 1991 Free Software Foundation, Inc. 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. [This is the first released version of the library GPL. It is numbered 2 because it goes with version 2 of the ordinary GPL.] Preamble The licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public Licenses are intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users. This license, the Library General Public License, applies to some specially designated Free Software Foundation software, and to any other libraries whose authors decide to use it. You can use it for your libraries, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs; and that you know you can do these things. To protect your rights, we need to make restrictions that forbid anyone to deny you these rights or to ask you to surrender the rights. These restrictions translate to certain responsibilities for you if you distribute copies of the library, or if you modify it. For example, if you distribute copies of the library, whether gratis or for a fee, you must give the recipients all the rights that we gave you. You must make sure that they, too, receive or can get the source code. If you link a program with the library, you must provide complete object files to the recipients so that they can relink them with the library, after making changes to the library and recompiling it. And you must show them these terms so they know their rights. Our method of protecting your rights has two steps: (1) copyright the library, and (2) offer you this license which gives you legal permission to copy, distribute and/or modify the library. Also, for each distributor's protection, we want to make certain that everyone understands that there is no warranty for this free library. If the library is modified by someone else and passed on, we want its recipients to know that what they have is not the original version, so that any problems introduced by others will not reflect on the original authors' reputations. Finally, any free program is threatened constantly by software patents. We wish to avoid the danger that companies distributing free software will individually obtain patent licenses, thus in effect transforming the program into proprietary software. To prevent this, we have made it clear that any patent must be licensed for everyone's free use or not licensed at all. Most GNU software, including some libraries, is covered by the ordinary GNU General Public License, which was designed for utility programs. This license, the GNU Library General Public License, applies to certain designated libraries. This license is quite different from the ordinary one; be sure to read it in full, and don't assume that anything in it is the same as in the ordinary license. The reason we have a separate public license for some libraries is that they blur the distinction we usually make between modifying or adding to a program and simply using it. Linking a program with a library, without changing the library, is in some sense simply using the library, and is analogous to running a utility program or application program. However, in a textual and legal sense, the linked executable is a combined work, a derivative of the original library, and the ordinary General Public License treats it as such. Because of this blurred distinction, using the ordinary General Public License for libraries did not effectively promote software sharing, because most developers did not use the libraries. We concluded that weaker conditions might promote sharing better. However, unrestricted linking of non-free programs would deprive the users of those programs of all benefit from the free status of the libraries themselves. This Library General Public License is intended to permit developers of non-free programs to use free libraries, while preserving your freedom as a user of such programs to change the free libraries that are incorporated in them. (We have not seen how to achieve this as regards changes in header files, but we have achieved it as regards changes in the actual functions of the Library.) The hope is that this will lead to faster development of free libraries. The precise terms and conditions for copying, distribution and modification follow. Pay close attention to the difference between a \"work based on the library\" and a \"work that uses the library\". The former contains code derived from the library, while the latter only works together with the library. Note that it is possible for a library to be covered by the ordinary General Public License rather than by this special one. GNU LIBRARY GENERAL PUBLIC LICENSE TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION 0. This License Agreement applies to any software library which contains a notice placed by the copyright holder or other authorized party saying it may be distributed under the terms of this Library General Public License (also called \"this License\"). Each licensee is addressed as \"you\". A \"library\" means a collection of software functions and/or data prepared so as to be conveniently linked with application programs (which use some of those functions and data) to form executables. The \"Library\", below, refers to any such software library or work which has been distributed under these terms. A \"work based on the Library\" means either the Library or any derivative work under copyright law: that is to say, a work containing the Library or a portion of it, either verbatim or with modifications and/or translated straightforwardly into another language. (Hereinafter, translation is included without limitation in the term \"modification\".) \"Source code\" for a work means the preferred form of the work for making modifications to it. For a library, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the library. Activities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running a program using the Library is not restricted, and output from such a program is covered only if its contents constitute a work based on the Library (independent of the use of the Library in a tool for writing it). Whether that is true depends on what the Library does and what the program that uses the Library does. 1. You may copy and distribute verbatim copies of the Library's complete source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and distribute a copy of this License along with the Library. You may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee. 2. You may modify your copy or copies of the Library or any portion of it, thus forming a work based on the Library, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions: a) The modified work must itself be a software library. b) You must cause the files modified to carry prominent notices stating that you changed the files and the date of any change. c) You must cause the whole of the work to be licensed at no charge to all third parties under the terms of this License. d) If a facility in the modified Library refers to a function or a table of data to be supplied by an application program that uses the facility, other than as an argument passed when the facility is invoked, then you must make a good faith effort to ensure that, in the event an application does not supply such function or table, the facility still operates, and performs whatever part of its purpose remains meaningful. (For example, a function in a library to compute square roots has a purpose that is entirely well-defined independent of the application. Therefore, Subsection 2d requires that any application-supplied function or table used by this function must be optional: if the application does not supply it, the square root function must still compute square roots.) These requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Library, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Library, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it. Thus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Library. In addition, mere aggregation of another work not based on the Library with the Library (or with a work based on the Library) on a volume of a storage or distribution medium does not bring the other work under the scope of this License. 3. You may opt to apply the terms of the ordinary GNU General Public License instead of this License to a given copy of the Library. To do this, you must alter all the notices that refer to this License, so that they refer to the ordinary GNU General Public License, version 2, instead of to this License. (If a newer version than version 2 of the ordinary GNU General Public License has appeared, then you can specify that version instead if you wish.) Do not make any other change in these notices. Once this change is made in a given copy, it is irreversible for that copy, so the ordinary GNU General Public License applies to all subsequent copies and derivative works made from that copy. This option is useful when you wish to copy part of the code of the Library into a program that is not a library. 4. You may copy and distribute the Library (or a portion or derivative of it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange. If distribution of object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place satisfies the requirement to distribute the source code, even though third parties are not compelled to copy the source along with the object code. 5. A program that contains no derivative of any portion of the Library, but is designed to work with the Library by being compiled or linked with it, is called a \"work that uses the Library\". Such a work, in isolation, is not a derivative work of the Library, and therefore falls outside the scope of this License. However, linking a \"work that uses the Library\" with the Library creates an executable that is a derivative of the Library (because it contains portions of the Library), rather than a \"work that uses the library\". The executable is therefore covered by this License. Section 6 states terms for distribution of such executables. When a \"work that uses the Library\" uses material from a header file that is part of the Library, the object code for the work may be a derivative work of the Library even though the source code is not. Whether this is true is especially significant if the work can be linked without the Library, or if the work is itself a library. The threshold for this to be true is not precisely defined by law. If such an object file uses only numerical parameters, data structure layouts and accessors, and small macros and small inline functions (ten lines or less in length), then the use of the object file is unrestricted, regardless of whether it is legally a derivative work. (Executables containing this object code plus portions of the Library will still fall under Section 6.) Otherwise, if the work is a derivative of the Library, you may distribute the object code for the work under the terms of Section 6. Any executables containing that work also fall under Section 6, whether or not they are linked directly with the Library itself. 6. As an exception to the Sections above, you may also compile or link a \"work that uses the Library\" with the Library to produce a work containing portions of the Library, and distribute that work under terms of your choice, provided that the terms permit modification of the work for the customer's own use and reverse engineering for debugging such modifications. You must give prominent notice with each copy of the work that the Library is used in it and that the Library and its use are covered by this License. You must supply a copy of this License. If the work during execution displays copyright notices, you must include the copyright notice for the Library among them, as well as a reference directing the user to the copy of this License. Also, you must do one of these things: a) Accompany the work with the complete corresponding machine-readable source code for the Library including whatever changes were used in the work (which must be distributed under Sections 1 and 2 above); and, if the work is an executable linked with the Library, with the complete machine-readable \"work that uses the Library\", as object code and/or source code, so that the user can modify the Library and then relink to produce a modified executable containing the modified Library. (It is understood that the user who changes the contents of definitions files in the Library will not necessarily be able to recompile the application to use the modified definitions.) b) Accompany the work with a written offer, valid for at least three years, to give the same user the materials specified in Subsection 6a, above, for a charge no more than the cost of performing this distribution. c) If distribution of the work is made by offering access to copy from a designated place, offer equivalent access to copy the above specified materials from the same place. d) Verify that the user has already received a copy of these materials or that you have already sent this user a copy. For an executable, the required form of the \"work that uses the Library\" must include any data and utility programs needed for reproducing the executable from it. However, as a special exception, the source code distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable. It may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system. Such a contradiction means you cannot use both them and the Library together in an executable that you distribute. 7. You may place library facilities that are a work based on the Library side-by-side in a single library together with other library facilities not covered by this License, and distribute such a combined library, provided that the separate distribution of the work based on the Library and of the other library facilities is otherwise permitted, and provided that you do these two things: a) Accompany the combined library with a copy of the same work based on the Library, uncombined with any other library facilities. This must be distributed under the terms of the Sections above. b) Give prominent notice with the combined library of the fact that part of it is a work based on the Library, and explaining where to find the accompanying uncombined form of the same work. 8. You may not copy, modify, sublicense, link with, or distribute the Library except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense, link with, or distribute the Library is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance. 9. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Library or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Library (or any work based on the Library), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Library or works based on it. 10. Each time you redistribute the Library (or any work based on the Library), the recipient automatically receives a license from the original licensor to copy, distribute, link with or modify the Library subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties to this License. 11. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Library at all. For example, if a patent license would not permit royalty-free redistribution of the Library by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Library. If any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply, and the section as a whole is intended to apply in other circumstances. It is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice. This section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License. 12. If the distribution and/or use of the Library is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Library under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License. 13. The Free Software Foundation may publish revised and/or new versions of the Library General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Library specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Library does not specify a license version number, you may choose any version ever published by the Free Software Foundation. 14. If you wish to incorporate parts of the Library into other free programs whose distribution conditions are incompatible with these, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally. NO WARRANTY 15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE LIBRARY IS WITH YOU. SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. END OF TERMS AND CONDITIONS Appendix: How to Apply These Terms to Your New Libraries If you develop a new library, and you want it to be of the greatest possible use to the public, we recommend making it free software that everyone can redistribute and change. You can do so by permitting redistribution under these terms (or, alternatively, under the terms of the ordinary General Public License). To apply these terms, attach the following notices to the library. It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. <one line to give the library's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This library is free software; you can redistribute it and/or modify it under the terms of the GNU Library General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public License for more details. You should have received a copy of the GNU Library General Public License along with this library; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA Also add information on how to contact you by electronic and paper mail. You should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the library, if necessary. Here is a sample; alter the names: Yoyodyne, Inc., hereby disclaims all copyright interest in the library `Frob' (a library for tweaking knobs) written by James Random Hacker. <signature of Ty Coon>, 1 April 1990 Ty Coon, President of Vice That's all there is to it! isorelax \u00b6 MIT http://iso-relax.sourceforge.net/ Copyright (c) 2001-2002, SourceForge ISO-RELAX Project (ASAMI Tomoharu, Daisuke Okajima, Kohsuke Kawaguchi, and MURATA Makoto) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. jing \u00b6 BSD-3-Clause http://www.thaiopensource.com/relaxng/jing.html Copyright (c) 2001-2003 Thai Open Source Software Center Ltd All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. * Neither the name of the Thai Open Source Software Center Ltd nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. nekodtd \u00b6 Apache 1.0-derived https://people.apache.org/~andyc/neko/doc/dtd/ The CyberNeko Software License, Version 1.0 (C) Copyright 2002-2005, Andy Clark. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. 3. The end-user documentation included with the redistribution, if any, must include the following acknowledgment: \"This product includes software developed by Andy Clark.\" Alternately, this acknowledgment may appear in the software itself, if and wherever such third-party acknowledgments normally appear. 4. The names \"CyberNeko\" and \"NekoHTML\" must not be used to endorse or promote products derived from this software without prior written permission. For written permission, please contact andyc@cyberneko.net. 5. Products derived from this software may not be called \"CyberNeko\", nor may \"CyberNeko\" appear in their name, without prior written permission of the author. THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR OTHER CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. ==================================================================== This license is based on the Apache Software License, version 1.1. nekohtml \u00b6 Apache 2.0 http://nekohtml.sourceforge.net/ Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright [yyyy] [name of copyright owner] Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. xalan \u00b6 Apache 2.0 https://xml.apache.org/xalan-j/ covers xalan.jar and serializer.jar Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright [yyyy] [name of copyright owner] Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. xerces \u00b6 Apache 2.0 https://xerces.apache.org/xerces2-j/ Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright [yyyy] [name of copyright owner] Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. xml-apis \u00b6 Apache 2.0 https://xerces.apache.org/xml-commons/ Unless otherwise noted all files in XML Commons are covered under the Apache License Version 2.0. Please read the LICENSE and NOTICE files. XML Commons contains some software and documentation that is covered under a number of different licenses. This applies particularly to the xml-commons/java/external/ directory. Most files under xml-commons/java/external/ are covered under their respective LICENSE.*.txt files; see the matching README.*.txt files for descriptions. Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright [yyyy] [name of copyright owner] Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Dependencies"},{"location":"LICENSE-DEPENDENCIES.html#vendored-dependency-licenses","text":"Nokogiri ships with some third party dependencies, which are listed here along with their licenses. Note that this document is broken into multiple sections, each of which describes the dependencies of a different \"platform release\" of Nokogiri. Platform Releases Default platform release (\"ruby\") Native Linux\u24c7 platform releases (\"x86_64-linux\" and \"arm64-linux\") Native Darwin (macOS\u24c7) platform releases (\"x86_64-darwin\" and \"arm64-darwin\") Native Windows\u24c7 platform releases (\"x86-mingw32\" and \"x64-mingw32\") Java\u24c7 (JRuby) platform release (\"java\") Appendix: Dependencies' License Texts libgumbo and nokogumbo libxml2 libxslt zlib libiconv isorelax jing nekodtd nekohtml xalan xerces xml-apis Anyone consuming this file via license-tracking software should endeavor to understand which gem file you're downloading and using, so as not to misinterpret the contents of this file and the licenses of the software being distributed. You can double-check the dependencies in your gem file by examining the output of nokogiri -v after installation, which will emit the complete set of libraries in use (for versions >= 1.11.0.rc4 ). In particular, I'm sure somebody's lawyer, somewhere, is going to freak out that the LGPL appears in this file; and so I'd like to take special note that the dependency covered by LGPL, libiconv , is only being redistributed in the native Windows and native Darwin platform releases. It's not present in default, Java\u24c7, or native Linux\u24c7 releases.","title":"Vendored Dependency Licenses"},{"location":"LICENSE-DEPENDENCIES.html#platform-releases","text":"","title":"Platform Releases"},{"location":"LICENSE-DEPENDENCIES.html#default-platform-release-ruby","text":"The default platform release distributes the following dependencies in source form: libxml2 libxslt libgumbo and nokogumbo This distribution can be identified by inspecting the included Gem::Specification, which will have the value \"ruby\" for its \"platform\" attribute.","title":"Default platform release (\"ruby\")"},{"location":"LICENSE-DEPENDENCIES.html#native-linuxr-platform-releases-x86_64-linux-and-arm64-linux","text":"The native Linux\u24c7 platform release distributes the following dependencies in source form: libxml2 libxslt libgumbo and nokogumbo zlib This distribution can be identified by inspecting the included Gem::Specification, which will have a value similar to \"x86_64-linux\" or \"x86-linux\" for its \"platform.cpu\" attribute.","title":"Native Linux\u24c7 platform releases (\"x86_64-linux\" and \"arm64-linux\")"},{"location":"LICENSE-DEPENDENCIES.html#native-darwin-macosr-platform-releases-x86_64-darwin-and-arm64-darwin","text":"The native Darwin platform release distributes the following dependencies in source form: libxml2 libxslt libgumbo and nokogumbo zlib libiconv This distribution can be identified by inspecting the included Gem::Specification, which will have a value similar to \"x86_64-darwin\" or \"arm64-darwin\" for its \"platform.cpu\" attribute. Darwin is also known more familiarly as \"OSX\" or \"macOS\u24c7\" and is the operating system for many Apple\u24c7 computers.","title":"Native Darwin (macOS\u24c7) platform releases (\"x86_64-darwin\" and \"arm64-darwin\")"},{"location":"LICENSE-DEPENDENCIES.html#native-windowsr-platform-releases-x86-mingw32-and-x64-mingw32","text":"The native Windows\u24c7 platform release distributes the following dependencies in source form: libxml2 libxslt libgumbo and nokogumbo zlib libiconv This distribution can be identified by inspecting the included Gem::Specification, which will have a value similar to \"x64-mingw32\" or \"x86-mingw32\" for its \"platform.cpu\" attribute.","title":"Native Windows\u24c7 platform releases (\"x86-mingw32\" and \"x64-mingw32\")"},{"location":"LICENSE-DEPENDENCIES.html#javar-jruby-platform-release-java","text":"The Java platform release distributes the following dependencies as compiled jar files: isorelax jing nekodtd nekohtml xalan xerces xml-apis This distribution can be identified by inspecting the included Gem::Specification, which will have the value \"java\" for its \"platform.os\" attribute.","title":"Java\u24c7 (JRuby) platform release (\"java\")"},{"location":"LICENSE-DEPENDENCIES.html#appendix-dependencies-license-texts","text":"This section contains a subsection for each potentially-distributed dependency, which includes the name of the license and the license text. Please see previous sections to understand which of these potential dependencies is actually distributed in the gem file you're downloading and using.","title":"Appendix: Dependencies' License Texts"},{"location":"LICENSE-DEPENDENCIES.html#libgumbo-and-nokogumbo","text":"Apache 2.0 https://github.com/rubys/nokogumbo/blob/f6a7412/LICENSE.txt Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright [yyyy] [name of copyright owner] Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"libgumbo and nokogumbo"},{"location":"LICENSE-DEPENDENCIES.html#libxml2","text":"MIT http://xmlsoft.org/ Except where otherwise noted in the source code (e.g. the files hash.c, list.c and the trio files, which are covered by a similar licence but with different Copyright notices) all the files are: Copyright (C) 1998-2012 Daniel Veillard. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is fur- nished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FIT- NESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"libxml2"},{"location":"LICENSE-DEPENDENCIES.html#libxslt","text":"MIT http://xmlsoft.org/libxslt/ Licence for libxslt except libexslt ---------------------------------------------------------------------- Copyright (C) 2001-2002 Daniel Veillard. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is fur- nished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FIT- NESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE DANIEL VEILLARD BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CON- NECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Except as contained in this notice, the name of Daniel Veillard shall not be used in advertising or otherwise to promote the sale, use or other deal- ings in this Software without prior written authorization from him. ---------------------------------------------------------------------- Licence for libexslt ---------------------------------------------------------------------- Copyright (C) 2001-2002 Thomas Broyer, Charlie Bozeman and Daniel Veillard. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is fur- nished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FIT- NESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CON- NECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Except as contained in this notice, the name of the authors shall not be used in advertising or otherwise to promote the sale, use or other deal- ings in this Software without prior written authorization from him. ----------------------------------------------------------------------","title":"libxslt"},{"location":"LICENSE-DEPENDENCIES.html#zlib","text":"zlib license http://www.zlib.net/zlib_license.html Copyright (C) 1995-2017 Jean-loup Gailly and Mark Adler This software is provided 'as-is', without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software. Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions: 1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required. 2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software. 3. This notice may not be removed or altered from any source distribution. Jean-loup Gailly Mark Adler jloup@gzip.org madler@alumni.caltech.edu","title":"zlib"},{"location":"LICENSE-DEPENDENCIES.html#libiconv","text":"LGPL https://www.gnu.org/software/libiconv/ GNU LIBRARY GENERAL PUBLIC LICENSE Version 2, June 1991 Copyright (C) 1991 Free Software Foundation, Inc. 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. [This is the first released version of the library GPL. It is numbered 2 because it goes with version 2 of the ordinary GPL.] Preamble The licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public Licenses are intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users. This license, the Library General Public License, applies to some specially designated Free Software Foundation software, and to any other libraries whose authors decide to use it. You can use it for your libraries, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs; and that you know you can do these things. To protect your rights, we need to make restrictions that forbid anyone to deny you these rights or to ask you to surrender the rights. These restrictions translate to certain responsibilities for you if you distribute copies of the library, or if you modify it. For example, if you distribute copies of the library, whether gratis or for a fee, you must give the recipients all the rights that we gave you. You must make sure that they, too, receive or can get the source code. If you link a program with the library, you must provide complete object files to the recipients so that they can relink them with the library, after making changes to the library and recompiling it. And you must show them these terms so they know their rights. Our method of protecting your rights has two steps: (1) copyright the library, and (2) offer you this license which gives you legal permission to copy, distribute and/or modify the library. Also, for each distributor's protection, we want to make certain that everyone understands that there is no warranty for this free library. If the library is modified by someone else and passed on, we want its recipients to know that what they have is not the original version, so that any problems introduced by others will not reflect on the original authors' reputations. Finally, any free program is threatened constantly by software patents. We wish to avoid the danger that companies distributing free software will individually obtain patent licenses, thus in effect transforming the program into proprietary software. To prevent this, we have made it clear that any patent must be licensed for everyone's free use or not licensed at all. Most GNU software, including some libraries, is covered by the ordinary GNU General Public License, which was designed for utility programs. This license, the GNU Library General Public License, applies to certain designated libraries. This license is quite different from the ordinary one; be sure to read it in full, and don't assume that anything in it is the same as in the ordinary license. The reason we have a separate public license for some libraries is that they blur the distinction we usually make between modifying or adding to a program and simply using it. Linking a program with a library, without changing the library, is in some sense simply using the library, and is analogous to running a utility program or application program. However, in a textual and legal sense, the linked executable is a combined work, a derivative of the original library, and the ordinary General Public License treats it as such. Because of this blurred distinction, using the ordinary General Public License for libraries did not effectively promote software sharing, because most developers did not use the libraries. We concluded that weaker conditions might promote sharing better. However, unrestricted linking of non-free programs would deprive the users of those programs of all benefit from the free status of the libraries themselves. This Library General Public License is intended to permit developers of non-free programs to use free libraries, while preserving your freedom as a user of such programs to change the free libraries that are incorporated in them. (We have not seen how to achieve this as regards changes in header files, but we have achieved it as regards changes in the actual functions of the Library.) The hope is that this will lead to faster development of free libraries. The precise terms and conditions for copying, distribution and modification follow. Pay close attention to the difference between a \"work based on the library\" and a \"work that uses the library\". The former contains code derived from the library, while the latter only works together with the library. Note that it is possible for a library to be covered by the ordinary General Public License rather than by this special one. GNU LIBRARY GENERAL PUBLIC LICENSE TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION 0. This License Agreement applies to any software library which contains a notice placed by the copyright holder or other authorized party saying it may be distributed under the terms of this Library General Public License (also called \"this License\"). Each licensee is addressed as \"you\". A \"library\" means a collection of software functions and/or data prepared so as to be conveniently linked with application programs (which use some of those functions and data) to form executables. The \"Library\", below, refers to any such software library or work which has been distributed under these terms. A \"work based on the Library\" means either the Library or any derivative work under copyright law: that is to say, a work containing the Library or a portion of it, either verbatim or with modifications and/or translated straightforwardly into another language. (Hereinafter, translation is included without limitation in the term \"modification\".) \"Source code\" for a work means the preferred form of the work for making modifications to it. For a library, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the library. Activities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running a program using the Library is not restricted, and output from such a program is covered only if its contents constitute a work based on the Library (independent of the use of the Library in a tool for writing it). Whether that is true depends on what the Library does and what the program that uses the Library does. 1. You may copy and distribute verbatim copies of the Library's complete source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and distribute a copy of this License along with the Library. You may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee. 2. You may modify your copy or copies of the Library or any portion of it, thus forming a work based on the Library, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions: a) The modified work must itself be a software library. b) You must cause the files modified to carry prominent notices stating that you changed the files and the date of any change. c) You must cause the whole of the work to be licensed at no charge to all third parties under the terms of this License. d) If a facility in the modified Library refers to a function or a table of data to be supplied by an application program that uses the facility, other than as an argument passed when the facility is invoked, then you must make a good faith effort to ensure that, in the event an application does not supply such function or table, the facility still operates, and performs whatever part of its purpose remains meaningful. (For example, a function in a library to compute square roots has a purpose that is entirely well-defined independent of the application. Therefore, Subsection 2d requires that any application-supplied function or table used by this function must be optional: if the application does not supply it, the square root function must still compute square roots.) These requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Library, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Library, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it. Thus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Library. In addition, mere aggregation of another work not based on the Library with the Library (or with a work based on the Library) on a volume of a storage or distribution medium does not bring the other work under the scope of this License. 3. You may opt to apply the terms of the ordinary GNU General Public License instead of this License to a given copy of the Library. To do this, you must alter all the notices that refer to this License, so that they refer to the ordinary GNU General Public License, version 2, instead of to this License. (If a newer version than version 2 of the ordinary GNU General Public License has appeared, then you can specify that version instead if you wish.) Do not make any other change in these notices. Once this change is made in a given copy, it is irreversible for that copy, so the ordinary GNU General Public License applies to all subsequent copies and derivative works made from that copy. This option is useful when you wish to copy part of the code of the Library into a program that is not a library. 4. You may copy and distribute the Library (or a portion or derivative of it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange. If distribution of object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place satisfies the requirement to distribute the source code, even though third parties are not compelled to copy the source along with the object code. 5. A program that contains no derivative of any portion of the Library, but is designed to work with the Library by being compiled or linked with it, is called a \"work that uses the Library\". Such a work, in isolation, is not a derivative work of the Library, and therefore falls outside the scope of this License. However, linking a \"work that uses the Library\" with the Library creates an executable that is a derivative of the Library (because it contains portions of the Library), rather than a \"work that uses the library\". The executable is therefore covered by this License. Section 6 states terms for distribution of such executables. When a \"work that uses the Library\" uses material from a header file that is part of the Library, the object code for the work may be a derivative work of the Library even though the source code is not. Whether this is true is especially significant if the work can be linked without the Library, or if the work is itself a library. The threshold for this to be true is not precisely defined by law. If such an object file uses only numerical parameters, data structure layouts and accessors, and small macros and small inline functions (ten lines or less in length), then the use of the object file is unrestricted, regardless of whether it is legally a derivative work. (Executables containing this object code plus portions of the Library will still fall under Section 6.) Otherwise, if the work is a derivative of the Library, you may distribute the object code for the work under the terms of Section 6. Any executables containing that work also fall under Section 6, whether or not they are linked directly with the Library itself. 6. As an exception to the Sections above, you may also compile or link a \"work that uses the Library\" with the Library to produce a work containing portions of the Library, and distribute that work under terms of your choice, provided that the terms permit modification of the work for the customer's own use and reverse engineering for debugging such modifications. You must give prominent notice with each copy of the work that the Library is used in it and that the Library and its use are covered by this License. You must supply a copy of this License. If the work during execution displays copyright notices, you must include the copyright notice for the Library among them, as well as a reference directing the user to the copy of this License. Also, you must do one of these things: a) Accompany the work with the complete corresponding machine-readable source code for the Library including whatever changes were used in the work (which must be distributed under Sections 1 and 2 above); and, if the work is an executable linked with the Library, with the complete machine-readable \"work that uses the Library\", as object code and/or source code, so that the user can modify the Library and then relink to produce a modified executable containing the modified Library. (It is understood that the user who changes the contents of definitions files in the Library will not necessarily be able to recompile the application to use the modified definitions.) b) Accompany the work with a written offer, valid for at least three years, to give the same user the materials specified in Subsection 6a, above, for a charge no more than the cost of performing this distribution. c) If distribution of the work is made by offering access to copy from a designated place, offer equivalent access to copy the above specified materials from the same place. d) Verify that the user has already received a copy of these materials or that you have already sent this user a copy. For an executable, the required form of the \"work that uses the Library\" must include any data and utility programs needed for reproducing the executable from it. However, as a special exception, the source code distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable. It may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system. Such a contradiction means you cannot use both them and the Library together in an executable that you distribute. 7. You may place library facilities that are a work based on the Library side-by-side in a single library together with other library facilities not covered by this License, and distribute such a combined library, provided that the separate distribution of the work based on the Library and of the other library facilities is otherwise permitted, and provided that you do these two things: a) Accompany the combined library with a copy of the same work based on the Library, uncombined with any other library facilities. This must be distributed under the terms of the Sections above. b) Give prominent notice with the combined library of the fact that part of it is a work based on the Library, and explaining where to find the accompanying uncombined form of the same work. 8. You may not copy, modify, sublicense, link with, or distribute the Library except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense, link with, or distribute the Library is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance. 9. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Library or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Library (or any work based on the Library), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Library or works based on it. 10. Each time you redistribute the Library (or any work based on the Library), the recipient automatically receives a license from the original licensor to copy, distribute, link with or modify the Library subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties to this License. 11. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Library at all. For example, if a patent license would not permit royalty-free redistribution of the Library by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Library. If any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply, and the section as a whole is intended to apply in other circumstances. It is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice. This section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License. 12. If the distribution and/or use of the Library is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Library under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License. 13. The Free Software Foundation may publish revised and/or new versions of the Library General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Library specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Library does not specify a license version number, you may choose any version ever published by the Free Software Foundation. 14. If you wish to incorporate parts of the Library into other free programs whose distribution conditions are incompatible with these, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally. NO WARRANTY 15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE LIBRARY IS WITH YOU. SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. END OF TERMS AND CONDITIONS Appendix: How to Apply These Terms to Your New Libraries If you develop a new library, and you want it to be of the greatest possible use to the public, we recommend making it free software that everyone can redistribute and change. You can do so by permitting redistribution under these terms (or, alternatively, under the terms of the ordinary General Public License). To apply these terms, attach the following notices to the library. It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. <one line to give the library's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This library is free software; you can redistribute it and/or modify it under the terms of the GNU Library General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public License for more details. You should have received a copy of the GNU Library General Public License along with this library; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA Also add information on how to contact you by electronic and paper mail. You should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the library, if necessary. Here is a sample; alter the names: Yoyodyne, Inc., hereby disclaims all copyright interest in the library `Frob' (a library for tweaking knobs) written by James Random Hacker. <signature of Ty Coon>, 1 April 1990 Ty Coon, President of Vice That's all there is to it!","title":"libiconv"},{"location":"LICENSE-DEPENDENCIES.html#isorelax","text":"MIT http://iso-relax.sourceforge.net/ Copyright (c) 2001-2002, SourceForge ISO-RELAX Project (ASAMI Tomoharu, Daisuke Okajima, Kohsuke Kawaguchi, and MURATA Makoto) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"isorelax"},{"location":"LICENSE-DEPENDENCIES.html#jing","text":"BSD-3-Clause http://www.thaiopensource.com/relaxng/jing.html Copyright (c) 2001-2003 Thai Open Source Software Center Ltd All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. * Neither the name of the Thai Open Source Software Center Ltd nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"jing"},{"location":"LICENSE-DEPENDENCIES.html#nekodtd","text":"Apache 1.0-derived https://people.apache.org/~andyc/neko/doc/dtd/ The CyberNeko Software License, Version 1.0 (C) Copyright 2002-2005, Andy Clark. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. 3. The end-user documentation included with the redistribution, if any, must include the following acknowledgment: \"This product includes software developed by Andy Clark.\" Alternately, this acknowledgment may appear in the software itself, if and wherever such third-party acknowledgments normally appear. 4. The names \"CyberNeko\" and \"NekoHTML\" must not be used to endorse or promote products derived from this software without prior written permission. For written permission, please contact andyc@cyberneko.net. 5. Products derived from this software may not be called \"CyberNeko\", nor may \"CyberNeko\" appear in their name, without prior written permission of the author. THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR OTHER CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. ==================================================================== This license is based on the Apache Software License, version 1.1.","title":"nekodtd"},{"location":"LICENSE-DEPENDENCIES.html#nekohtml","text":"Apache 2.0 http://nekohtml.sourceforge.net/ Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright [yyyy] [name of copyright owner] Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"nekohtml"},{"location":"LICENSE-DEPENDENCIES.html#xalan","text":"Apache 2.0 https://xml.apache.org/xalan-j/ covers xalan.jar and serializer.jar Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright [yyyy] [name of copyright owner] Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"xalan"},{"location":"LICENSE-DEPENDENCIES.html#xerces","text":"Apache 2.0 https://xerces.apache.org/xerces2-j/ Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright [yyyy] [name of copyright owner] Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"xerces"},{"location":"LICENSE-DEPENDENCIES.html#xml-apis","text":"Apache 2.0 https://xerces.apache.org/xml-commons/ Unless otherwise noted all files in XML Commons are covered under the Apache License Version 2.0. Please read the LICENSE and NOTICE files. XML Commons contains some software and documentation that is covered under a number of different licenses. This applies particularly to the xml-commons/java/external/ directory. Most files under xml-commons/java/external/ are covered under their respective LICENSE.*.txt files; see the matching README.*.txt files for descriptions. Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright [yyyy] [name of copyright owner] Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"xml-apis"},{"location":"LICENSE.html","text":"The MIT License Copyright 2008 -- 2021 by Mike Dalessio, Aaron Patterson, Yoko Harada, Akinori MUSHA, John Shahid, Karol Bucek, Sam Ruby, Craig Barnes, Stephen Checkoway, Lars Kanis, Sergio Arbeo, Timothy Elliott, Nobuyoshi Nakada, Charles Nutter, Patrick Mahoney. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"ROADMAP.html","text":"Roadmap for API Changes \u00b6 overhaul serialize/pretty printing API \u00b6 #530 XHTML formatting can't be turned off #415 XML formatting should be no formatting overhaul and optimize the SAX parsing \u00b6 see fairy wing throwdown - SAX parsing is wicked slow. Node should not be Enumerable; and should have a better attributes API \u00b6 #679 Mixing in Enumerable has some unintended consequences; plus we want to improve the attributes API Some ideas for a better attributes API? (closed) #666 #765 improve CSS query parsing \u00b6 #528 support :not() with a nontrivial argument, like :not(div p.c) #451 chained :not pseudoselectors better jQuery selector and CSS pseudo-selector support: #621 #342 #628 #652 #688 #394 nth-of-type is wrong, and possibly other selectors as well #309 incorrect query being executed #350 :has is wrong? DocumentFragment \u00b6 there are a few tickets about searches not working properly if you use or do not use the context node as part of the search. #213 #370 #454 #572 could we fix this by making DocumentFragment be a subclass of NodeSet? Better Syntax for custom XPath function handler \u00b6 PR#464 Better Syntax around Node#xpath and NodeSet#xpath \u00b6 look at those methods, and use of Node#extract_params in Node#{css,search} we should standardize on a hash of options for these and other calls what should NodeSet#xpath return? #656 Encoding \u00b6 We have a lot of issues open around encoding. How bad are things? Somebody who knows encoding well should head this up. Extract EncodingReader as a real object that can be injected https://groups.google.com/forum/#!msg/nokogiri-talk/arJeAtMqvkg/tGihB-iBRSAJ Reader \u00b6 It's fundamentally broken, in that we can't stop people from crashing their application if they want to use object reference unsafely. Class methods that require Document \u00b6 There are a few methods, like Nokogiri::XML::Comment.new that require a Document object. We should probably make Document instance methods to wrap this, since it's a non-obvious expectation and thus fails as a convention. So, instead, let's make alternative methods like Nokogiri::XML::Document#new_comment , and recommend those as the proper convention. collect_namespaces is just broken \u00b6 collect_namespaces is returning a hash, which means it can't return namespaces with the same prefix. See this issue for background: #885 Do we care? This seems like a useless method, but then again I hate XML, so what do I know? Overhaul ParseOptions \u00b6 Currently we mirror libxml2's parse options, and then retrofit those options on top of Xerces-J for JRuby. I'd like to identify which options work across both parsers, And overhaul the parse methods so that these options are easier to use. By \"easier to use\" I mean: it's unwieldy to create a block to set/unset parse options it's unwieldy to create a constant like MY_PARSE_OPTIONS = Nokogiri::XML::ParseOptions::STRICT | Nokogiri::XML::ParseOptions::RECOVER ... some options are named dangerously poorly, like NOENT which does the opposite of what it says semantically some options should be set/unset together, specifically \"this is a trusted document\" or \"this is an untrusted document\" should flip the senses of NONET and NOENT and DTDLOAD together. we need the ability to invent new parse options, like the one suggested in #1582 that would allow local entities but not external entities.","title":"Roadmap"},{"location":"ROADMAP.html#roadmap-for-api-changes","text":"","title":"Roadmap for API Changes"},{"location":"ROADMAP.html#overhaul-serializepretty-printing-api","text":"#530 XHTML formatting can't be turned off #415 XML formatting should be no formatting","title":"overhaul serialize/pretty printing API"},{"location":"ROADMAP.html#overhaul-and-optimize-the-sax-parsing","text":"see fairy wing throwdown - SAX parsing is wicked slow.","title":"overhaul and optimize the SAX parsing"},{"location":"ROADMAP.html#node-should-not-be-enumerable-and-should-have-a-better-attributes-api","text":"#679 Mixing in Enumerable has some unintended consequences; plus we want to improve the attributes API Some ideas for a better attributes API? (closed) #666 #765","title":"Node should not be Enumerable; and should have a better attributes API"},{"location":"ROADMAP.html#improve-css-query-parsing","text":"#528 support :not() with a nontrivial argument, like :not(div p.c) #451 chained :not pseudoselectors better jQuery selector and CSS pseudo-selector support: #621 #342 #628 #652 #688 #394 nth-of-type is wrong, and possibly other selectors as well #309 incorrect query being executed #350 :has is wrong?","title":"improve CSS query parsing"},{"location":"ROADMAP.html#documentfragment","text":"there are a few tickets about searches not working properly if you use or do not use the context node as part of the search. #213 #370 #454 #572 could we fix this by making DocumentFragment be a subclass of NodeSet?","title":"DocumentFragment"},{"location":"ROADMAP.html#better-syntax-for-custom-xpath-function-handler","text":"PR#464","title":"Better Syntax for custom XPath function handler"},{"location":"ROADMAP.html#better-syntax-around-nodexpath-and-nodesetxpath","text":"look at those methods, and use of Node#extract_params in Node#{css,search} we should standardize on a hash of options for these and other calls what should NodeSet#xpath return? #656","title":"Better Syntax around Node#xpath and NodeSet#xpath"},{"location":"ROADMAP.html#encoding","text":"We have a lot of issues open around encoding. How bad are things? Somebody who knows encoding well should head this up. Extract EncodingReader as a real object that can be injected https://groups.google.com/forum/#!msg/nokogiri-talk/arJeAtMqvkg/tGihB-iBRSAJ","title":"Encoding"},{"location":"ROADMAP.html#reader","text":"It's fundamentally broken, in that we can't stop people from crashing their application if they want to use object reference unsafely.","title":"Reader"},{"location":"ROADMAP.html#class-methods-that-require-document","text":"There are a few methods, like Nokogiri::XML::Comment.new that require a Document object. We should probably make Document instance methods to wrap this, since it's a non-obvious expectation and thus fails as a convention. So, instead, let's make alternative methods like Nokogiri::XML::Document#new_comment , and recommend those as the proper convention.","title":"Class methods that require Document"},{"location":"ROADMAP.html#collect_namespaces-is-just-broken","text":"collect_namespaces is returning a hash, which means it can't return namespaces with the same prefix. See this issue for background: #885 Do we care? This seems like a useless method, but then again I hate XML, so what do I know?","title":"collect_namespaces is just broken"},{"location":"ROADMAP.html#overhaul-parseoptions","text":"Currently we mirror libxml2's parse options, and then retrofit those options on top of Xerces-J for JRuby. I'd like to identify which options work across both parsers, And overhaul the parse methods so that these options are easier to use. By \"easier to use\" I mean: it's unwieldy to create a block to set/unset parse options it's unwieldy to create a constant like MY_PARSE_OPTIONS = Nokogiri::XML::ParseOptions::STRICT | Nokogiri::XML::ParseOptions::RECOVER ... some options are named dangerously poorly, like NOENT which does the opposite of what it says semantically some options should be set/unset together, specifically \"this is a trusted document\" or \"this is an untrusted document\" should flip the senses of NONET and NOENT and DTDLOAD together. we need the ability to invent new parse options, like the one suggested in #1582 that would allow local entities but not external entities.","title":"Overhaul ParseOptions"},{"location":"SECURITY.html","text":"Security and Vulnerability Reporting \u00b6 The Nokogiri Core Contributors take security very seriously and investigate all reported vulnerabilities. If you would like to report a vulnerablity or have a security concern regarding Nokogiri or how Nokogiri is using any of its underlying platform-specific libraries (such as libxml2 or xerces), please report it via HackerOne . Your report will be acknowledged within 24 hours, and you'll receive a more detailed response within 72 hours indicating next steps in handling your report. If you have not received a reply to your submission within 48 hours, there are a few steps you can take: Contact the current security coordinator (Mike Dalessio mike.dalessio@gmail.com ) Contact the core contributor mailing list ( nokogiri-core@googlegroups.com ) Join the nokogiri-talk group Please note, the nokogiri-talk list is a public area. When escalating in that venue, please do not discuss your issue. Simply say that you're trying to get a hold of someone from the core team. The information you share with the Nokogiri Core Contributors as part of this process will be kept confidential within the team, unless or until we need to share information upstream with our dependent libraries' core teams, at which point we will notify you. If a vulnerability is first reported by you, we will credit you with the discovery in the public disclosure.","title":"Security"},{"location":"SECURITY.html#security-and-vulnerability-reporting","text":"The Nokogiri Core Contributors take security very seriously and investigate all reported vulnerabilities. If you would like to report a vulnerablity or have a security concern regarding Nokogiri or how Nokogiri is using any of its underlying platform-specific libraries (such as libxml2 or xerces), please report it via HackerOne . Your report will be acknowledged within 24 hours, and you'll receive a more detailed response within 72 hours indicating next steps in handling your report. If you have not received a reply to your submission within 48 hours, there are a few steps you can take: Contact the current security coordinator (Mike Dalessio mike.dalessio@gmail.com ) Contact the core contributor mailing list ( nokogiri-core@googlegroups.com ) Join the nokogiri-talk group Please note, the nokogiri-talk list is a public area. When escalating in that venue, please do not discuss your issue. Simply say that you're trying to get a hold of someone from the core team. The information you share with the Nokogiri Core Contributors as part of this process will be kept confidential within the team, unless or until we need to share information upstream with our dependent libraries' core teams, at which point we will notify you. If a vulnerability is first reported by you, we will credit you with the discovery in the public disclosure.","title":"Security and Vulnerability Reporting"},{"location":"tidelift-landing.html","text":"Nokogiri for Enterprise \u00b6 Available as part of the Tidelift Subscription \u00b6 Tidelift is working with the maintainers of Nokogiri and thousands of other open source projects to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn More Request a Demo Enterprise-ready open source software \u2014 managed for you \u00b6 The Tidelift Subscription is a managed open source subscription for application dependencies covering millions of open source projects across JavaScript, Python, Java, PHP, Ruby, .NET, and more. Your subscription includes: Security updates \u00b6 Tidelift\u2019s security response team coordinates patches for new breaking security vulnerabilities and alerts immediately through a private channel, so your software supply chain is always secure. Licensing verification and indemnification \u00b6 Tidelift verifies license information to enable easy policy enforcement and adds intellectual property indemnification to cover creators and users in case something goes wrong. You always have a 100% up-to-date bill of materials for your dependencies to share with your legal team, customers, or partners. Maintenance and code improvement \u00b6 Tidelift ensures the software you rely on keeps working as long as you need it to work. Your managed dependencies are actively maintained and we recruit additional maintainers where required. Package selection and version guidance \u00b6 We help you choose the best open source packages from the start\u2014and then guide you through updates to stay on the best releases as new issues arise. Roadmap input \u00b6 Take a seat at the table with the creators behind the software you use. Tidelift\u2019s participating maintainers earn more income as their software is used by more subscribers, so they\u2019re interested in knowing what you need. Tooling and cloud integration \u00b6 Tidelift works with GitHub, GitLab, BitBucket, and more. We support every cloud platform (and other deployment targets, too). The end result? \u00b6 All of the capabilities you expect from commercial-grade software, for the full breadth of open source you use. That means less time grappling with esoteric open source trivia, and more time building your own applications\u2014and your business. Learn More Request a Demo","title":"Nokogiri for Enterprise"},{"location":"tidelift-landing.html#nokogiri-for-enterprise","text":"","title":"Nokogiri for Enterprise"},{"location":"tidelift-landing.html#available-as-part-of-the-tidelift-subscription","text":"Tidelift is working with the maintainers of Nokogiri and thousands of other open source projects to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn More Request a Demo","title":"Available as part of the Tidelift Subscription"},{"location":"tidelift-landing.html#enterprise-ready-open-source-software-managed-for-you","text":"The Tidelift Subscription is a managed open source subscription for application dependencies covering millions of open source projects across JavaScript, Python, Java, PHP, Ruby, .NET, and more. Your subscription includes:","title":"Enterprise-ready open source software \u2014 managed for you"},{"location":"tidelift-landing.html#security-updates","text":"Tidelift\u2019s security response team coordinates patches for new breaking security vulnerabilities and alerts immediately through a private channel, so your software supply chain is always secure.","title":"Security updates"},{"location":"tidelift-landing.html#licensing-verification-and-indemnification","text":"Tidelift verifies license information to enable easy policy enforcement and adds intellectual property indemnification to cover creators and users in case something goes wrong. You always have a 100% up-to-date bill of materials for your dependencies to share with your legal team, customers, or partners.","title":"Licensing verification and indemnification"},{"location":"tidelift-landing.html#maintenance-and-code-improvement","text":"Tidelift ensures the software you rely on keeps working as long as you need it to work. Your managed dependencies are actively maintained and we recruit additional maintainers where required.","title":"Maintenance and code improvement"},{"location":"tidelift-landing.html#package-selection-and-version-guidance","text":"We help you choose the best open source packages from the start\u2014and then guide you through updates to stay on the best releases as new issues arise.","title":"Package selection and version guidance"},{"location":"tidelift-landing.html#roadmap-input","text":"Take a seat at the table with the creators behind the software you use. Tidelift\u2019s participating maintainers earn more income as their software is used by more subscribers, so they\u2019re interested in knowing what you need.","title":"Roadmap input"},{"location":"tidelift-landing.html#tooling-and-cloud-integration","text":"Tidelift works with GitHub, GitLab, BitBucket, and more. We support every cloud platform (and other deployment targets, too).","title":"Tooling and cloud integration"},{"location":"tidelift-landing.html#the-end-result","text":"All of the capabilities you expect from commercial-grade software, for the full breadth of open source you use. That means less time grappling with esoteric open source trivia, and more time building your own applications\u2014and your business. Learn More Request a Demo","title":"The end result?"},{"location":"tutorials/ensuring_well_formed_markup.html","text":"Ensuring Well-Formed Markup \u00b6 Gentle Well-Formedness \u00b6 We've all seen bad markup in our day. I'm talking about markup that doesn't bother to close tags. I'm talking about putting <p> tags inside <p> tags, and putting content into an <img> tag. Nokogiri corrects bad markup like a boss , similarly to how a browser would before rendering. badly_formed = <<- EOXML <root> <open>foo <closed>bar</closed> </root> EOXML bad_doc = Nokogiri :: XML badly_formed puts bad_doc # => <?xml version=\"1.0\"?> # <root> # <open>foo # <closed>bar</closed> # </open> # </root> And Nokogiri will even keep track of what the errors were, if the parse option NOERRORS and NOWARNINGS are turned off (the default for XML documents). puts bad_doc . errors # => Opening and ending tag mismatch: open line 2 and root # Premature end of data in tag root line 1 Thus, you could use errors.empty? to determine whether the document was well-formed. Strict Well-Formedness \u00b6 Being friendly and fixing markup is all well and good, but sometimes you need to be a Markup Nazi . If you demand compliance from your XML, then you can configure Nokogiri into \"strict\" parsing mode, in which it will raise an exception at the first sign of malformedness: begin bad_doc = Nokogiri :: XML ( badly_formed ) { | config | config . strict } rescue Nokogiri :: XML :: SyntaxError => e puts \"caught exception: #{ e } \" end # => caught exception: Premature end of data in tag root line 1","title":"Ensuring well-formed markup"},{"location":"tutorials/ensuring_well_formed_markup.html#ensuring-well-formed-markup","text":"","title":"Ensuring Well-Formed Markup"},{"location":"tutorials/ensuring_well_formed_markup.html#gentle-well-formedness","text":"We've all seen bad markup in our day. I'm talking about markup that doesn't bother to close tags. I'm talking about putting <p> tags inside <p> tags, and putting content into an <img> tag. Nokogiri corrects bad markup like a boss , similarly to how a browser would before rendering. badly_formed = <<- EOXML <root> <open>foo <closed>bar</closed> </root> EOXML bad_doc = Nokogiri :: XML badly_formed puts bad_doc # => <?xml version=\"1.0\"?> # <root> # <open>foo # <closed>bar</closed> # </open> # </root> And Nokogiri will even keep track of what the errors were, if the parse option NOERRORS and NOWARNINGS are turned off (the default for XML documents). puts bad_doc . errors # => Opening and ending tag mismatch: open line 2 and root # Premature end of data in tag root line 1 Thus, you could use errors.empty? to determine whether the document was well-formed.","title":"Gentle Well-Formedness"},{"location":"tutorials/ensuring_well_formed_markup.html#strict-well-formedness","text":"Being friendly and fixing markup is all well and good, but sometimes you need to be a Markup Nazi . If you demand compliance from your XML, then you can configure Nokogiri into \"strict\" parsing mode, in which it will raise an exception at the first sign of malformedness: begin bad_doc = Nokogiri :: XML ( badly_formed ) { | config | config . strict } rescue Nokogiri :: XML :: SyntaxError => e puts \"caught exception: #{ e } \" end # => caught exception: Premature end of data in tag root line 1","title":"Strict Well-Formedness"},{"location":"tutorials/getting_help.html","text":"Support, Getting Help, and Reporting Issues \u00b6 All official documentation is posted at https://nokogiri.org (the source for which is at https://github.com/sparklemotion/nokogiri.org/ , and we welcome contributions). Consider subscribing to Tidelift which provides license assurances and timely security notifications for your open source dependencies, including Nokogiri. Tidelift subscriptions also help the Nokogiri maintainers fund our automated testing which in turn allows us to ship releases, bugfixes, and security updates more often. Reading \u00b6 Your first stops for learning more about Nokogiri should be: API Documentation Tutorials An excellent community-maintained Cheat Sheet Ask For Help \u00b6 There are a few ways to ask exploratory questions: The Ruby Discord chat server is active at https://discord.gg/UyQnKrT The Nokogiri mailing list is active at https://groups.google.com/group/nokogiri-talk Open an issue using the \"Help Request\" template at https://github.com/sparklemotion/nokogiri/issues Please do not mail the maintainers at their personal addresses. Report A Bug \u00b6 The Nokogiri bug tracker is at https://github.com/sparklemotion/nokogiri/issues Please use the \"Bug Report\" or \"Installation Difficulties\" templates. Security and Vulnerability Reporting \u00b6 Please report vulnerabilities at https://hackerone.com/nokogiri Full information and description of our security policy is in SECURITY.md","title":"Getting Help"},{"location":"tutorials/getting_help.html#support-getting-help-and-reporting-issues","text":"All official documentation is posted at https://nokogiri.org (the source for which is at https://github.com/sparklemotion/nokogiri.org/ , and we welcome contributions). Consider subscribing to Tidelift which provides license assurances and timely security notifications for your open source dependencies, including Nokogiri. Tidelift subscriptions also help the Nokogiri maintainers fund our automated testing which in turn allows us to ship releases, bugfixes, and security updates more often.","title":"Support, Getting Help, and Reporting Issues"},{"location":"tutorials/getting_help.html#reading","text":"Your first stops for learning more about Nokogiri should be: API Documentation Tutorials An excellent community-maintained Cheat Sheet","title":"Reading"},{"location":"tutorials/getting_help.html#ask-for-help","text":"There are a few ways to ask exploratory questions: The Ruby Discord chat server is active at https://discord.gg/UyQnKrT The Nokogiri mailing list is active at https://groups.google.com/group/nokogiri-talk Open an issue using the \"Help Request\" template at https://github.com/sparklemotion/nokogiri/issues Please do not mail the maintainers at their personal addresses.","title":"Ask For Help"},{"location":"tutorials/getting_help.html#report-a-bug","text":"The Nokogiri bug tracker is at https://github.com/sparklemotion/nokogiri/issues Please use the \"Bug Report\" or \"Installation Difficulties\" templates.","title":"Report A Bug"},{"location":"tutorials/getting_help.html#security-and-vulnerability-reporting","text":"Please report vulnerabilities at https://hackerone.com/nokogiri Full information and description of our security policy is in SECURITY.md","title":"Security and Vulnerability Reporting"},{"location":"tutorials/installing_nokogiri.html","text":"Installing Nokogiri \u00b6 Welcome! We've spent quite a bit of time over the past year trying to make Nokogiri v1.11 easy and reliable to install. This page should hopefully get you on your way quickly. Meta \u00b6 The current version of this page focuses on the installation experience for Nokogiri v1.11.x. If you're trying to install an earlier version, please visit: Nokogiri v1.10.x installation instructions If this document doesn't address your problem, please jump over to Getting Help . If you'd like to contribute improvements to this document, please open a GitHub issue or pull-request on nokogiri.org/installing_nokogiri.md . Installing Native Gems \u00b6 Faster, more reliable installation \u00b6 \"Native gems\" contain pre-compiled libraries for a specific machine architecture. On supported platforms, this removes the need for compiling the C extension and the packaged libraries, or for system dependencies to exist. This results in much faster installation and more reliable installation , which as you probably know are the biggest headaches for Nokogiri users. Supported Platforms \u00b6 As of v1.11.0, Nokogiri ships pre-compiled, \"native\" gems for the following platforms: Linux: x86-linux and x86_64-linux (req: glibc >= 2.17 ), including musl platforms like Alpine Darwin/MacOS: x86_64-darwin and arm64-darwin Windows: x86-mingw32 and x64-mingw32 Java: any platform running JRuby 9.2 or higher To determine whether your system supports one of these gems, look at the output of bundle platform or ruby -e 'puts Gem::Platform.local.to_s' . If you're on a supported platform, either gem install or bundle install should install a native gem without any additional action on your part. This installation should only take a few seconds, and your output should look something like: $ gem install nokogiri Fetching nokogiri-1.11.0-x86_64-linux.gem Successfully installed nokogiri-1.11.0-x86_64-linux 1 gem installed Why would I not want to use a native gem? \u00b6 I can imagine some folks might have trust issues; if this is you, please let us know in a comment at RFC: Increase the level of trust in released gem files \u00b7 Issue #2013 \u00b7 sparklemotion/nokogiri . What can we do to increase that trust? (I can imagine providing a chain of custody including public build logs with cryptographic hashes of artifacts, but I'd like to hear from real users.) Anybody on a linux system old enough to not have glibc >= 2.17 will need to install from the ruby platform gem. If you have other reasons for not wanting to use a precompiled native gem, let us know! (See Getting Help .) How can I avoid using a precompiled native gem? \u00b6 The Nokogiri maintainers strongly urge you to use a native gem if at all possible. We expect it will be a much better experience for you and allow us to focus our efforts on improving functionality rather than diagnosing installation issues. If you're on a platform that supports a native gem but you want to avoid using it in your project, do one of the following: If you're not using Bundler, then run gem install nokogiri --platform=ruby If you are using Bundler version 2.1 or later, then you'll need to run bundle config set force_ruby_platform true , version 2.0 or earlier, then you'll need to run bundle config force_ruby_platform true Installing the ruby platform gem \u00b6 Again, we recommend that you upgrade to v1.11.x and use a native gem whenever possible. If you're here, it should be because you're on an older version, or you're on an unsupported platform. Before you begin, make sure you have the full compiler toolchain for compiling Ruby C Extensions. See Appendix A: The Compiler Toolchain . Installing Using The Packaged Libraries \u00b6 Nokogiri packages its own updated and patched copies of libxml2 and libxslt source code. By default, installation of Nokogiri will compile and use these packaged libraries. If you don't see your operating system / distro in this section, then no additional setup is required beyond Appendix A: The Compiler Toolchain . Just run gem install nokogiri --platform=ruby . Ubuntu or Debian-based Distros sudo apt-get install zlib1g-dev liblzma-dev patch gem install nokogiri --platform = ruby You may substitute git for patch ( mini_portile2 can use either for applying patches). Fedora, Red Hat, and CentOS dnf install -y zlib-devel gem install nokogiri --platform = ruby OpenBSD < 6.2 Use gcc from ports in order to compile the packaged libraries: pkg_add -v gcc gem install nokogiri --platform = ruby Installing Using Standard System Libraries \u00b6 Rather than use Nokogiri's packaged versions, you may prefer to use your system's or distro's standard libxml2/libxslt libraries. This section will try to help you do that. Nokogiri will refuse to build against older, unsupported versions of libxml2 and libxslt , and there may be some behavioral changes when using older versions. If you have installed libxml2 or libxslt to a custom location, please jump to the next section, Installing With Custom / Non-Standard Libraries . If you don't see your operating system or distro listed below, then no additional setup is required beyond Appendix A: The Compiler Toolchain . Just run gem install nokogiri --platform=ruby -- --use-system-libraries . Or, if you're using bundler, bundle config build.nokogiri --use-system-libraries . Debian/Ubuntu sudo apt-get install pkg-config libxml2-dev libxslt-dev gem install nokogiri --platform = ruby -- --use-system-libraries MacOS If you're using homebrew: brew install libxml2 libxslt gem install nokogiri --platform = ruby -- --use-system-libraries If you're using macports and would like to contribute documentation, please open a GitHub issue or pull-request on nokogiri.org/installing_nokogiri.md . FreeBSD sudo pkg install pkgconf gem install nokogiri --platform = ruby -- --use-system-libraries Windows We recommend installing Nokogiri against the MSYS2 system libraries: ridk exec pacman -S mingw-w64-x86_64-libxslt gem install nokogiri --platform = ruby -- --use-system-libraries Installing With Custom / Non-Standard Libraries \u00b6 You may have your own custom version of libxml2/libxslt that you'd like to use. OK! Here we go. Ideally you can install pkg-config and the installed libraries should self-describe how to compile and build against themselves. But if: you've got libxml2 and/or libxslt installed in a nonstandard place, and you don't have pkg-config installed ... then you can use command-line parameters to the gem install command to specify build parameters. You can specify the installation root directory: gem install nokogiri -- \\ --use-system-libraries \\ --with-xml2-dir = /path/to/dir \\ --with-xslt-dir = /path/to/dir or, you can specify include and library directories separately: gem install nokogiri -- \\ --use-system-libraries \\ --with-xml2-lib = /path/to/builds/lib \\ --with-xml2-include = /path/to/builds/include/libxml2 \\ --with-xslt-lib = /path/to/builds/lib \\ --with-xslt-include = /path/to/builds/include Note: By default, libxslt header files are installed into the root include directory, but libxml2 header files are installed into a subdirectory thereof named libxml2 . It's likely that you'll also need to specify the location of your zlib and iconv (and possibly exslt ) install directories as well. In that case, you can add the options: gem install nokogiri -- \\ --use-system-libraries \\ # ... --with-iconv-dir = /path/to/dir \\ --with-zlib-dir = /path/to/dir \\ [ --with-exslt-dir = /path/to/dir ] [ --with-exslt-config = /path/to/exslt-config ] You can also tell bundler to remember these configuration parameters: bundle config build.nokogiri \\ --use-system-libraries \\ --with-xml2-lib = /usr/local/lib \\ --with-xml2-include = /usr/local/include/libxml2/libxml \\ --with-xslt-lib = /usr/local/lib \\ --with-xslt-include = /usr/local/include/libxslt \\ --with-iconv-lib = /usr/local/lib \\ --with-iconv-include = /usr/local/include Do not attempt Bundler installation using Bundler versions before v1.8.3 (see bundler/bundler#3053 for details). If you really must, see earlier git history of this file , which includes a workaround. Installing Third-Party Distributions of Nokogiri \u00b6 Debian See https://packages.debian.org/sid/ruby-nokogiri sudo apt-get install ruby-nokogiri openSUSE/SLE See https://download.opensuse.org/repositories/devel:/languages:/ruby:/extensions/ Fedora, Red Hat, and CentOS You may install the appropriate epel-release and get the Nokogiri package from EPEL using: sudo dnf install -y rubygem-nokogiri GNU Guix Install on any Linux distribution using GNU Guix , a reproducible binary software package management and distribution system. Use this command: guix package -i ruby-nokogiri Note: source code is available here . A short description of how Nokogiri was packaged can be found here . Other Installation Scenarios \u00b6 Alpine Docker Images To just install the native gem: FROM ruby:3.0-alpine RUN gem install nokogiri To compile with the packaged libraries: FROM ruby:3.0-alpine RUN apk add --no-cache build-base RUN gem install nokogiri --platform = ruby To compile against Alpine's own XML libraries, add the necessary development tools and libraries to the image. FROM ruby:3.0-alpine RUN apk add --no-cache build-base libxml2-dev libxslt-dev RUN gem install nokogiri --platform = ruby -- --use-system-libraries When optimizing the size of an Alpine image, the runtime libraries must be permanently added. Additionally, adding and removing development tooling can be chained with gem installation to ensure a small layer. FROM ruby:3.0-alpine RUN apk add --no-cache libxml2 libxslt && \\ apk add --no-cache --virtual .gem-installdeps build-base libxml2-dev libxslt-dev && \\ gem install nokogiri --platform = ruby -- --use-system-libraries && \\ rm -rf $GEM_HOME /cache && \\ apk del .gem-installdeps This approach nets an 12.1 MB layer (versus 18.1 MB without --use-system-libraries ) and saves over 170 MB in build tools. TermUX Although TermUX isn't fully supported right now, some people have reported success getting Nokogiri installed on it by running these commands: pkg install ruby clang make pkg-config libxslt gem install nokogiri --platform = ruby -- --use-system-libraries SmartOS (Nonstandard) SmartOS installation requires building and using libxml2/libxslt/libiconv in a nonstandard location. Building on the previous section, here's how to do it: (Note: pkgsrc is included in JPC SmartOS instances) pkgin install ruby gcc49 libxml2 libxslt zlib libiconv ruby22-rake gmake ln -s /opt/local/gcc49/bin/gcc /opt/local/bin/gcc gem install nokogiri -- \\ --use-system-libraries \\ --with-xml2-lib = /opt/local/lib \\ --with-xml2-include = /opt/local/include/libxml2 \\ --with-xslt-lib = /opt/local/lib \\ --with-xslt-include = /opt/local/include/libxslt \\ --with-iconv-lib = /opt/local/lib \\ --with-iconv-include = /opt/local/include \\ --with-zlib-dir = /opt/local/lib See the previous section for guidance on how to instruct Bundler to use these options. Troubleshooting \u00b6 Using vendor/cache to deploy to another architecture \u00b6 A common workflow is for a team to develop on a Mac but deploy to production on Linux. This workflow depends on Bundler caching an appropriate gem file in vendor/cache . Unfortunately, in this situation Bundler's default behavior is to cache only gems for the development system and not the production system, leading to an error at deploy time. Symptoms During deployment, the buildpack may fail to find a relevant gem in vendor/cache and emit an error like this (from Heroku): -----> Ruby app detected -----> Installing bundler 2.1.4 -----> Removing BUNDLED WITH version in the Gemfile.lock -----> Compiling Ruby/Rails -----> Using Ruby version: ruby-2.7.2 -----> Installing dependencies using bundler 2.1.4 Running: BUNDLE_WITHOUT='development:test' BUNDLE_PATH=vendor/bundle BUNDLE_BIN=vendor/bundle/bin BUNDLE_DEPLOYMENT=1 bundle install -j4 Some gems seem to be missing from your vendor/cache directory. Could not find nokogiri-1.11.0 in any of the sources Bundler Output: Some gems seem to be missing from your vendor/cache directory. Could not find nokogiri-1.11.0 in any of the sources ! ! Failed to install gems via Bundler. ! ! Push rejected, failed to compile Ruby app. ! Push failed Solution Bundler 2.2 and later has great multiplatform support and allows you to cache gems for multiple platforms. You can run commands like these to cause Bundler to fetch and cache gems for all the named platforms: bundle lock --add-platform x86_64-darwin bundle lock --add-platform x86_64-linux bundle package --all-platforms For more information, please read this wonderful blog post written by Kevin Murphy explaining this approach. Fallback Solution If you can't upgrade to Bundler 2.2 (or later), you can force older versions to always use the ruby platform, which supports all platforms, but applies to all gems and comes with the installation challenges mentioned earlier in this guide. Here's how to do this with Bundler 2.1 or later: rm -rf vendor/cache bundle config set force_ruby_platform true bundle install Or if you're on version 2.0 or earlier: rm -rf vendor/cache bundle config force_ruby_platform true bundle install Cannot install racc \u00b6 As of v1.11.0, Nokogiri is declaring an explicit dependency on racc ~> 1.4 , which itself is a C extension that users may have trouble installing. Symptoms You may see an error message like this: Fetching racc 1.5.2 Installing racc 1.5.2 with native extensions Gem::Ext::BuildError: ERROR: Failed to build gem native extension. current directory: /Users/myuser2/.gem/ruby/2.7.0/gems/racc-1.5.2/ext/racc/cparse /opt/local/bin/ruby2.7 -I /opt/local/lib/ruby2.7/2.7.0 -r ./siteconf20210104-30183-axgzet.rb extconf.rb checking for rb_ary_subseq()... *** extconf.rb failed *** Could not create Makefile due to some reason, probably lack of necessary libraries and/or headers. Check the mkmf.log file for more details. You may need configuration options. Provided configuration options: --with-opt-dir --with-opt-include --without-opt-include=${opt-dir}/include --with-opt-lib --without-opt-lib=${opt-dir}/lib --with-make-prog --without-make-prog --srcdir=. --curdir --ruby=/opt/local/bin/$(RUBY_BASE_NAME)2.7 /opt/local/lib/ruby2.7/2.7.0/mkmf.rb:471:in `try_do': The compiler failed to generate an executable file. (RuntimeError) You have to install development tools first. from /opt/local/lib/ruby2.7/2.7.0/mkmf.rb:564:in `try_link0' from /opt/local/lib/ruby2.7/2.7.0/mkmf.rb:582:in `try_link' from /opt/local/lib/ruby2.7/2.7.0/mkmf.rb:794:in `try_func' from /opt/local/lib/ruby2.7/2.7.0/mkmf.rb:1083:in `block in have_func' from /opt/local/lib/ruby2.7/2.7.0/mkmf.rb:971:in `block in checking_for' from /opt/local/lib/ruby2.7/2.7.0/mkmf.rb:361:in `block (2 levels) in postpone' from /opt/local/lib/ruby2.7/2.7.0/mkmf.rb:331:in `open' from /opt/local/lib/ruby2.7/2.7.0/mkmf.rb:361:in `block in postpone' from /opt/local/lib/ruby2.7/2.7.0/mkmf.rb:331:in `open' from /opt/local/lib/ruby2.7/2.7.0/mkmf.rb:357:in `postpone' from /opt/local/lib/ruby2.7/2.7.0/mkmf.rb:970:in `checking_for' from /opt/local/lib/ruby2.7/2.7.0/mkmf.rb:1082:in `have_func' from extconf.rb:6:in `<main>' To see why this extension failed to compile, please check the mkmf.log which can be found here: /Users/myuser2/.gem/ruby/2.7.0/extensions/arm64-darwin-20/2.7.0/racc-1.5.2/mkmf.log extconf failed, exit code 1 Solution 1 - Compiler toolchain Racc needs the same compiler toolchain to be present as any Gem with a C extension. See Appendix A: The Compiler Toolchain . Solution 2 - Avoid installing Racc Ruby 3.0 comes with Racc 1.5.x as a \"builtin gem\", so you could update to Ruby 3! Ruby 2.7 comes with Racc 1.4.x as a \"builtin gem\", so you could use that version instead of trying to upgrade. Update to Ruby 2.7 and add a line like gem \"racc\", \"~> 1.4.0\" to prevent bundler from trying to upgrade. [Linux] /usr/bin/ld: cannot find -lgmp \u00b6 If you're compiling the ruby platform gem, and if you've installed Ruby using RVM, you may require libgmp . Symptoms Gem installation fails with an error message like: /home/user/.rvm/rubies/ruby-2.2.3/lib/ruby/2.2.0/mkmf.rb:456:in ` try_do ' : The compiler failed to generate an executable file. ( RuntimeError ) You have to install development tools first. And examination of your mkmf.log file shows: /usr/bin/ld: cannot find -lgmp Solution Run sudo apt-get install libgmp-dev . [MacOS] xcode-select errors with a 'network problem' \u00b6 If you're compiling the ruby platform gem ... Symptoms You see this dialog when you run the commands to update xcode commandline tools: Solution Run this command to turn off forced-authentication with Apple Software Update: sudo defaults delete /Library/Preferences/com.apple.SoftwareUpdate CatalogURL [MacOS] error: use of undeclared identifier 'LZMA_OK' \u00b6 If you're compiling the ruby platform gem ... Symptoms An error during Nokogiri installation mentions an undeclared identifier LZMA_OK : xmlIO.c:1450:52: error: use of undeclared identifier 'LZMA_OK' ret = (__libxml2_xzclose((xzFile) context) == LZMA_OK ) ? 0 : -1; ^ 1 error generated. Diagnosis When using Homebrew, there are several libraries that use a formula called xz (including the_silver_searcher and imagemagick ), which by default install a version of liblzma that is incompatible with most Ruby builds. (Homebrew installs only the 64-bit version of the library, but most Ruby builds are universal.) This can be fixed in a couple of ways: Solution 1 The most reliable solution appears to be temporarily unlinking xz and relinking it during an install of nokogiri : brew unlink xz gem install nokogiri # or bundle install brew link xz Solution 2 The other solution is to use a Homebrew-installed libxml2 , as suggested in Installing Using Standard System Libraries . brew install libxml2 gem install nokogiri -- --use-system-libraries \\ --with-xml2-include = $( brew --prefix libxml2 ) /include/libxml2 or if you're using bundler: bundle config build.nokogiri --use-system-libraries \\ --with-xml2-include = $( brew --prefix libxml2 ) /include/libxml2 bundle install When working with this, be certain to use $(brew --prefix libxml2) because it will use the correct location for your Homebrew install. [MacOS] libiconv is missing \u00b6 Xcode 10 on macOS Mojave moves the system headers out of /usr/include and so Nokogiri will fail to build when you're compiling the ruby platform gem. Symptoms You'll see an error similar to this: Building nokogiri using packaged libraries. libiconv is missing. please visit http://nokogiri.org/tutorials/installing_nokogiri.html for help with installing dependencies. *** extconf.rb failed *** Could not create Makefile due to some reason, probably lack of necessary libraries and/or headers. Solution A temporary workaround to allow previous releases of Nokogiri to build is to install the extra headers package mentioned in the Xcode 10 release notes: open /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg You can also install the headers package from the command line (e.g. for a build script or a CI server): sudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target / [MacOS] General MacOS Tips \u00b6 If you're seeing other problems: Make sure ruby is compiled with the latest clang compiler. Binary gems and ruby should be compiled with the same compiler/environment. If you have multiple versions of Xcode installed, make sure you use the right xcode-select . Try Installing Using Standard System Libraries . Appendix A: The Compiler Toolchain \u00b6 A good way to tell if you've got your basic Ruby C extension compiler toolchain installed correctly is to try installing the bcrypt gem which has a smaller, self-contained C extension. If you can gem install bcrypt , you're all set! Reminder: if you're installing a native gem, you don't need to do this. Ubuntu or Debian-based Distros \u00b6 sudo apt-get install build-essential ruby-dev Fedora, Red Hat, and CentOS \u00b6 dnf install -y make gcc rpm-build ruby-devel Alpine \u00b6 apk add build-base Windows \u00b6 Please visit RubyInstaller and make sure you install a version \"With Devkit\". MacOS \u00b6 First, make sure you have the latest version of RubyGems and xcode commandline tools: gem update --system xcode-select --install # Then agree to the terms, even if you have done this before! Agree to the Xcode license: sudo xcodebuild -license","title":"Installing Nokogiri"},{"location":"tutorials/installing_nokogiri.html#installing-nokogiri","text":"Welcome! We've spent quite a bit of time over the past year trying to make Nokogiri v1.11 easy and reliable to install. This page should hopefully get you on your way quickly.","title":"Installing Nokogiri"},{"location":"tutorials/installing_nokogiri.html#meta","text":"The current version of this page focuses on the installation experience for Nokogiri v1.11.x. If you're trying to install an earlier version, please visit: Nokogiri v1.10.x installation instructions If this document doesn't address your problem, please jump over to Getting Help . If you'd like to contribute improvements to this document, please open a GitHub issue or pull-request on nokogiri.org/installing_nokogiri.md .","title":"Meta"},{"location":"tutorials/installing_nokogiri.html#installing-native-gems","text":"","title":"Installing Native Gems"},{"location":"tutorials/installing_nokogiri.html#faster-more-reliable-installation","text":"\"Native gems\" contain pre-compiled libraries for a specific machine architecture. On supported platforms, this removes the need for compiling the C extension and the packaged libraries, or for system dependencies to exist. This results in much faster installation and more reliable installation , which as you probably know are the biggest headaches for Nokogiri users.","title":"Faster, more reliable installation"},{"location":"tutorials/installing_nokogiri.html#supported-platforms","text":"As of v1.11.0, Nokogiri ships pre-compiled, \"native\" gems for the following platforms: Linux: x86-linux and x86_64-linux (req: glibc >= 2.17 ), including musl platforms like Alpine Darwin/MacOS: x86_64-darwin and arm64-darwin Windows: x86-mingw32 and x64-mingw32 Java: any platform running JRuby 9.2 or higher To determine whether your system supports one of these gems, look at the output of bundle platform or ruby -e 'puts Gem::Platform.local.to_s' . If you're on a supported platform, either gem install or bundle install should install a native gem without any additional action on your part. This installation should only take a few seconds, and your output should look something like: $ gem install nokogiri Fetching nokogiri-1.11.0-x86_64-linux.gem Successfully installed nokogiri-1.11.0-x86_64-linux 1 gem installed","title":"Supported Platforms"},{"location":"tutorials/installing_nokogiri.html#why-would-i-not-want-to-use-a-native-gem","text":"I can imagine some folks might have trust issues; if this is you, please let us know in a comment at RFC: Increase the level of trust in released gem files \u00b7 Issue #2013 \u00b7 sparklemotion/nokogiri . What can we do to increase that trust? (I can imagine providing a chain of custody including public build logs with cryptographic hashes of artifacts, but I'd like to hear from real users.) Anybody on a linux system old enough to not have glibc >= 2.17 will need to install from the ruby platform gem. If you have other reasons for not wanting to use a precompiled native gem, let us know! (See Getting Help .)","title":"Why would I not want to use a native gem?"},{"location":"tutorials/installing_nokogiri.html#how-can-i-avoid-using-a-precompiled-native-gem","text":"The Nokogiri maintainers strongly urge you to use a native gem if at all possible. We expect it will be a much better experience for you and allow us to focus our efforts on improving functionality rather than diagnosing installation issues. If you're on a platform that supports a native gem but you want to avoid using it in your project, do one of the following: If you're not using Bundler, then run gem install nokogiri --platform=ruby If you are using Bundler version 2.1 or later, then you'll need to run bundle config set force_ruby_platform true , version 2.0 or earlier, then you'll need to run bundle config force_ruby_platform true","title":"How can I avoid using a precompiled native gem?"},{"location":"tutorials/installing_nokogiri.html#installing-the-ruby-platform-gem","text":"Again, we recommend that you upgrade to v1.11.x and use a native gem whenever possible. If you're here, it should be because you're on an older version, or you're on an unsupported platform. Before you begin, make sure you have the full compiler toolchain for compiling Ruby C Extensions. See Appendix A: The Compiler Toolchain .","title":"Installing the ruby platform gem"},{"location":"tutorials/installing_nokogiri.html#installing-using-the-packaged-libraries","text":"Nokogiri packages its own updated and patched copies of libxml2 and libxslt source code. By default, installation of Nokogiri will compile and use these packaged libraries. If you don't see your operating system / distro in this section, then no additional setup is required beyond Appendix A: The Compiler Toolchain . Just run gem install nokogiri --platform=ruby .","title":"Installing Using The Packaged Libraries"},{"location":"tutorials/installing_nokogiri.html#installing-using-standard-system-libraries","text":"Rather than use Nokogiri's packaged versions, you may prefer to use your system's or distro's standard libxml2/libxslt libraries. This section will try to help you do that. Nokogiri will refuse to build against older, unsupported versions of libxml2 and libxslt , and there may be some behavioral changes when using older versions. If you have installed libxml2 or libxslt to a custom location, please jump to the next section, Installing With Custom / Non-Standard Libraries . If you don't see your operating system or distro listed below, then no additional setup is required beyond Appendix A: The Compiler Toolchain . Just run gem install nokogiri --platform=ruby -- --use-system-libraries . Or, if you're using bundler, bundle config build.nokogiri --use-system-libraries .","title":"Installing Using Standard System Libraries"},{"location":"tutorials/installing_nokogiri.html#installing-with-custom-non-standard-libraries","text":"You may have your own custom version of libxml2/libxslt that you'd like to use. OK! Here we go. Ideally you can install pkg-config and the installed libraries should self-describe how to compile and build against themselves. But if: you've got libxml2 and/or libxslt installed in a nonstandard place, and you don't have pkg-config installed ... then you can use command-line parameters to the gem install command to specify build parameters. You can specify the installation root directory: gem install nokogiri -- \\ --use-system-libraries \\ --with-xml2-dir = /path/to/dir \\ --with-xslt-dir = /path/to/dir or, you can specify include and library directories separately: gem install nokogiri -- \\ --use-system-libraries \\ --with-xml2-lib = /path/to/builds/lib \\ --with-xml2-include = /path/to/builds/include/libxml2 \\ --with-xslt-lib = /path/to/builds/lib \\ --with-xslt-include = /path/to/builds/include Note: By default, libxslt header files are installed into the root include directory, but libxml2 header files are installed into a subdirectory thereof named libxml2 . It's likely that you'll also need to specify the location of your zlib and iconv (and possibly exslt ) install directories as well. In that case, you can add the options: gem install nokogiri -- \\ --use-system-libraries \\ # ... --with-iconv-dir = /path/to/dir \\ --with-zlib-dir = /path/to/dir \\ [ --with-exslt-dir = /path/to/dir ] [ --with-exslt-config = /path/to/exslt-config ] You can also tell bundler to remember these configuration parameters: bundle config build.nokogiri \\ --use-system-libraries \\ --with-xml2-lib = /usr/local/lib \\ --with-xml2-include = /usr/local/include/libxml2/libxml \\ --with-xslt-lib = /usr/local/lib \\ --with-xslt-include = /usr/local/include/libxslt \\ --with-iconv-lib = /usr/local/lib \\ --with-iconv-include = /usr/local/include Do not attempt Bundler installation using Bundler versions before v1.8.3 (see bundler/bundler#3053 for details). If you really must, see earlier git history of this file , which includes a workaround.","title":"Installing With Custom / Non-Standard Libraries"},{"location":"tutorials/installing_nokogiri.html#installing-third-party-distributions-of-nokogiri","text":"","title":"Installing Third-Party Distributions of Nokogiri"},{"location":"tutorials/installing_nokogiri.html#other-installation-scenarios","text":"","title":"Other Installation Scenarios"},{"location":"tutorials/installing_nokogiri.html#troubleshooting","text":"","title":"Troubleshooting"},{"location":"tutorials/installing_nokogiri.html#using-vendorcache-to-deploy-to-another-architecture","text":"A common workflow is for a team to develop on a Mac but deploy to production on Linux. This workflow depends on Bundler caching an appropriate gem file in vendor/cache . Unfortunately, in this situation Bundler's default behavior is to cache only gems for the development system and not the production system, leading to an error at deploy time.","title":"Using vendor/cache to deploy to another architecture"},{"location":"tutorials/installing_nokogiri.html#cannot-install-racc","text":"As of v1.11.0, Nokogiri is declaring an explicit dependency on racc ~> 1.4 , which itself is a C extension that users may have trouble installing.","title":"Cannot install racc"},{"location":"tutorials/installing_nokogiri.html#linux-usrbinld-cannot-find-lgmp","text":"If you're compiling the ruby platform gem, and if you've installed Ruby using RVM, you may require libgmp .","title":"[Linux] /usr/bin/ld: cannot find -lgmp"},{"location":"tutorials/installing_nokogiri.html#macos-xcode-select-errors-with-a-network-problem","text":"If you're compiling the ruby platform gem ...","title":"[MacOS] xcode-select errors with a 'network problem'"},{"location":"tutorials/installing_nokogiri.html#macos-error-use-of-undeclared-identifier-lzma_ok","text":"If you're compiling the ruby platform gem ...","title":"[MacOS] error: use of undeclared identifier 'LZMA_OK'"},{"location":"tutorials/installing_nokogiri.html#macos-libiconv-is-missing","text":"Xcode 10 on macOS Mojave moves the system headers out of /usr/include and so Nokogiri will fail to build when you're compiling the ruby platform gem.","title":"[MacOS] libiconv is missing"},{"location":"tutorials/installing_nokogiri.html#macos-general-macos-tips","text":"If you're seeing other problems: Make sure ruby is compiled with the latest clang compiler. Binary gems and ruby should be compiled with the same compiler/environment. If you have multiple versions of Xcode installed, make sure you use the right xcode-select . Try Installing Using Standard System Libraries .","title":"[MacOS] General MacOS Tips"},{"location":"tutorials/installing_nokogiri.html#appendix-a-the-compiler-toolchain","text":"A good way to tell if you've got your basic Ruby C extension compiler toolchain installed correctly is to try installing the bcrypt gem which has a smaller, self-contained C extension. If you can gem install bcrypt , you're all set! Reminder: if you're installing a native gem, you don't need to do this.","title":"Appendix A: The Compiler Toolchain"},{"location":"tutorials/installing_nokogiri.html#ubuntu-or-debian-based-distros","text":"sudo apt-get install build-essential ruby-dev","title":"Ubuntu or Debian-based Distros"},{"location":"tutorials/installing_nokogiri.html#fedora-red-hat-and-centos","text":"dnf install -y make gcc rpm-build ruby-devel","title":"Fedora, Red Hat, and CentOS"},{"location":"tutorials/installing_nokogiri.html#alpine","text":"apk add build-base","title":"Alpine"},{"location":"tutorials/installing_nokogiri.html#windows","text":"Please visit RubyInstaller and make sure you install a version \"With Devkit\".","title":"Windows"},{"location":"tutorials/installing_nokogiri.html#macos","text":"First, make sure you have the latest version of RubyGems and xcode commandline tools: gem update --system xcode-select --install # Then agree to the terms, even if you have done this before! Agree to the Xcode license: sudo xcodebuild -license","title":"MacOS"},{"location":"tutorials/modifying_an_html_xml_document.html","text":"Modifying an HTML / XML Document \u00b6 Changing text contents \u00b6 Assuming we have the following HTML document: @doc = Nokogiri :: HTML :: DocumentFragment . parse <<- EOHTML <body> <h1>Three's Company</h1> <div>A love triangle.</div> </body> EOHTML Let's change the header's text contents: h1 = @doc . at_css \"h1\" h1 . content = \"Snap, Crackle & Pop\" @doc . to_html # => \"<body> # \" + # \" <h1>Snap, Crackle &amp; Pop</h1> # \" + # \" <div>A love triangle.</div> # \" + # \" # \" + # \"</body>\" You'll notice that, when you use #content= , entities are properly escaped. Pow! Moving nodes \u00b6 The simplest method of moving a node is assign its parent: h1 = @doc . at_css \"h1\" div = @doc . at_css \"div\" h1 . parent = div @doc . to_html # => \"<body> # \" + # \" # \" + # \" <div>A love triangle.<h1>Three's Company</h1> # \" + # \"</div> # \" + # \" # \" + # \"</body>\" But you could also arrange it next to other nodes: div . add_next_sibling ( h1 ) @doc . to_html # => \"<body> # \" + # \" # \" + # \" <div>A love triangle.</div> # \" + # \"<h1>Three's Company</h1> # \" + # \" # \" + # \"</body>\" Modifying Nodes and Attributes \u00b6 h1 . name = 'h2' h1 [ 'class' ] = 'show-title' @doc . to_html # => \"<body> # \" + # \" <h2 class=\\\"show-title\\\">Three's Company</h2> # \" + # \" <div>A love triangle.</div> # \" + # \" # \" + # \"</body>\" Creating new nodes \u00b6 Often the easiest thing to do is pass markup to one of the Node methods to create siblings: h1 . add_next_sibling \"<h3>1977 - 1984</h3>\" @doc . to_html # => \"<body> # \" + # \" <h1>Three's Company</h1> # \" + # \"<h3>1977 - 1984</h3> # \" + # \" <div>A love triangle.</div> # \" + # \" # \" + # \"</body>\" or you can manually create a node object, if you're a detail-oriented person: h3 = Nokogiri :: XML :: Node . new \"h3\" , @doc h3 . content = \"1977 - 1984\" h1 . add_next_sibling ( h3 ) @doc . to_html # => \"<body> # \" + # \" <h1>Three's Company</h1> # \" + # \"<h3>1977 - 1984</h3> # \" + # \" <div>A love triangle.</div> # \" + # \" # \" + # \"</body>\" Wrapping a NodeSet \u00b6 If you wanted to wrap new HTML around each node in a Nodeset, here's an example of how to do it: nodes = @doc . css \"h1,div\" nodes . wrap ( \"<div class='container'></div>\" ) @doc . to_html # => \"<body> # \" + # \" <div class=\\\"container\\\"><h1>Three's Company</h1></div> # \" + # \" <div class=\\\"container\\\"><div>A love triangle.</div></div> # \" + # \" # \" + # \"</body>\" Adding a Processing Instruction \u00b6 (like <?xml-stylesheet?>) \u00b6 If you want to add a processing instruction (a.k.a. \"PI node\"), like an xml-stylesheet declaration, you should first create the node using Nokogiri::XML::ProcessingInstruction.new and then add it to the document as a previous-sibling of the root node: doc = Nokogiri :: XML \"<root>foo</root>\" doc . to_xml # => \"<?xml version=\\\"1.0\\\"?> # \" + \"<root>foo</root> # \" pi = Nokogiri :: XML :: ProcessingInstruction . new ( doc , \"xml-stylesheet\" , 'type=\"text/xsl\" href=\"foo.xsl\"' ) doc . root . add_previous_sibling pi doc . to_xml # => \"<?xml version=\\\"1.0\\\"?> # \" + # \"<?xml-stylesheet type=\\\"text/xsl\\\" href=\\\"foo.xsl\\\"?> # \" + # \"<root>foo</root> # \"","title":"Modifying an HTML/XML document"},{"location":"tutorials/modifying_an_html_xml_document.html#modifying-an-html-xml-document","text":"","title":"Modifying an HTML / XML Document"},{"location":"tutorials/modifying_an_html_xml_document.html#changing-text-contents","text":"Assuming we have the following HTML document: @doc = Nokogiri :: HTML :: DocumentFragment . parse <<- EOHTML <body> <h1>Three's Company</h1> <div>A love triangle.</div> </body> EOHTML Let's change the header's text contents: h1 = @doc . at_css \"h1\" h1 . content = \"Snap, Crackle & Pop\" @doc . to_html # => \"<body> # \" + # \" <h1>Snap, Crackle &amp; Pop</h1> # \" + # \" <div>A love triangle.</div> # \" + # \" # \" + # \"</body>\" You'll notice that, when you use #content= , entities are properly escaped. Pow!","title":"Changing text contents"},{"location":"tutorials/modifying_an_html_xml_document.html#moving-nodes","text":"The simplest method of moving a node is assign its parent: h1 = @doc . at_css \"h1\" div = @doc . at_css \"div\" h1 . parent = div @doc . to_html # => \"<body> # \" + # \" # \" + # \" <div>A love triangle.<h1>Three's Company</h1> # \" + # \"</div> # \" + # \" # \" + # \"</body>\" But you could also arrange it next to other nodes: div . add_next_sibling ( h1 ) @doc . to_html # => \"<body> # \" + # \" # \" + # \" <div>A love triangle.</div> # \" + # \"<h1>Three's Company</h1> # \" + # \" # \" + # \"</body>\"","title":"Moving nodes"},{"location":"tutorials/modifying_an_html_xml_document.html#modifying-nodes-and-attributes","text":"h1 . name = 'h2' h1 [ 'class' ] = 'show-title' @doc . to_html # => \"<body> # \" + # \" <h2 class=\\\"show-title\\\">Three's Company</h2> # \" + # \" <div>A love triangle.</div> # \" + # \" # \" + # \"</body>\"","title":"Modifying Nodes and Attributes"},{"location":"tutorials/modifying_an_html_xml_document.html#creating-new-nodes","text":"Often the easiest thing to do is pass markup to one of the Node methods to create siblings: h1 . add_next_sibling \"<h3>1977 - 1984</h3>\" @doc . to_html # => \"<body> # \" + # \" <h1>Three's Company</h1> # \" + # \"<h3>1977 - 1984</h3> # \" + # \" <div>A love triangle.</div> # \" + # \" # \" + # \"</body>\" or you can manually create a node object, if you're a detail-oriented person: h3 = Nokogiri :: XML :: Node . new \"h3\" , @doc h3 . content = \"1977 - 1984\" h1 . add_next_sibling ( h3 ) @doc . to_html # => \"<body> # \" + # \" <h1>Three's Company</h1> # \" + # \"<h3>1977 - 1984</h3> # \" + # \" <div>A love triangle.</div> # \" + # \" # \" + # \"</body>\"","title":"Creating new nodes"},{"location":"tutorials/modifying_an_html_xml_document.html#wrapping-a-nodeset","text":"If you wanted to wrap new HTML around each node in a Nodeset, here's an example of how to do it: nodes = @doc . css \"h1,div\" nodes . wrap ( \"<div class='container'></div>\" ) @doc . to_html # => \"<body> # \" + # \" <div class=\\\"container\\\"><h1>Three's Company</h1></div> # \" + # \" <div class=\\\"container\\\"><div>A love triangle.</div></div> # \" + # \" # \" + # \"</body>\"","title":"Wrapping a NodeSet"},{"location":"tutorials/modifying_an_html_xml_document.html#adding-a-processing-instruction","text":"","title":"Adding a Processing Instruction"},{"location":"tutorials/modifying_an_html_xml_document.html#like-xml-stylesheet","text":"If you want to add a processing instruction (a.k.a. \"PI node\"), like an xml-stylesheet declaration, you should first create the node using Nokogiri::XML::ProcessingInstruction.new and then add it to the document as a previous-sibling of the root node: doc = Nokogiri :: XML \"<root>foo</root>\" doc . to_xml # => \"<?xml version=\\\"1.0\\\"?> # \" + \"<root>foo</root> # \" pi = Nokogiri :: XML :: ProcessingInstruction . new ( doc , \"xml-stylesheet\" , 'type=\"text/xsl\" href=\"foo.xsl\"' ) doc . root . add_previous_sibling pi doc . to_xml # => \"<?xml version=\\\"1.0\\\"?> # \" + # \"<?xml-stylesheet type=\\\"text/xsl\\\" href=\\\"foo.xsl\\\"?> # \" + # \"<root>foo</root> # \"","title":"(like &lt;?xml-stylesheet?&gt;)"},{"location":"tutorials/more_resources.html","text":"More Resources \u00b6 sax-machine feedzirra elementor mechanize markup_validity","title":"More Resources"},{"location":"tutorials/more_resources.html#more-resources","text":"sax-machine feedzirra elementor mechanize markup_validity","title":"More Resources"},{"location":"tutorials/parsing_an_html5_document.html","text":"Parsing an HTML5 Document \u00b6 Nokogiri provides the ability for a Ruby program to invoke our version of the Gumbo HTML5 parser and to access the result as a Nokogiri::HTML::Document . Why is HTML5 parsing covered as a separate tutorial from HTML parsing ? Eventually, we'll integrate HTML5 docs into the other of tutorials, and this page will go away. We shipped HTML5 support as quickly as possible by copying (and only lightly editing) the Nokogumbo documentation to this page. HTML5 support is only in v1.12.0 and later. This tutorial describes functionality that is only available in Nokogiri v1.12.0 and later. Please visit the HTML5 API documentation for more information. HTML5 functionality is not available when running JRuby. The JRuby implementation of Nokogiri does not support HTML5 as of v1.12.0. If you'd like to help implement this support, or would like to know more, please see #2227 . Usage \u00b6 Parse an HTML5 document: doc = Nokogiri . HTML5 ( string ) Parse an HTML5 fragment: fragment = Nokogiri :: HTML5 . fragment ( string ) Parsing options \u00b6 The document and fragment parsing methods support options that are different from Nokogiri's. Nokogiri.HTML5(html, url = nil, encoding = nil, options = {}) Nokogiri::HTML5.parse(html, url = nil, encoding = nil, options = {}) Nokogiri::HTML5::Document.parse(html, url = nil, encoding = nil, options = {}) Nokogiri::HTML5.fragment(html, encoding = nil, options = {}) Nokogiri::HTML5::DocumentFragment.parse(html, encoding = nil, options = {}) The three currently supported options are :max_errors , :max_tree_depth and :max_attributes , described below. Error reporting \u00b6 Nokogiri contains an experimental HTML5 parse error reporting facility. By default, no parse errors are reported but this can be configured by passing the :max_errors option to HTML5.parse or HTML5.fragment . For example, this script: doc = Nokogiri :: HTML5 . parse ( '<span/>Hi there!</span foo=bar />' , max_errors : 10 ) doc . errors . each do | err | puts ( err ) end Emits: 1:1: ERROR: Expected a doctype token <span/>Hi there!</span foo=bar /> ^ 1:1: ERROR: Start tag of nonvoid HTML element ends with '/>', use '>'. <span/>Hi there!</span foo=bar /> ^ 1:17: ERROR: End tag ends with '/>', use '>'. <span/>Hi there!</span foo=bar /> ^ 1:17: ERROR: End tag contains attributes. <span/>Hi there!</span foo=bar /> ^ Using max_errors: -1 results in an unlimited number of errors being returned. The HTML standard defines a number of standard parse error codes. These error codes only cover the \"tokenization\" stage of parsing HTML. The parse errors in the \"tree construction\" stage do not have standardized error codes (yet). As a convenience to Nokogiri users, the defined error codes are available via Nokogiri::XML::SyntaxError#str1 method: doc = Nokogiri :: HTML5 . parse ( '<span/>Hi there!</span foo=bar />' , max_errors : 10 ) doc . errors . each do | err | puts ( \" #{ err . line } : #{ err . column } : #{ err . str1 } \" ) end # => 1:1: generic-parser # 1:1: non-void-html-element-start-tag-with-trailing-solidus # 1:17: end-tag-with-trailing-solidus # 1:17: end-tag-with-attributes Note that the first error is generic-parser because it's an error from the tree construction stage and doesn't have a standardized error code. For the purposes of semantic versioning, the error messages, error locations, and error codes are not part of Nokogiri's public API. That is, these are subject to change without Nokogiri's major version number changing. These may be stabilized in the future. Maximum tree depth \u00b6 The maximum depth of the DOM tree parsed by the various parsing methods is configurable by the :max_tree_depth option. If the depth of the tree would exceed this limit, then an ::ArgumentError is thrown. This limit (which defaults to Nokogiri::Gumbo::DEFAULT_MAX_TREE_DEPTH = 400 ) can be removed by giving the option max_tree_depth: -1 . html = '<!DOCTYPE html>' + '<div>' * 1000 doc = Nokogiri . HTML5 ( html ) # raises ArgumentError: Document tree depth limit exceeded doc = Nokogiri . HTML5 ( html , max_tree_depth : - 1 ) Attribute limit per element \u00b6 The maximum number of attributes per DOM element is configurable by the :max_attributes option. If a given element would exceed this limit, then an ::ArgumentError is thrown. This limit (which defaults to Nokogiri::Gumbo::DEFAULT_MAX_ATTRIBUTES = 400 ) can be removed by giving the option max_attributes: -1 . html = '<!DOCTYPE html><div ' + ( 1 .. 1000 ) . map { | x | \"attr- #{ x } \" } . join ( ' ' ) + '>' # \"<!DOCTYPE html><div attr-1 attr-2 attr-3 ... attr-1000>\" doc = Nokogiri . HTML5 ( html ) # raises ArgumentError: Attributes per element limit exceeded doc = Nokogiri . HTML5 ( html , max_attributes : - 1 ) HTML Serialization \u00b6 After parsing HTML, it may be serialized using any of the Nokogiri::XML::Node serialization methods. In particular, XML::Node#serialize , #to_html , and #to_s will serialize a given node and its children. (This is the equivalent of JavaScript's Element.outerHTML .) Similarly, XML::Node#inner_html will serialize the children of a given node. (This is the equivalent of JavaScript's Element.innerHTML .) doc = Nokogiri :: HTML5 ( \"<!DOCTYPE html><span>Hello world!</span>\" ) puts doc . serialize # => <!DOCTYPE html><html><head></head><body><span>Hello world!</span></body></html> Notes \u00b6 The Nokogiri::HTML5.fragment function takes a string and parses it as a HTML5 document. The <html> , <head> , and <body> elements are removed from this document, and any children of these elements that remain are returned as a Nokogiri::HTML5::DocumentFragment . The Nokogiri::HTML5.parse function takes a string and passes it to the gumbo_parse_with_options method, using the default options. The resulting Gumbo parse tree is then walked. Instead of uppercase element names, lowercase element names are produced. Instead of returning unknown as the element name for unknown tags, the original tag name is returned verbatim.","title":"Parsing an HTML5 document"},{"location":"tutorials/parsing_an_html5_document.html#parsing-an-html5-document","text":"Nokogiri provides the ability for a Ruby program to invoke our version of the Gumbo HTML5 parser and to access the result as a Nokogiri::HTML::Document . Why is HTML5 parsing covered as a separate tutorial from HTML parsing ? Eventually, we'll integrate HTML5 docs into the other of tutorials, and this page will go away. We shipped HTML5 support as quickly as possible by copying (and only lightly editing) the Nokogumbo documentation to this page. HTML5 support is only in v1.12.0 and later. This tutorial describes functionality that is only available in Nokogiri v1.12.0 and later. Please visit the HTML5 API documentation for more information. HTML5 functionality is not available when running JRuby. The JRuby implementation of Nokogiri does not support HTML5 as of v1.12.0. If you'd like to help implement this support, or would like to know more, please see #2227 .","title":"Parsing an HTML5 Document"},{"location":"tutorials/parsing_an_html5_document.html#usage","text":"Parse an HTML5 document: doc = Nokogiri . HTML5 ( string ) Parse an HTML5 fragment: fragment = Nokogiri :: HTML5 . fragment ( string )","title":"Usage"},{"location":"tutorials/parsing_an_html5_document.html#parsing-options","text":"The document and fragment parsing methods support options that are different from Nokogiri's. Nokogiri.HTML5(html, url = nil, encoding = nil, options = {}) Nokogiri::HTML5.parse(html, url = nil, encoding = nil, options = {}) Nokogiri::HTML5::Document.parse(html, url = nil, encoding = nil, options = {}) Nokogiri::HTML5.fragment(html, encoding = nil, options = {}) Nokogiri::HTML5::DocumentFragment.parse(html, encoding = nil, options = {}) The three currently supported options are :max_errors , :max_tree_depth and :max_attributes , described below.","title":"Parsing options"},{"location":"tutorials/parsing_an_html5_document.html#error-reporting","text":"Nokogiri contains an experimental HTML5 parse error reporting facility. By default, no parse errors are reported but this can be configured by passing the :max_errors option to HTML5.parse or HTML5.fragment . For example, this script: doc = Nokogiri :: HTML5 . parse ( '<span/>Hi there!</span foo=bar />' , max_errors : 10 ) doc . errors . each do | err | puts ( err ) end Emits: 1:1: ERROR: Expected a doctype token <span/>Hi there!</span foo=bar /> ^ 1:1: ERROR: Start tag of nonvoid HTML element ends with '/>', use '>'. <span/>Hi there!</span foo=bar /> ^ 1:17: ERROR: End tag ends with '/>', use '>'. <span/>Hi there!</span foo=bar /> ^ 1:17: ERROR: End tag contains attributes. <span/>Hi there!</span foo=bar /> ^ Using max_errors: -1 results in an unlimited number of errors being returned. The HTML standard defines a number of standard parse error codes. These error codes only cover the \"tokenization\" stage of parsing HTML. The parse errors in the \"tree construction\" stage do not have standardized error codes (yet). As a convenience to Nokogiri users, the defined error codes are available via Nokogiri::XML::SyntaxError#str1 method: doc = Nokogiri :: HTML5 . parse ( '<span/>Hi there!</span foo=bar />' , max_errors : 10 ) doc . errors . each do | err | puts ( \" #{ err . line } : #{ err . column } : #{ err . str1 } \" ) end # => 1:1: generic-parser # 1:1: non-void-html-element-start-tag-with-trailing-solidus # 1:17: end-tag-with-trailing-solidus # 1:17: end-tag-with-attributes Note that the first error is generic-parser because it's an error from the tree construction stage and doesn't have a standardized error code. For the purposes of semantic versioning, the error messages, error locations, and error codes are not part of Nokogiri's public API. That is, these are subject to change without Nokogiri's major version number changing. These may be stabilized in the future.","title":"Error reporting"},{"location":"tutorials/parsing_an_html5_document.html#maximum-tree-depth","text":"The maximum depth of the DOM tree parsed by the various parsing methods is configurable by the :max_tree_depth option. If the depth of the tree would exceed this limit, then an ::ArgumentError is thrown. This limit (which defaults to Nokogiri::Gumbo::DEFAULT_MAX_TREE_DEPTH = 400 ) can be removed by giving the option max_tree_depth: -1 . html = '<!DOCTYPE html>' + '<div>' * 1000 doc = Nokogiri . HTML5 ( html ) # raises ArgumentError: Document tree depth limit exceeded doc = Nokogiri . HTML5 ( html , max_tree_depth : - 1 )","title":"Maximum tree depth"},{"location":"tutorials/parsing_an_html5_document.html#attribute-limit-per-element","text":"The maximum number of attributes per DOM element is configurable by the :max_attributes option. If a given element would exceed this limit, then an ::ArgumentError is thrown. This limit (which defaults to Nokogiri::Gumbo::DEFAULT_MAX_ATTRIBUTES = 400 ) can be removed by giving the option max_attributes: -1 . html = '<!DOCTYPE html><div ' + ( 1 .. 1000 ) . map { | x | \"attr- #{ x } \" } . join ( ' ' ) + '>' # \"<!DOCTYPE html><div attr-1 attr-2 attr-3 ... attr-1000>\" doc = Nokogiri . HTML5 ( html ) # raises ArgumentError: Attributes per element limit exceeded doc = Nokogiri . HTML5 ( html , max_attributes : - 1 )","title":"Attribute limit per element"},{"location":"tutorials/parsing_an_html5_document.html#html-serialization","text":"After parsing HTML, it may be serialized using any of the Nokogiri::XML::Node serialization methods. In particular, XML::Node#serialize , #to_html , and #to_s will serialize a given node and its children. (This is the equivalent of JavaScript's Element.outerHTML .) Similarly, XML::Node#inner_html will serialize the children of a given node. (This is the equivalent of JavaScript's Element.innerHTML .) doc = Nokogiri :: HTML5 ( \"<!DOCTYPE html><span>Hello world!</span>\" ) puts doc . serialize # => <!DOCTYPE html><html><head></head><body><span>Hello world!</span></body></html>","title":"HTML Serialization"},{"location":"tutorials/parsing_an_html5_document.html#notes","text":"The Nokogiri::HTML5.fragment function takes a string and parses it as a HTML5 document. The <html> , <head> , and <body> elements are removed from this document, and any children of these elements that remain are returned as a Nokogiri::HTML5::DocumentFragment . The Nokogiri::HTML5.parse function takes a string and passes it to the gumbo_parse_with_options method, using the default options. The resulting Gumbo parse tree is then walked. Instead of uppercase element names, lowercase element names are produced. Instead of returning unknown as the element name for unknown tags, the original tag name is returned verbatim.","title":"Notes"},{"location":"tutorials/parsing_an_html_xml_document.html","text":"Parsing an HTML / XML Document \u00b6 From a String \u00b6 We've tried to make this easy on you. Really! We're here to make your life easier. html_doc = Nokogiri :: HTML ( \"<html><body><h1>Mr. Belvedere Fan Club</h1></body></html>\" ) xml_doc = Nokogiri :: XML ( \"<root><aliens><alien><name>Alf</name></alien></aliens></root>\" ) The variables html_doc and xml_doc are Nokogiri documents, which have all kinds of interesting properties and methods that you can read about here . We'll cover the interesting bits in other chapters. From a File \u00b6 Note that you don't need to read the file into a string variable. Nokogiri will do this for you. doc = File . open ( \"blossom.xml\" ) { | f | Nokogiri :: XML ( f ) } Clever Nokogiri! With the time you just saved, approach enlightenment by meditating on this koan . From the Internets \u00b6 I understand that there may be some HTML documents available on the World Wide Web. require 'open-uri' doc = Nokogiri :: HTML ( URI . open ( \"http://www.threescompany.com/\" )) Parse Options \u00b6 Nokogiri offers quite a few options that affect how a document is parsed; you can read about them in the XML::ParseOptions docs . Notably, Nokogiri will treat input as untrusted documents by default, thereby avoiding a class of vulnerabilities known as XXE or \"XML eXternal Entity\" processing. What this means is that Nokogiri won't attempt to load external DTDs or access the network for any external resources. Some commonly-used parse options are: NONET - Prevent any network connections during parsing. Recommended for parsing untrusted documents. This is set by default! RECOVER - Attempt to recover from errors. Recommended for parsing malformed or invalid documents. This is set by default! NOBLANKS - Remove blank nodes NOENT - Substitute entities NOERROR - Suppress error reports STRICT - Strict parsing; raise an error when parsing malformed documents DTDLOAD and DTDVALID - If you want DTD validation HUGE - use to skip hardcoded limits around document size or DOM depth; comes with a performance penalty You could use them by handcrafting an artisanal bitmap (not recommended): doc = Nokogiri :: XML ( File . open ( \"blossom.xml\" )) do | config | config . options = Nokogiri :: XML :: ParseOptions :: STRICT | Nokogiri :: XML :: ParseOptions :: NOBLANKS end But it's more idiomatic to use the chainable shortcuts on the config object instead: doc = Nokogiri :: XML ( File . open ( \"blossom.xml\" )) do | config | config . strict . noblanks end Notably, if you want to turn off an option that's set by default, you can prefix a \"no\" to the config shortcut: doc = Nokogiri :: XML ( File . open ( \"blossom.xml\" )) do | config | config . norecover end Leading to the perhaps-surprising (but logical!) nononet to turn networking back on: doc = Nokogiri :: XML ( File . open ( \"blossom.xml\" )) do | config | config . nononet end Encoding \u00b6 Strings are always stored as UTF-8 internally. Methods that return text values will always return UTF-8 encoded strings. Methods that return XML (like to_xml, to_html and inner_html) will return a string encoded like the source document. WARNING Some documents declare one particular encoding, but use a different one. So, which encoding should the parser choose? Remember that data is just a stream of bytes. Only us humans add meaning to that stream. Any particular set of bytes could be valid characters in multiple encodings, so detecting encoding with 100% accuracy is not possible. libxml2 does its best, but it can't be right 100% of the time. If you want Nokogiri to handle the document encoding properly, your best bet is to explicitly set the encoding. Here is an example of explicitly setting the encoding to EUC-JP on the parser: doc = Nokogiri . XML ( '<foo><bar /><foo>' , nil , 'EUC-JP' )","title":"Parsing an HTML/XML document"},{"location":"tutorials/parsing_an_html_xml_document.html#parsing-an-html-xml-document","text":"","title":"Parsing an HTML / XML Document"},{"location":"tutorials/parsing_an_html_xml_document.html#from-a-string","text":"We've tried to make this easy on you. Really! We're here to make your life easier. html_doc = Nokogiri :: HTML ( \"<html><body><h1>Mr. Belvedere Fan Club</h1></body></html>\" ) xml_doc = Nokogiri :: XML ( \"<root><aliens><alien><name>Alf</name></alien></aliens></root>\" ) The variables html_doc and xml_doc are Nokogiri documents, which have all kinds of interesting properties and methods that you can read about here . We'll cover the interesting bits in other chapters.","title":"From a String"},{"location":"tutorials/parsing_an_html_xml_document.html#from-a-file","text":"Note that you don't need to read the file into a string variable. Nokogiri will do this for you. doc = File . open ( \"blossom.xml\" ) { | f | Nokogiri :: XML ( f ) } Clever Nokogiri! With the time you just saved, approach enlightenment by meditating on this koan .","title":"From a File"},{"location":"tutorials/parsing_an_html_xml_document.html#from-the-internets","text":"I understand that there may be some HTML documents available on the World Wide Web. require 'open-uri' doc = Nokogiri :: HTML ( URI . open ( \"http://www.threescompany.com/\" ))","title":"From the Internets"},{"location":"tutorials/parsing_an_html_xml_document.html#parse-options","text":"Nokogiri offers quite a few options that affect how a document is parsed; you can read about them in the XML::ParseOptions docs . Notably, Nokogiri will treat input as untrusted documents by default, thereby avoiding a class of vulnerabilities known as XXE or \"XML eXternal Entity\" processing. What this means is that Nokogiri won't attempt to load external DTDs or access the network for any external resources. Some commonly-used parse options are: NONET - Prevent any network connections during parsing. Recommended for parsing untrusted documents. This is set by default! RECOVER - Attempt to recover from errors. Recommended for parsing malformed or invalid documents. This is set by default! NOBLANKS - Remove blank nodes NOENT - Substitute entities NOERROR - Suppress error reports STRICT - Strict parsing; raise an error when parsing malformed documents DTDLOAD and DTDVALID - If you want DTD validation HUGE - use to skip hardcoded limits around document size or DOM depth; comes with a performance penalty You could use them by handcrafting an artisanal bitmap (not recommended): doc = Nokogiri :: XML ( File . open ( \"blossom.xml\" )) do | config | config . options = Nokogiri :: XML :: ParseOptions :: STRICT | Nokogiri :: XML :: ParseOptions :: NOBLANKS end But it's more idiomatic to use the chainable shortcuts on the config object instead: doc = Nokogiri :: XML ( File . open ( \"blossom.xml\" )) do | config | config . strict . noblanks end Notably, if you want to turn off an option that's set by default, you can prefix a \"no\" to the config shortcut: doc = Nokogiri :: XML ( File . open ( \"blossom.xml\" )) do | config | config . norecover end Leading to the perhaps-surprising (but logical!) nononet to turn networking back on: doc = Nokogiri :: XML ( File . open ( \"blossom.xml\" )) do | config | config . nononet end","title":"Parse Options"},{"location":"tutorials/parsing_an_html_xml_document.html#encoding","text":"Strings are always stored as UTF-8 internally. Methods that return text values will always return UTF-8 encoded strings. Methods that return XML (like to_xml, to_html and inner_html) will return a string encoded like the source document. WARNING Some documents declare one particular encoding, but use a different one. So, which encoding should the parser choose? Remember that data is just a stream of bytes. Only us humans add meaning to that stream. Any particular set of bytes could be valid characters in multiple encodings, so detecting encoding with 100% accuracy is not possible. libxml2 does its best, but it can't be right 100% of the time. If you want Nokogiri to handle the document encoding properly, your best bet is to explicitly set the encoding. Here is an example of explicitly setting the encoding to EUC-JP on the parser: doc = Nokogiri . XML ( '<foo><bar /><foo>' , nil , 'EUC-JP' )","title":"Encoding"},{"location":"tutorials/searching_a_xml_html_document.html","text":"Searching an HTML / XML Document \u00b6 Basic Searching \u00b6 Let's suppose you have the following document: [shows.xml] <root> <sitcoms> <sitcom> <name> Married with Children </name> <characters> <character> Al Bundy </character> <character> Bud Bundy </character> <character> Marcy Darcy </character> </characters> </sitcom> <sitcom> <name> Perfect Strangers </name> <characters> <character> Larry Appleton </character> <character> Balki Bartokomous </character> </characters> </sitcom> </sitcoms> <dramas> <drama> <name> The A-Team </name> <characters> <character> John \"Hannibal\" Smith </character> <character> Templeton \"Face\" Peck </character> <character> \"B.A.\" Baracus </character> <character> \"Howling Mad\" Murdock </character> </characters> </drama> </dramas> </root> Let's further suppose that you want a list of all the characters in all the shows in this document. @doc = Nokogiri :: XML ( File . open ( \"shows.xml\" )) @doc . xpath ( \"//character\" ) # => [\"<character>Al Bundy</character>\", # \"<character>Bud Bundy</character>\", # \"<character>Marcy Darcy</character>\", # \"<character>Larry Appleton</character>\", # \"<character>Balki Bartokomous</character>\", # \"<character>John \\\"Hannibal\\\" Smith</character>\", # \"<character>Templeton \\\"Face\\\" Peck</character>\", # \"<character>\\\"B.A.\\\" Baracus</character>\", # \"<character>\\\"Howling Mad\\\" Murdock</character>\"] The Node methods xpath and css actually return a NodeSet , which acts very much like an array, and contains matching nodes from the document. characters = @doc . xpath ( \"//character\" ) characters [ 0 ]. to_s # => \"<character>Al Bundy</character>\" You can use any XPath or CSS query you like (see the chapter on XPath and CSS syntax for more information). @doc . xpath ( \"//dramas//character\" ) # => [\"<character>John \\\"Hannibal\\\" Smith</character>\", # \"<character>Templeton \\\"Face\\\" Peck</character>\", # \"<character>\\\"B.A.\\\" Baracus</character>\", # \"<character>\\\"Howling Mad\\\" Murdock</character>\"] Notably, you can even use CSS queries in an XML document! characters = @doc . css ( \"sitcoms name\" ) # => [\"<name>Married with Children</name>\", \"<name>Perfect Strangers</name>\"] CSS queries are often the easiest and most succinct way to express what you're looking for, so don't be afraid to use them! Single Results \u00b6 If you know you're going to get only a single result back, you can use the shortcuts at_css and at_xpath instead of having to access the first element of a NodeSet. @doc . css ( \"dramas name\" ) . first # => \"<name>The A-Team</name>\" @doc . at_css ( \"dramas name\" ) # => \"<name>The A-Team</name>\" Namespaces \u00b6 Just like our Ruby code, XML can suffer from name collisions. For example, an autoparts dealer can sell tires and so can a bike dealer. Both of them may use a \"tire\" tag to describe the tires they sell. However, we need to be able to tell the difference between a car tire and a bike tire . This is where namespaces come to the rescue. Namespaces associate tags with a unique URL. Let's take a look at the autoparts store's XML versus the bike stores: [parts.xml] <parts> <!-- Alice's Auto Parts Store --> <inventory xmlns= \"http://alicesautoparts.com/\" > <tire> all weather </tire> <tire> studded </tire> <tire> extra wide </tire> </inventory> <!-- Bob's Bike Shop --> <inventory xmlns= \"http://bobsbikes.com/\" > <tire> street </tire> <tire> mountain </tire> </inventory> </parts> Since the URLs are unique, we can associate our query with a URL and get only the tires belonging to that url: @doc = Nokogiri :: XML ( File . read ( \"parts.xml\" )) car_tires = @doc . xpath ( '//car:tire' , 'car' => 'http://alicesautoparts.com/' ) # => [\"<tire>all weather</tire>\", # \"<tire>studded</tire>\", # \"<tire>extra wide</tire>\"] bike_tires = @doc . xpath ( '//bike:tire' , 'bike' => 'http://bobsbikes.com/' ) # => [\"<tire>street</tire>\", \"<tire>mountain</tire>\"] To make this namespace registration a bit easier, nokogiri will automatically register any namespaces it finds on the root node for you . Nokogiri will associate the name in the declaration with the supplied URL. If we stick to this naming convention, we can shorten up our code. Let's take this atom feed for example: [atom.xml] <?xml version=\"1.0\" encoding=\"utf-8\"?> <feed xmlns= \"http://www.w3.org/2005/Atom\" > <title> Example Feed </title> <link href= \"http://example.org/\" /> <updated> 2003-12-13T18:30:02Z </updated> <author> <name> John Doe </name> </author> <id> urn:uuid:60a76c80-d399-11d9-b93C-0003939e0af6 </id> <entry> <title> Atom-Powered Robots Run Amok </title> <link href= \"http://example.org/2003/12/13/atom03\" /> <id> urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a </id> <updated> 2003-12-13T18:30:02Z </updated> <summary> Some text. </summary> </entry> </feed> If we stick to the convention, we can grab all title tags like this @doc . xpath ( '//xmlns:title' ) # => [\"<title>Example Feed</title>\", \"<title>Atom-Powered Robots Run Amok</title>\"] Don't be fooled though. You do not have to use XPath to get the benefits of namespaces. CSS selectors can be used as well. CSS just uses the pipe symbol to indicate a namespace search. Let's see the previous search rewritten to use CSS: @doc . css ( 'xmlns|title' ) # => [\"<title>Example Feed</title>\", \"<title>Atom-Powered Robots Run Amok</title>\"] When using CSS, if the namespace is called \"xmlns\", you can even omit the namespace name. That means your CSS will reduce to: @doc . css ( 'title' ) # => [\"<title>Example Feed</title>\", \"<title>Atom-Powered Robots Run Amok</title>\"] Dealing with namespaces is a broad topic. If you need more examples, be sure to check out this blog post or send an email to the mailing list , and we can help out. But I'm Lazy and Don't Want to Deal With Namespaces! \u00b6 Lazy == Efficient, so no judgements. :) If you have an XML document with namespaces, but would prefer to ignore them entirely (and query as if Tim Bray had never invented them), then you can call remove_namespaces! on an XML::Document to remove all namespaces. Of course, if the document had nodes with the same names but different namespaces, they will now be ambiguous. But you're lazy! You don't care! Slop 1 \u00b6 Maybe you want a more interactive (read: sloppy) way to access nodes and attributes. If you like what XmlSimple does, then you'll probably like Nokogiri's Slop mode. 2 Slop mode allows you to violate the Law of Demeter with extreme prejudice, by using #method_missing to introspect on a node's child tags. 3 doc = Nokogiri :: Slop <<- EOXML <employees> <employee status=\"active\"> <fullname>Dean Martin</fullname> </employee> <employee status=\"inactive\"> <fullname>Jerry Lewis</fullname> </employee> </employees> EOXML # navigate! doc . employees . employee . last . fullname . content # => \"Jerry Lewis\" # access node attributes! doc . employees . employee . first [ \"status\" ] # => \"active\" # use some xpath! doc . employees . employee ( \"[@status='active']\" ) . fullname . content # => \"Dean Martin\" doc . employees . employee ( :xpath => \"@status='active'\" ) . fullname . content # => \"Dean Martin\" # use some css! doc . employees . employee ( \"[status='active']\" ) . fullname . content # => \"Dean Martin\" doc . employees . employee ( :css => \"[status='active']\" ) . fullname . content # => \"Dean Martin\" Aww yeah. Can you feel the spirit of @jbarnette and @nakajima flowing through you? That's the power of the slop . 4 Don't use this. \u21a9 This may or may not be a backhanded compliment. \u21a9 No, really, don't use this. If you use it, don't report bugs. \u21a9 You've been warned! \u21a9","title":"Searching a XML/HTML document"},{"location":"tutorials/searching_a_xml_html_document.html#searching-an-html-xml-document","text":"","title":"Searching an HTML / XML Document"},{"location":"tutorials/searching_a_xml_html_document.html#basic-searching","text":"Let's suppose you have the following document: [shows.xml] <root> <sitcoms> <sitcom> <name> Married with Children </name> <characters> <character> Al Bundy </character> <character> Bud Bundy </character> <character> Marcy Darcy </character> </characters> </sitcom> <sitcom> <name> Perfect Strangers </name> <characters> <character> Larry Appleton </character> <character> Balki Bartokomous </character> </characters> </sitcom> </sitcoms> <dramas> <drama> <name> The A-Team </name> <characters> <character> John \"Hannibal\" Smith </character> <character> Templeton \"Face\" Peck </character> <character> \"B.A.\" Baracus </character> <character> \"Howling Mad\" Murdock </character> </characters> </drama> </dramas> </root> Let's further suppose that you want a list of all the characters in all the shows in this document. @doc = Nokogiri :: XML ( File . open ( \"shows.xml\" )) @doc . xpath ( \"//character\" ) # => [\"<character>Al Bundy</character>\", # \"<character>Bud Bundy</character>\", # \"<character>Marcy Darcy</character>\", # \"<character>Larry Appleton</character>\", # \"<character>Balki Bartokomous</character>\", # \"<character>John \\\"Hannibal\\\" Smith</character>\", # \"<character>Templeton \\\"Face\\\" Peck</character>\", # \"<character>\\\"B.A.\\\" Baracus</character>\", # \"<character>\\\"Howling Mad\\\" Murdock</character>\"] The Node methods xpath and css actually return a NodeSet , which acts very much like an array, and contains matching nodes from the document. characters = @doc . xpath ( \"//character\" ) characters [ 0 ]. to_s # => \"<character>Al Bundy</character>\" You can use any XPath or CSS query you like (see the chapter on XPath and CSS syntax for more information). @doc . xpath ( \"//dramas//character\" ) # => [\"<character>John \\\"Hannibal\\\" Smith</character>\", # \"<character>Templeton \\\"Face\\\" Peck</character>\", # \"<character>\\\"B.A.\\\" Baracus</character>\", # \"<character>\\\"Howling Mad\\\" Murdock</character>\"] Notably, you can even use CSS queries in an XML document! characters = @doc . css ( \"sitcoms name\" ) # => [\"<name>Married with Children</name>\", \"<name>Perfect Strangers</name>\"] CSS queries are often the easiest and most succinct way to express what you're looking for, so don't be afraid to use them!","title":"Basic Searching"},{"location":"tutorials/searching_a_xml_html_document.html#single-results","text":"If you know you're going to get only a single result back, you can use the shortcuts at_css and at_xpath instead of having to access the first element of a NodeSet. @doc . css ( \"dramas name\" ) . first # => \"<name>The A-Team</name>\" @doc . at_css ( \"dramas name\" ) # => \"<name>The A-Team</name>\"","title":"Single Results"},{"location":"tutorials/searching_a_xml_html_document.html#namespaces","text":"Just like our Ruby code, XML can suffer from name collisions. For example, an autoparts dealer can sell tires and so can a bike dealer. Both of them may use a \"tire\" tag to describe the tires they sell. However, we need to be able to tell the difference between a car tire and a bike tire . This is where namespaces come to the rescue. Namespaces associate tags with a unique URL. Let's take a look at the autoparts store's XML versus the bike stores: [parts.xml] <parts> <!-- Alice's Auto Parts Store --> <inventory xmlns= \"http://alicesautoparts.com/\" > <tire> all weather </tire> <tire> studded </tire> <tire> extra wide </tire> </inventory> <!-- Bob's Bike Shop --> <inventory xmlns= \"http://bobsbikes.com/\" > <tire> street </tire> <tire> mountain </tire> </inventory> </parts> Since the URLs are unique, we can associate our query with a URL and get only the tires belonging to that url: @doc = Nokogiri :: XML ( File . read ( \"parts.xml\" )) car_tires = @doc . xpath ( '//car:tire' , 'car' => 'http://alicesautoparts.com/' ) # => [\"<tire>all weather</tire>\", # \"<tire>studded</tire>\", # \"<tire>extra wide</tire>\"] bike_tires = @doc . xpath ( '//bike:tire' , 'bike' => 'http://bobsbikes.com/' ) # => [\"<tire>street</tire>\", \"<tire>mountain</tire>\"] To make this namespace registration a bit easier, nokogiri will automatically register any namespaces it finds on the root node for you . Nokogiri will associate the name in the declaration with the supplied URL. If we stick to this naming convention, we can shorten up our code. Let's take this atom feed for example: [atom.xml] <?xml version=\"1.0\" encoding=\"utf-8\"?> <feed xmlns= \"http://www.w3.org/2005/Atom\" > <title> Example Feed </title> <link href= \"http://example.org/\" /> <updated> 2003-12-13T18:30:02Z </updated> <author> <name> John Doe </name> </author> <id> urn:uuid:60a76c80-d399-11d9-b93C-0003939e0af6 </id> <entry> <title> Atom-Powered Robots Run Amok </title> <link href= \"http://example.org/2003/12/13/atom03\" /> <id> urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a </id> <updated> 2003-12-13T18:30:02Z </updated> <summary> Some text. </summary> </entry> </feed> If we stick to the convention, we can grab all title tags like this @doc . xpath ( '//xmlns:title' ) # => [\"<title>Example Feed</title>\", \"<title>Atom-Powered Robots Run Amok</title>\"] Don't be fooled though. You do not have to use XPath to get the benefits of namespaces. CSS selectors can be used as well. CSS just uses the pipe symbol to indicate a namespace search. Let's see the previous search rewritten to use CSS: @doc . css ( 'xmlns|title' ) # => [\"<title>Example Feed</title>\", \"<title>Atom-Powered Robots Run Amok</title>\"] When using CSS, if the namespace is called \"xmlns\", you can even omit the namespace name. That means your CSS will reduce to: @doc . css ( 'title' ) # => [\"<title>Example Feed</title>\", \"<title>Atom-Powered Robots Run Amok</title>\"] Dealing with namespaces is a broad topic. If you need more examples, be sure to check out this blog post or send an email to the mailing list , and we can help out.","title":"Namespaces"},{"location":"tutorials/searching_a_xml_html_document.html#but-im-lazy-and-dont-want-to-deal-with-namespaces","text":"Lazy == Efficient, so no judgements. :) If you have an XML document with namespaces, but would prefer to ignore them entirely (and query as if Tim Bray had never invented them), then you can call remove_namespaces! on an XML::Document to remove all namespaces. Of course, if the document had nodes with the same names but different namespaces, they will now be ambiguous. But you're lazy! You don't care!","title":"But I'm Lazy and Don't Want to Deal With Namespaces!"},{"location":"tutorials/searching_a_xml_html_document.html#slop-1","text":"Maybe you want a more interactive (read: sloppy) way to access nodes and attributes. If you like what XmlSimple does, then you'll probably like Nokogiri's Slop mode. 2 Slop mode allows you to violate the Law of Demeter with extreme prejudice, by using #method_missing to introspect on a node's child tags. 3 doc = Nokogiri :: Slop <<- EOXML <employees> <employee status=\"active\"> <fullname>Dean Martin</fullname> </employee> <employee status=\"inactive\"> <fullname>Jerry Lewis</fullname> </employee> </employees> EOXML # navigate! doc . employees . employee . last . fullname . content # => \"Jerry Lewis\" # access node attributes! doc . employees . employee . first [ \"status\" ] # => \"active\" # use some xpath! doc . employees . employee ( \"[@status='active']\" ) . fullname . content # => \"Dean Martin\" doc . employees . employee ( :xpath => \"@status='active'\" ) . fullname . content # => \"Dean Martin\" # use some css! doc . employees . employee ( \"[status='active']\" ) . fullname . content # => \"Dean Martin\" doc . employees . employee ( :css => \"[status='active']\" ) . fullname . content # => \"Dean Martin\" Aww yeah. Can you feel the spirit of @jbarnette and @nakajima flowing through you? That's the power of the slop . 4 Don't use this. \u21a9 This may or may not be a backhanded compliment. \u21a9 No, really, don't use this. If you use it, don't report bugs. \u21a9 You've been warned! \u21a9","title":"Slop 1"},{"location":"tutorials/security.html","text":"Security and Vulnerability Reporting \u00b6 The Nokogiri Core Contributors take security very seriously and investigate all reported vulnerabilities. If you would like to report a vulnerablity or have a security concern regarding Nokogiri or how Nokogiri is using any of its underlying platform-specific libraries (such as libxml2 or xerces), please report it via HackerOne . Your report will be acknowledged within 24 hours, and you'll receive a more detailed response within 72 hours indicating next steps in handling your report. If you have not received a reply to your submission within 48 hours, there are a few steps you can take: Contact the current security coordinator (Mike Dalessio mike.dalessio@gmail.com ) Contact the core contributor mailing list ( nokogiri-core@googlegroups.com ) Join the nokogiri-talk group Please note, the nokogiri-talk list is a public area. When escalating in that venue, please do not discuss your issue. Simply say that you're trying to get a hold of someone from the core team. The information you share with the Nokogiri Core Contributors as part of this process will be kept confidential within the team, unless or until we need to share information upstream with our dependent libraries' core teams, at which point we will notify you. If a vulnerability is first reported by you, we will credit you with the discovery in the public disclosure.","title":"Security"},{"location":"tutorials/security.html#security-and-vulnerability-reporting","text":"The Nokogiri Core Contributors take security very seriously and investigate all reported vulnerabilities. If you would like to report a vulnerablity or have a security concern regarding Nokogiri or how Nokogiri is using any of its underlying platform-specific libraries (such as libxml2 or xerces), please report it via HackerOne . Your report will be acknowledged within 24 hours, and you'll receive a more detailed response within 72 hours indicating next steps in handling your report. If you have not received a reply to your submission within 48 hours, there are a few steps you can take: Contact the current security coordinator (Mike Dalessio mike.dalessio@gmail.com ) Contact the core contributor mailing list ( nokogiri-core@googlegroups.com ) Join the nokogiri-talk group Please note, the nokogiri-talk list is a public area. When escalating in that venue, please do not discuss your issue. Simply say that you're trying to get a hold of someone from the core team. The information you share with the Nokogiri Core Contributors as part of this process will be kept confidential within the team, unless or until we need to share information upstream with our dependent libraries' core teams, at which point we will notify you. If a vulnerability is first reported by you, we will credit you with the discovery in the public disclosure.","title":"Security and Vulnerability Reporting"},{"location":"tutorials/toc.html","text":"Nokogiri Tutorials \u00b6 Parsing an HTML/XML document Parsing an HTML5 document Searching a XML/HTML document Modifying an HTML/XML document Ensuring well-formed markup","title":"Table of Contents"},{"location":"tutorials/toc.html#nokogiri-tutorials","text":"Parsing an HTML/XML document Parsing an HTML5 document Searching a XML/HTML document Modifying an HTML/XML document Ensuring well-formed markup","title":"Nokogiri Tutorials"}]}